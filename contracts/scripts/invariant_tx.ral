TxScript AddFeeTier(invariant: Invariant, feeTier: FeeTier) {
    invariant.addFeeTier{callerAddress!() -> ALPH: mapEntryDeposit!()}(feeTier)
}

TxScript RemoveFeeTier(invariant: Invariant, feeTier: FeeTier) {
    invariant.removeFeeTier(feeTier)
}

TxScript CreatePool(invariant: Invariant, token0: ByteVec, token1: ByteVec, feeTier: FeeTier, initSqrtPrice: SqrtPrice, initTick: I256){
    invariant.createPool{callerAddress!() -> ALPH: 5 * mapEntryDeposit!() }(token0, token1, feeTier, initSqrtPrice, initTick)
}

TxScript ChangeProtocolFee(invariant: Invariant, newFee: Percentage) {
    invariant.changeProtocolFee(newFee)
}

TxScript ChangeFeeReceiver(invariant: Invariant, poolKey: PoolKey, newFeeReceiver: Address) {
    invariant.changeFeeReceiver(poolKey,newFeeReceiver)
}

TxScript WithdrawProtocolFee(invariant: Invariant, poolKey: PoolKey) {
    invariant.withdrawProtocolFee(poolKey)
}

TxScript CreatePosition(
    invariant: Invariant,
    poolKey: PoolKey,
    lowerTick: I256,
    upperTick: I256,
    liquidityDelta: Liquidity,
    slippageLimitLower: SqrtPrice,
    slippageLimitUpper: SqrtPrice
) {
    let amountX = tokenRemaining!(callerAddress!(), poolKey.tokenX)
    let amountY = tokenRemaining!(callerAddress!(), poolKey.tokenY)
    if(poolKey.tokenX == ALPH) {
        invariant.createPosition{callerAddress!() -> ALPH: amountX, poolKey.tokenY: amountY}
            (poolKey, lowerTick, upperTick, liquidityDelta, slippageLimitLower, slippageLimitUpper)    
    } else {
        invariant.createPosition{callerAddress!() -> poolKey.tokenX: amountX, poolKey.tokenY: amountY, ALPH: mapEntryDeposit!() * 6}
            (poolKey, lowerTick, upperTick, liquidityDelta, slippageLimitLower, slippageLimitUpper)
    }
}

TxScript RemovePosition(invariant: Invariant, index: U256) {
    invariant.removePosition(index)
}

TxScript TransferPosition(invariant: Invariant, index: U256, recipient: Address) {
    invariant.transferPosition{callerAddress!() -> ALPH: 2 * mapEntryDeposit!()}(index, recipient)
}

TxScript ClaimFee(invariant: Invariant, index: U256) {
    invariant.claimFee(index)
}

TxScript Swap(invariant: Invariant, poolKey: PoolKey, xToY: Bool, amount: TokenAmount, byAmountIn: Bool, sqrtPriceLimit: SqrtPrice) {
    let mut swappedToken = poolKey.tokenX
    let mut swappedAmount = amount.v
    if (!xToY) {
        swappedToken = poolKey.tokenY
    }
    if (!byAmountIn) {
        swappedAmount = tokenRemaining!(callerAddress!(), swappedToken)
    }

    let _ = invariant.swap{callerAddress!() -> swappedToken: swappedAmount}(poolKey, xToY, amount, byAmountIn, sqrtPriceLimit)
}

