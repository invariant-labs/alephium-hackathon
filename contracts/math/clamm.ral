Contract CLAMM(uints: Uints) extends Log() {
    enum CLAMMError {
        InvalidTickIndex = 800
        InvalidTickSpacing = 801
    }

    pub fn computeSwapStep(
        currentSqrtPrice: U256,
        targetSqrtPrice: U256,
        liquidity: U256,
        amount: U256,
        byAmountIn: Bool,
        fee: U256
    ) -> SwapResult {
        if (liquidity == 0) {
            return SwapResult { 
                nextSqrtPrice: targetSqrtPrice,
                amountIn: 0,
                amountOut: 0,
                feeAmount: 0
            }
        }

        let xToY = currentSqrtPrice >= targetSqrtPrice

        let mut nextSqrtPrice = 0
        let mut amountIn = 0
        let mut amountOut = 0

        if (byAmountIn) {
            let amountAfterFee = mul(amount, (one(PercentageScale) - fee), PercentageScale)

            if (xToY) {
                amountIn = getDeltaX(targetSqrtPrice, currentSqrtPrice, liquidity, true)
            } else {
                amountIn = getDeltaY(currentSqrtPrice, targetSqrtPrice, liquidity, true)
            }

            if (amountAfterFee >= amountIn) {
                nextSqrtPrice = targetSqrtPrice
            } else {
                nextSqrtPrice = getNextSqrtPriceFromInput(currentSqrtPrice, liquidity, amountAfterFee, xToY)
            }
        } else {
            if (xToY) {
                amountOut = getDeltaY(targetSqrtPrice, currentSqrtPrice, liquidity, false)
            } else {
                amountOut = getDeltaX(currentSqrtPrice, targetSqrtPrice, liquidity, false)
            }

            if (amount >= amountOut) {
                nextSqrtPrice = targetSqrtPrice
            } else {
                nextSqrtPrice = getNextSqrtPriceFromOutput(currentSqrtPrice, liquidity, amount, xToY)
            }
        }

        let notMax = targetSqrtPrice != nextSqrtPrice

        if (xToY) {
            if (notMax || !byAmountIn) {
                amountIn = getDeltaX(nextSqrtPrice, currentSqrtPrice, liquidity, true)
            }
            if (notMax || byAmountIn) {
                amountOut = getDeltaY(nextSqrtPrice, currentSqrtPrice, liquidity, false)
            }
        } else {
            if (notMax|| !byAmountIn) {
                amountIn = getDeltaY(currentSqrtPrice, nextSqrtPrice, liquidity, true)
            }
            if (notMax || byAmountIn) {
                amountOut = getDeltaX(currentSqrtPrice, nextSqrtPrice, liquidity, false)
            }
        }

        // trim dust in case of specifying exact amount out
        if (!byAmountIn && amountOut > amount) {
            amountOut = amount
        }

        let mut feeAmount = 0
        if (byAmountIn && nextSqrtPrice != targetSqrtPrice) {
            feeAmount = amount - amountIn
        } else {
            feeAmount = mulUp(amountIn, fee, PercentageScale)
        }

        return SwapResult { 
            nextSqrtPrice: nextSqrtPrice,
            amountIn: amountIn,
            amountOut: amountOut,
            feeAmount: feeAmount
        }
    }

    pub fn getDeltaX(
        sqrtPriceA: U256,
        sqrtPriceB: U256,
        liquidity: U256,
        roundingUp: Bool
    ) -> U256 {
        let mut deltaSqrtPrice = 0u
        if (sqrtPriceA > sqrtPriceB) {
            deltaSqrtPrice = sqrtPriceA - sqrtPriceB
        } else {
            deltaSqrtPrice = sqrtPriceB - sqrtPriceA
        }

        let nominator = mul(deltaSqrtPrice, liquidity, LiquidityScale)
        if (roundingUp == true) {
            return divToTokenUp(
                    nominator,
                    mul(sqrtPriceA, sqrtPriceB, SqrtPriceScale)
                )
        } else {
            return divToToken(
                nominator,
                mulUp(sqrtPriceA, sqrtPriceB, SqrtPriceScale)
            )
        }
    }

    pub fn getDeltaY(
        sqrtPriceA: U256,
        sqrtPriceB: U256,
        liquidity: U256,
        roundingUp: Bool
    ) -> U256 {
        let mut deltaSqrtPrice = 0u
        if (sqrtPriceA > sqrtPriceB) {
            deltaSqrtPrice = sqrtPriceA - sqrtPriceB
        } else {
            deltaSqrtPrice = sqrtPriceB - sqrtPriceA
        }

        let mut result = U512 { lower: 0, higher: 0 }

        if (roundingUp) {
            result = uints.bigMulDiv256(deltaSqrtPrice, liquidity, one(LiquidityScale))
            result = uints.bigAdd512(result, uints.toU512(almostOne(SqrtPriceScale)))
            result = uints.bigDiv512(result, one(SqrtPriceScale), 1)
            return uints.toU256(result)
        } else {
            result = uints.bigMulDiv256(deltaSqrtPrice, liquidity, one(LiquidityScale))
            result = uints.bigDiv512(result, one(SqrtPriceScale), 1)
            return uints.toU256(result)
        }
    }

    pub fn getNextSqrtPriceFromInput(
        startingSqrtPrice: U256,
        liquidity: U256,
        amount: U256,
        xToY: Bool
    ) -> U256 {
        if (xToY) {
            return getNextSqrtPriceXUp(startingSqrtPrice, liquidity, amount, true)
        } else {
            return getNextSqrtPriceYDown(startingSqrtPrice, liquidity, amount, true)
        } 
    }

    pub fn getNextSqrtPriceFromOutput(
        startingSqrtPrice: U256,
        liquidity: U256,
        amount: U256,
        xToY: Bool
    ) -> U256 {
        if (xToY) {
            return getNextSqrtPriceYDown(startingSqrtPrice, liquidity, amount, false)
        } else {
            return getNextSqrtPriceXUp(startingSqrtPrice, liquidity, amount, false)
        }
    }

    pub fn getNextSqrtPriceXUp(
        startingSqrtPrice: U256,
        liquidity: U256,
        x: U256,
        addX: Bool
    ) -> U256 {
        if (x == 0) {
            return startingSqrtPrice
        }

        let deltaSqrtPrice = rescale(liquidity, LiquidityScale, SqrtPriceScale)

        let mut denominator = 0
        if (addX) {
            denominator = deltaSqrtPrice + mul(startingSqrtPrice, x, TokenAmountScale) 
        } else {
            denominator = deltaSqrtPrice - mul(startingSqrtPrice, x, TokenAmountScale)
        }

        return divToTokenUp(
            mulUp(startingSqrtPrice, liquidity, LiquidityScale),
            rescale(denominator, SqrtPriceScale, TokenAmountScale)
        )
    }

    pub fn getNextSqrtPriceYDown(
        startingSqrtPrice: U256,
        liquidity: U256,
        y: U256,
        addY: Bool
    ) -> U256 {
        let numerator = rescale(y, TokenAmountScale, SqrtPriceScale)
        let denominator = rescale(liquidity, LiquidityScale, SqrtPriceScale)

        if (addY) {
            return startingSqrtPrice + div(numerator, denominator)
        } else {
            return startingSqrtPrice - divUp(numerator, denominator)
        }

    }

    pub fn calculateAmountDelta(
        currentTickIndex: I256,
        currentSqrtPrice: U256,
        liquidityDelta: U256,
        liquiditySign: Bool,
        upperTick: I256,
        lowerTick: I256
    ) -> (U256, U256, Bool) {
        assert!(upperTick > lowerTick, CLAMMError.InvalidTickIndex)

        let mut amountX = 0u
        let mut amountY = 0u
        let mut updateLiquidity = false

        if (currentTickIndex < lowerTick) {
            amountX = getDeltaX(
                sqrtPriceFromTick(lowerTick),
                sqrtPriceFromTick(upperTick),
                liquidityDelta,
                liquiditySign
            )
        } else if (currentTickIndex < upperTick) {
            amountX = getDeltaX(
                currentSqrtPrice,
                sqrtPriceFromTick(upperTick),
                liquidityDelta,
                liquiditySign
            )
            amountY = getDeltaY(
                sqrtPriceFromTick(lowerTick),
                currentSqrtPrice,
                liquidityDelta,
                liquiditySign
            )
            updateLiquidity = true
        } else {
            amountY = getDeltaY(
                sqrtPriceFromTick(lowerTick),
                sqrtPriceFromTick(upperTick),
                liquidityDelta,
                liquiditySign
            )
        }

        return amountX, amountY, updateLiquidity
    }

    pub fn isEnoughToChangePrice(
        amount: U256,
        startingSqrtPrice: U256,
        liquidity: U256,
        fee: U256,
        byAmountIn: Bool,
        xToY: Bool
    ) -> Bool {
        if (liquidity == 0) {
            return true
        }

        let mut nextSqrtPrice = 0
        if (byAmountIn == true) {
            let amountAfterFee = mul(amount, (one(PercentageScale) - fee), PercentageScale)
            nextSqrtPrice = getNextSqrtPriceFromInput(startingSqrtPrice, liquidity, amountAfterFee, xToY)
        } else {
            nextSqrtPrice = getNextSqrtPriceFromOutput(startingSqrtPrice, liquidity, amount, xToY)
        }

        return startingSqrtPrice != nextSqrtPrice
    }

    pub fn calculateMaxLiquidityPerTick(
        tickSpacing: U256
    ) -> U256 {
        let maxTicksAmountSqrtPriceLimited = 2 * toU256!(getGlobalMaxTick()) + 1
        let ticsAmountSpacingLimited = maxTicksAmountSqrtPriceLimited / tickSpacing
        let maxLiquidity = u256Max!() / ticsAmountSpacingLimited
        return maxLiquidity
    }

    pub fn checkTicks(tickLower: I256, tickUpper: I256, tickSpacing: U256) -> () {
        assert!(tickLower < tickUpper, CLAMMError.InvalidTickIndex)
        checkTick(tickLower, tickSpacing)
        checkTick(tickUpper, tickSpacing)
    }

    pub fn checkTick(tickIndex: I256, tickSpacing: U256) -> () {
        let minTick = getMinTick(tickSpacing)
        let maxTick = getMaxTick(tickSpacing)
        assert!(tickIndex % toI256!(tickSpacing) == 0i, CLAMMError.InvalidTickSpacing)
        assert!(tickIndex < maxTick, CLAMMError.InvalidTickIndex)
        assert!(tickIndex > minTick, CLAMMError.InvalidTickIndex)
    }
    
    pub fn calculateMinAmountOut(
        expectedAmountOut: U256,
        slippage: U256
    ) -> U256 {
        return mulUp(expectedAmountOut, (one(PercentageScale) - slippage), PercentageScale)
    }

    pub fn checkTickToSqrtPriceRelationship(tickIndex: I256, tickSpacing: U256, sqrtPrice: U256) -> Bool {
        if (tickIndex + toI256!(tickSpacing) > getGlobalMaxTick()) {
            let maxTick = getMaxTick(tickSpacing)
            let maxSqrtPrice = sqrtPriceFromTick(maxTick)
            
            if (sqrtPrice != maxSqrtPrice) {
                return false
            }
        } else {
            let lowerBound = sqrtPriceFromTick(tickIndex)
            let upperBound = sqrtPriceFromTick(tickIndex + toI256!(tickSpacing))

            if (sqrtPrice >= upperBound || sqrtPrice < lowerBound) {
                return false
            }
        }

        return true
    }
}