Contract CLAMM() extends Uints(), Log(){ 
    enum CLAMMError {
        InvalidTickIndex = 800
        InvalidTickSpacing = 801
    }

    pub fn computeSwapStep(
        currentSqrtPrice: SqrtPrice,
        targetSqrtPrice: SqrtPrice,
        liquidity: Liquidity,
        amount: TokenAmount,
        byAmountIn: Bool,
        fee: Percentage
    ) -> SwapResult {
        if (liquidity.v == 0) {
            return SwapResult { 
                nextSqrtPrice: targetSqrtPrice,
                amountIn: TokenAmount{v: 0},
                amountOut: TokenAmount{v: 0},
                feeAmount: TokenAmount{v: 0}
            }
        }

        let xToY = currentSqrtPrice.v >= targetSqrtPrice.v

        let mut nextSqrtPrice = SqrtPrice{v: 0}
        let mut amountIn = TokenAmount{v: 0}
        let mut amountOut = TokenAmount{v: 0}

        if (byAmountIn) {
            let amountAfterFee = TokenAmount{v: toU256(bigMulDiv256(amount.v, (one(PercentageScale) - fee.v), one(PercentageScale)))}

            if (xToY) {
                amountIn = getDeltaX(targetSqrtPrice, currentSqrtPrice, liquidity, true)
            } else {
                amountIn = getDeltaY(currentSqrtPrice, targetSqrtPrice, liquidity, true)
            }

            if (amountAfterFee.v >= amountIn.v) {
                nextSqrtPrice = targetSqrtPrice
            } else {
                nextSqrtPrice = getNextSqrtPriceFromInput(currentSqrtPrice, liquidity, amountAfterFee, xToY)
            }
        } else {
            if (xToY) {
                amountOut = getDeltaY(targetSqrtPrice, currentSqrtPrice, liquidity, false)
            } else {
                amountOut = getDeltaX(currentSqrtPrice, targetSqrtPrice, liquidity, false)
            }

            if (amount.v >= amountOut.v) {
                nextSqrtPrice = targetSqrtPrice
            } else {
                nextSqrtPrice = getNextSqrtPriceFromOutput(currentSqrtPrice, liquidity, amount, xToY)
            }
        }

        let notMax = targetSqrtPrice.v != nextSqrtPrice.v

        if (xToY) {
            if (notMax || !byAmountIn) {
                amountIn = getDeltaX(nextSqrtPrice, currentSqrtPrice, liquidity, true)
            }
            if (notMax || byAmountIn) {
                amountOut = getDeltaY(nextSqrtPrice, currentSqrtPrice, liquidity, false)
            }
        } else {
            if (notMax|| !byAmountIn) {
                amountIn = getDeltaY(currentSqrtPrice, nextSqrtPrice, liquidity, true)
            }
            if (notMax || byAmountIn) {
                amountOut = getDeltaX(currentSqrtPrice, nextSqrtPrice, liquidity, false)
            }
        }

        // trim dust in case of specifying exact amount out
        if (!byAmountIn && amountOut.v > amount.v) {
            amountOut = amount
        }

        let mut feeAmount = TokenAmount{v: 0}
        if (byAmountIn && nextSqrtPrice.v != targetSqrtPrice.v) {
            feeAmount.v = amount.v - amountIn.v
        } else {
            feeAmount = TokenAmount{v: toU256(bigMulDivUp256(amountIn.v, fee.v, one(PercentageScale)))}
        }

        return SwapResult { 
            nextSqrtPrice: nextSqrtPrice,
            amountIn: amountIn,
            amountOut: amountOut,
            feeAmount: feeAmount
        }
    }

    pub fn getDeltaX(
        sqrtPriceA: SqrtPrice,
        sqrtPriceB: SqrtPrice,
        liquidity: Liquidity,
        roundingUp: Bool
    ) -> TokenAmount {
        let mut deltaSqrtPrice = 0u
        if (sqrtPriceA.v > sqrtPriceB.v) {
            deltaSqrtPrice = sqrtPriceA.v - sqrtPriceB.v
        } else {
            deltaSqrtPrice = sqrtPriceB.v - sqrtPriceA.v
        }

        let nominator = bigMulDiv256(deltaSqrtPrice, liquidity.v, one(LiquidityScale))

        if (roundingUp) {
            let denominator = mul(sqrtPriceA.v, sqrtPriceB.v, one(SqrtPriceScale))
            return bigDivToTokenUp(nominator, denominator, one(SqrtPriceScale))
        } else {
            let denominatorUp = mulUp(sqrtPriceA.v, sqrtPriceB.v, one(SqrtPriceScale))
            return bigDivToToken(nominator, denominatorUp, one(SqrtPriceScale))
        }
    }

    pub fn getDeltaY(
        sqrtPriceA: SqrtPrice,
        sqrtPriceB: SqrtPrice,
        liquidity: Liquidity,
        roundingUp: Bool
    ) -> TokenAmount {
        let mut deltaSqrtPrice = 0u
        if (sqrtPriceA.v > sqrtPriceB.v) {
            deltaSqrtPrice = sqrtPriceA.v - sqrtPriceB.v
        } else {
            deltaSqrtPrice = sqrtPriceB.v - sqrtPriceA.v
        }

        let mut result = U512 { higher: 0, lower: 0 }

        if (roundingUp) {
            result = bigMulDiv256(deltaSqrtPrice, liquidity.v, one(LiquidityScale))
            result = bigAdd(result, almostOne(SqrtPriceScale))
            result = bigDiv(result, one(SqrtPriceScale), 1)

            return TokenAmount{v: toU256(result)}
        } else {
            result = bigMulDiv256(deltaSqrtPrice, liquidity.v, one(LiquidityScale))
            result = bigDiv(result, one(SqrtPriceScale), 1)

            return TokenAmount{v: toU256(result)}
        }
    }

    pub fn getNextSqrtPriceFromInput(
        startingSqrtPrice: SqrtPrice,
        liquidity: Liquidity,
        amount: TokenAmount,
        xToY: Bool
    ) -> SqrtPrice {
        if (xToY) {
            return getNextSqrtPriceXUp(startingSqrtPrice, liquidity, amount, true)
        } else {
            return getNextSqrtPriceYDown(startingSqrtPrice, liquidity, amount, true)
        } 
    }

    pub fn getNextSqrtPriceFromOutput(
        startingSqrtPrice: SqrtPrice,
        liquidity: Liquidity,
        amount: TokenAmount,
        xToY: Bool
    ) -> SqrtPrice {
        if (xToY) {
            return getNextSqrtPriceYDown(startingSqrtPrice, liquidity, amount, false)
        } else {
            return getNextSqrtPriceXUp(startingSqrtPrice, liquidity, amount, false)
        }
    }

    pub fn getNextSqrtPriceXUp(
        startingSqrtPrice: SqrtPrice,
        liquidity: Liquidity,
        x: TokenAmount,
        addX: Bool
    ) -> SqrtPrice {
        if (x.v == 0) {
            return startingSqrtPrice
        }

        let deltaSqrtPrice = bigRescale(liquidity.v, LiquidityScale, SqrtPriceScale)

        let mut denominator = U512 { higher: 0, lower: 0 }
        if (addX) {
            denominator = bigAdd512(deltaSqrtPrice, bigMulDiv256(startingSqrtPrice.v, x.v, one(TokenAmountScale)))
        } else {
            denominator = bigSub512(deltaSqrtPrice, bigMulDiv256(startingSqrtPrice.v, x.v, one(TokenAmountScale)))
        }

        let nominator = bigMulDivUp256(startingSqrtPrice.v, liquidity.v, one(LiquidityScale))

        let mut result = bigMul(nominator, one(SqrtPriceScale))
        result = bigAdd512(result, bigSub512(denominator, toU512(1)))
        result = bigDiv512(result, denominator, 1)

        return SqrtPrice{v: toU256(result)}
    }

    pub fn getNextSqrtPriceYDown(
        startingSqrtPrice: SqrtPrice,
        liquidity: Liquidity,
        y: TokenAmount,
        addY: Bool
    ) -> SqrtPrice {
        let numerator = bigRescale(y.v, TokenAmountScale, SqrtPriceScale)
        let denominator = bigRescale(liquidity.v, LiquidityScale, SqrtPriceScale)
        
        if (addY) {
            return SqrtPrice{v: startingSqrtPrice.v + toU256(bigDiv512(numerator, denominator, one(SqrtPriceScale)))}
        } else {
            return SqrtPrice{v: startingSqrtPrice.v - toU256(bigDivUp512(numerator, denominator, one(SqrtPriceScale)))}
        }
    }

    pub fn calculateAmountDelta(
        currentTickIndex: I256,
        currentSqrtPrice: SqrtPrice,
        liquidityDelta: Liquidity,
        liquiditySign: Bool,
        upperTick: I256,
        lowerTick: I256
    ) -> (TokenAmount, TokenAmount, Bool) {
        assert!(upperTick > lowerTick, CLAMMError.InvalidTickIndex)

        let mut amountX = TokenAmount{v: 0}
        let mut amountY = TokenAmount{v: 0}
        let mut updateLiquidity = false

        if (currentTickIndex < lowerTick) {
            amountX = getDeltaX(
                sqrtPriceFromTick(lowerTick),
                sqrtPriceFromTick(upperTick),
                liquidityDelta,
                liquiditySign
            )
        } else if (currentTickIndex < upperTick) {
            amountX = getDeltaX(
                currentSqrtPrice,
                sqrtPriceFromTick(upperTick),
                liquidityDelta,
                liquiditySign
            )
            amountY = getDeltaY(
                sqrtPriceFromTick(lowerTick),
                currentSqrtPrice,
                liquidityDelta,
                liquiditySign
            )
            updateLiquidity = true
        } else {
            amountY = getDeltaY(
                sqrtPriceFromTick(lowerTick),
                sqrtPriceFromTick(upperTick),
                liquidityDelta,
                liquiditySign
            )
        }

        return amountX, amountY, updateLiquidity
    }

    pub fn isEnoughAmountToChangePrice(
        amount: TokenAmount,
        startingSqrtPrice: SqrtPrice,
        liquidity: Liquidity,
        fee: Percentage,
        byAmountIn: Bool,
        xToY: Bool
    ) -> Bool {
        if (liquidity.v == 0) {
            return true
        }

        let mut nextSqrtPrice = SqrtPrice{v: 0}
        if (byAmountIn) {
            let amountAfterFee = TokenAmount{v: toU256(bigMulDiv256(amount.v, (one(PercentageScale) - fee.v), one(PercentageScale)))}
            nextSqrtPrice = getNextSqrtPriceFromInput(startingSqrtPrice, liquidity, amountAfterFee, xToY)
        } else {
            nextSqrtPrice = getNextSqrtPriceFromOutput(startingSqrtPrice, liquidity, amount, xToY)
        }

        return startingSqrtPrice.v != nextSqrtPrice.v
    }

    pub fn calculateMaxLiquidityPerTick(
        tickSpacing: U256
    ) -> Liquidity {
        let maxTicksAmountSqrtPriceLimited = 2 * toU256!(getGlobalMaxTick()) + 1
        let ticksAmountSpacingLimited = maxTicksAmountSqrtPriceLimited / tickSpacing
        let maxLiquidity = Liquidity{v: u256Max!() / ticksAmountSpacingLimited}
        return maxLiquidity
    }

    pub fn checkTicks(tickLower: I256, tickUpper: I256, tickSpacing: U256) -> () {
        assert!(tickLower < tickUpper, CLAMMError.InvalidTickIndex)
        checkTick(tickLower, tickSpacing)
        checkTick(tickUpper, tickSpacing)
    }

    pub fn checkTick(tickIndex: I256, tickSpacing: U256) -> () {
        let minTick = getMinTick(tickSpacing)
        let maxTick = getMaxTick(tickSpacing)
        assert!(tickIndex % toI256!(tickSpacing) == 0i, CLAMMError.InvalidTickSpacing)
        assert!(tickIndex <= maxTick, CLAMMError.InvalidTickIndex)
        assert!(tickIndex >= minTick, CLAMMError.InvalidTickIndex)
    }
    
    pub fn calculateMinAmountOut(
        expectedAmountOut: TokenAmount,
        slippage: Percentage
    ) -> TokenAmount {
        return TokenAmount{v: toU256(bigMulDivUp256(expectedAmountOut.v, (one(PercentageScale) - slippage.v), one(PercentageScale)))}
    }

    pub fn checkTickToSqrtPriceRelationship(tickIndex: I256, tickSpacing: U256, sqrtPrice: SqrtPrice) -> Bool {
        if (tickIndex + toI256!(tickSpacing) > getGlobalMaxTick()) {
            let maxTick = getMaxTick(tickSpacing)
            let maxSqrtPrice = sqrtPriceFromTick(maxTick)
            
            if (sqrtPrice.v != maxSqrtPrice.v) {
                return false
            }
        } else {
            let lowerBound = sqrtPriceFromTick(tickIndex)
            let upperBound = sqrtPriceFromTick(tickIndex + toI256!(tickSpacing))

            if (sqrtPrice.v >= upperBound.v || sqrtPrice.v < lowerBound.v) {
                return false
            }
        }

        return true
    }

    pub fn toFee(feeGrowth: FeeGrowth, liquidity: Liquidity) -> TokenAmount {
        return TokenAmount{v: toU256(bigMulDiv256(feeGrowth.v, liquidity.v, one(FeeGrowthScale + LiquidityScale)))}
    }

    pub fn feeGrowthFromFee(liquidity: Liquidity, fee: TokenAmount) -> FeeGrowth {
        return FeeGrowth{v: toU256(bigMulDiv256(fee.v, one(LiquidityScale + FeeGrowthScale), liquidity.v))}
    }

}