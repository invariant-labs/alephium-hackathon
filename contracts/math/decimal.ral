Abstract Contract Decimal() {
    const SqrtPriceScale = 24
    const LiquidityScale = 5
    const FeeGrowthScale = 28
    const FixedPointScale = 12
    const PercentageScale = 12
    const TokenAmountScale = 0
    const GlobalMaxTick = 221818i
    const GlobalMinTick = -221818i
    const MaxSqrtPrice = 65535383934512647000000000000
    const MinSqrtPrice = 15258932000000000000

    pub fn getSqrtPriceScale() -> U256 {
        return SqrtPriceScale
    }

    pub fn getLiquidityScale() -> U256 {
        return LiquidityScale
    }

    pub fn getFeeGrowthScale() -> U256 {
        return FeeGrowthScale
    }

    pub fn getFixedPointScale() -> U256 {
        return FixedPointScale
    }

    pub fn getPercentageScale() -> U256 {
        return PercentageScale
    }

    pub fn getTokenAmountScale() -> U256 {
        return TokenAmountScale
    }

    pub fn getGlobalMaxTick() -> I256 {
        return GlobalMaxTick
    }

    pub fn getGlobalMinTick() -> I256 {
        return GlobalMinTick
    }

    pub fn getMaxSqrtPrice() -> U256 {
        return MaxSqrtPrice
    }

    pub fn getMinSqrtPrice() -> U256 {
        return MinSqrtPrice
    }

    pub fn getMaxTick(tickSpacing: U256) -> I256 {
        let convertedTickSpacing = toI256!(tickSpacing)
        return GlobalMaxTick / convertedTickSpacing * convertedTickSpacing
    }

    pub fn getMinTick(tickSpacing: U256) -> I256 {
        let convertedTickSpacing = toI256!(tickSpacing)
        return GlobalMinTick / convertedTickSpacing * convertedTickSpacing
    }

    pub fn mul(l: U256, r:U256, rScale: U256) -> U256 {
        return (l * r) / one(rScale)
    }

    pub fn mulUp(l: U256, r: U256, rScale: U256) -> U256 {
        return (l * r + almostOne(rScale)) / one(rScale)
    }
    
    pub fn divToTokenUp(l: U256, r: U256) -> U256 {
        return (((l * one(SqrtPriceScale) + (r - 1)) / r) + almostOne(SqrtPriceScale)) / one(SqrtPriceScale)
    }   

    pub fn divToToken(l: U256, r: U256) -> U256 {
        return ((l * one(SqrtPriceScale)) / r) / one(SqrtPriceScale)
    }   

    pub fn divUp(l: U256, r: U256) -> U256 {
        return l * one(SqrtPriceScale) + (r - 1) / r
    }   

    pub fn div(l: U256, r: U256) -> U256 {
        return l * one(SqrtPriceScale) / r
    }   

    pub fn almostOne(scale: U256) -> U256 {
        return 10 ** scale - 1
    }

    pub fn one(scale: U256) -> U256 {
        return 10 ** scale
    }

    pub fn sqrtPriceFromTick(
        tickIndex: I256
    ) -> U256 {
        let sqrtPrice = calculateSqrtPrice(tickIndex)
        return sqrtPrice
    }

    pub fn calculateSqrtPrice(
        tickIndex: I256
    ) -> U256 {
        let mut tickIndexAbs = 0
        if (tickIndex < 0i) {
            tickIndexAbs = toU256!((-1) * tickIndex)
        } else {
            tickIndexAbs = toU256!(tickIndex)
        }

        let mut sqrtPrice = one(FixedPointScale)  

        if (tickIndexAbs & 0x1 != 0) {
            sqrtPrice = (sqrtPrice * 1000049998750) / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x2 != 0) {
            sqrtPrice = (sqrtPrice * 1000100000000) / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x4 != 0) {
            sqrtPrice = (sqrtPrice * 1000200010000) / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x8 != 0) {
            sqrtPrice = (sqrtPrice * 1000400060004) / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x10 != 0) {
            sqrtPrice = (sqrtPrice * 1000800280056)  / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x20 != 0) {
            sqrtPrice = (sqrtPrice * 1001601200560) / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x40 != 0) {
            sqrtPrice = (sqrtPrice * 1003204964963) / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x80 != 0) {
            sqrtPrice = (sqrtPrice * 1006420201726) / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x100 != 0) {
            sqrtPrice = (sqrtPrice * 1012881622442) / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x200 != 0) {
            sqrtPrice = (sqrtPrice * 1025929181080) / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x400 != 0) {
            sqrtPrice = (sqrtPrice * 1052530684591) / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x800 != 0) {
            sqrtPrice = (sqrtPrice * 1107820842005) / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x1000 != 0) {
            sqrtPrice = (sqrtPrice * 1227267017980) / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x2000 != 0) {
            sqrtPrice = (sqrtPrice * 1506184333421) / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x4000 != 0) {
            sqrtPrice = (sqrtPrice * 2268591246242) / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x8000 != 0) {
            sqrtPrice = (sqrtPrice * 5146506242525) / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x00010000 != 0) {
            sqrtPrice = (sqrtPrice * 26486526504348) / (10 ** FixedPointScale)
        }
        if (tickIndexAbs & 0x00020000 != 0) {
            sqrtPrice = (sqrtPrice * 701536086265529) / (10 ** FixedPointScale)
        }

        if (tickIndex >= 0i) {
            return rescale(sqrtPrice, FixedPointScale, SqrtPriceScale)
        } else {
            let intermediate = one(SqrtPriceScale) / sqrtPrice 
            return rescale(intermediate, FixedPointScale, SqrtPriceScale)
        }
    }

    pub fn rescale(fromValue: U256, fromScale: U256, expectedScale: U256) -> U256 {
        if (expectedScale > fromScale) {
            let multiplierScale = expectedScale - fromScale
            return fromValue * (10 ** multiplierScale)
        } else {
            let denominatorScale = fromScale - expectedScale
            return fromValue / (10 ** denominatorScale)
        }
    }



    pub fn wrappingAdd(a: U256, b: U256) -> U256 {
        let u256Max = u256Max!()
        if (b > u256Max - a) {
            return (b - (u256Max - a)) - 1
        } else {
            return a + b
        }
    }

    pub fn wrappingSub(a: U256, b: U256) -> U256 {
        let u256Max = u256Max!()
        if (b > a) {
            return u256Max - (b - a) + 1
        } else {
            return a - b
        }
    }

    pub fn calculateFeeGrowthInside(
        tickLowerIndex: I256,
        tickLowerFeeGrowthOutsideX: U256,
        tickLowerFeeGrowthOutsideY: U256,
        tickUpperIndex: I256,
        tickUpperFeeGrowthOutsideX: U256,
        tickUpperFeeGrowthOutsideY: U256,
        tickCurrent: I256,
        globalFeeGrowthX: U256,
        globalFeeGrowthY: U256
    ) -> (U256,U256) {
        let currentAboveLower = tickCurrent >= tickLowerIndex
        let currentBelowUpper = tickCurrent < tickUpperIndex

        let mut feeGrowthBelowX = 0
        let mut feeGrowthBelowY = 0
        let mut feeGrowthAboveX = 0
        let mut feeGrowthAboveY = 0

        if (currentAboveLower) {
            feeGrowthBelowX = tickLowerFeeGrowthOutsideX
            feeGrowthBelowY = tickLowerFeeGrowthOutsideY
        } else {
            feeGrowthBelowX = wrappingSub(globalFeeGrowthX, tickLowerFeeGrowthOutsideX)
            feeGrowthBelowY = wrappingSub(globalFeeGrowthY, tickLowerFeeGrowthOutsideY)
        }

        if (currentBelowUpper) {
            feeGrowthAboveX = tickUpperFeeGrowthOutsideX
            feeGrowthAboveY = tickUpperFeeGrowthOutsideY
        } else {
            feeGrowthAboveX = wrappingSub(globalFeeGrowthX, tickUpperFeeGrowthOutsideX)
            feeGrowthAboveY = wrappingSub(globalFeeGrowthY, tickUpperFeeGrowthOutsideY)
        }

        let feeGrowthInsideX = wrappingSub(wrappingSub(globalFeeGrowthX, feeGrowthBelowX), feeGrowthAboveX)
        let feeGrowthInsideY = wrappingSub(wrappingSub(globalFeeGrowthY, feeGrowthBelowY), feeGrowthAboveY)

        return feeGrowthInsideX, feeGrowthInsideY
    }
}
