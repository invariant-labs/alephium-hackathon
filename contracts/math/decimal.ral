struct SqrtPrice{
    mut v: U256
}

struct Liquidity{
    mut v: U256
}

struct FeeGrowth{
    mut v: U256
}

// struct Percentage{
//     mut v: U256
// }

// struct TokenAmount{
//     mut v: U256
// }

// struct FixedPoint{
//     mut v: U256
// }

Abstract Contract Decimal() {
    const SqrtPriceScale = 24
    const LiquidityScale = 5
    const FeeGrowthScale = 28
    const FixedPointScale = 12
    const PercentageScale = 12
    const TokenAmountScale = 0
    const FixedPointDenominator = 1000000000000
    const GlobalMaxTick = 221818i
    const GlobalMinTick = -221818i
    const MaxSqrtPrice = 65535383934512647000000000000
    const MinSqrtPrice = 15258932000000000000


    enum DecimalError {
        TickOverBounds = 0
    }

    pub fn getSqrtPriceScale() -> U256 {
        return SqrtPriceScale
    }

    pub fn getLiquidityScale() -> U256 {
        return LiquidityScale
    }

    pub fn getFeeGrowthScale() -> U256 {
        return FeeGrowthScale
    }

    pub fn getFixedPointScale() -> U256 {
        return FixedPointScale
    }

    pub fn getPercentageScale() -> U256 {
        return PercentageScale
    }

    pub fn getTokenAmountScale() -> U256 {
        return TokenAmountScale
    }

    pub fn getGlobalMaxTick() -> I256 {
        return GlobalMaxTick
    }

    pub fn getGlobalMinTick() -> I256 {
        return GlobalMinTick
    }

    pub fn getMaxSqrtPrice(tickSpacing: U256) -> SqrtPrice {
        let maxTick = getMaxTick(tickSpacing)
        return calculateSqrtPrice(maxTick)
    }

    pub fn getMinSqrtPrice(tickSpacing: U256) -> SqrtPrice {
        let minTick = getMinTick(tickSpacing)
        return calculateSqrtPrice(minTick)
    }

    pub fn getMaxTick(tickSpacing: U256) -> I256 {
        let convertedTickSpacing = toI256!(tickSpacing)
        return GlobalMaxTick / convertedTickSpacing * convertedTickSpacing
    }

    pub fn getMinTick(tickSpacing: U256) -> I256 {
        let convertedTickSpacing = toI256!(tickSpacing)
        return GlobalMinTick / convertedTickSpacing * convertedTickSpacing
    }

    pub fn mul(l: U256, r:U256, rScale: U256) -> U256 {
        return (l * r) / rScale
    }

    pub fn mulUp(l: U256, r: U256, rScale: U256) -> U256 {
        return (l * r + rScale - 1) / rScale
    }
    
    pub fn divToTokenUp(l: U256, r: U256) -> U256 {
        return (((l * one(SqrtPriceScale) + (r - 1)) / r) + almostOne(SqrtPriceScale)) / one(SqrtPriceScale)
    }   

    pub fn divToToken(l: U256, r: U256) -> U256 {
        return ((l * one(SqrtPriceScale)) / r) / one(SqrtPriceScale)
    }   

    pub fn divUp(l: U256, r: U256) -> U256 {
        return l * one(SqrtPriceScale) + (r - 1) / r
    }   

    pub fn div(l: U256, r: U256) -> U256 {
        return l * one(SqrtPriceScale) / r
    }   

    pub fn almostOne(scale: U256) -> U256 {
        return 10 ** scale - 1
    }

    pub fn one(scale: U256) -> U256 {
        return 10 ** scale
    }

    pub fn sqrtPriceFromTick(
        tickIndex: I256
    ) -> SqrtPrice {
        let sqrtPrice = calculateSqrtPrice(tickIndex)
        return sqrtPrice
    }

    pub fn calculateSqrtPrice(
        tickIndex: I256
    ) -> SqrtPrice {
        let mut tickIndexAbs = 0
        if (tickIndex < 0i) {
            tickIndexAbs = toU256!((-1) * tickIndex)
        } else {
            tickIndexAbs = toU256!(tickIndex)
        }

        let mut sqrtPriceRaw = one(FixedPointScale)  

        assert!(tickIndexAbs <= toU256!(GlobalMaxTick), DecimalError.TickOverBounds)

        if (tickIndexAbs & 0x1 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 1000049998750) / FixedPointDenominator
        }
        if (tickIndexAbs & 0x2 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 1000100000000) / FixedPointDenominator
        }
        if (tickIndexAbs & 0x4 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 1000200010000) / FixedPointDenominator
        }
        if (tickIndexAbs & 0x8 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 1000400060004) / FixedPointDenominator
        }
        if (tickIndexAbs & 0x10 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 1000800280056)  / FixedPointDenominator
        }
        if (tickIndexAbs & 0x20 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 1001601200560) / FixedPointDenominator
        }
        if (tickIndexAbs & 0x40 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 1003204964963) / FixedPointDenominator
        }
        if (tickIndexAbs & 0x80 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 1006420201726) / FixedPointDenominator
        }
        if (tickIndexAbs & 0x100 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 1012881622442) / FixedPointDenominator
        }
        if (tickIndexAbs & 0x200 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 1025929181080) / FixedPointDenominator
        }
        if (tickIndexAbs & 0x400 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 1052530684591) / FixedPointDenominator
        }
        if (tickIndexAbs & 0x800 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 1107820842005) / FixedPointDenominator
        }
        if (tickIndexAbs & 0x1000 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 1227267017980) / FixedPointDenominator
        }
        if (tickIndexAbs & 0x2000 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 1506184333421) / FixedPointDenominator
        }
        if (tickIndexAbs & 0x4000 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 2268591246242) / FixedPointDenominator
        }
        if (tickIndexAbs & 0x8000 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 5146506242525) / FixedPointDenominator
        }
        if (tickIndexAbs & 0x00010000 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 26486526504348) / FixedPointDenominator
        }
        if (tickIndexAbs & 0x00020000 != 0) {
            sqrtPriceRaw = (sqrtPriceRaw * 701536086265529) / FixedPointDenominator
        }

        if (tickIndex >= 0i) {
            return SqrtPrice{ v: rescale(sqrtPriceRaw, FixedPointScale, SqrtPriceScale)}
        } else {
            let sqrtPriceInFixedPointScale = FixedPointDenominator * FixedPointDenominator / sqrtPriceRaw
            return SqrtPrice{ v: rescale(sqrtPriceInFixedPointScale, FixedPointScale, SqrtPriceScale)}
        }
    }

    pub fn rescale(fromValue: U256, fromScale: U256, expectedScale: U256) -> U256 {
        if (expectedScale > fromScale) {
            let multiplierScale = expectedScale - fromScale
            return fromValue * (10 ** multiplierScale)
        } else {
            let denominatorScale = fromScale - expectedScale
            return fromValue / (10 ** denominatorScale)
        }
    }

    pub fn wrappingAdd(a: U256, b: U256) -> U256 {
        let u256Max = u256Max!()
        if (b > u256Max - a) {
            return (b - (u256Max - a)) - 1
        } else {
            return a + b
        }
    }

    pub fn wrappingSub(a: U256, b: U256) -> U256 {
        let u256Max = u256Max!()
        if (b > a) {
            return u256Max - (b - a) + 1
        } else {
            return a - b
        }
    }    

    pub fn calculateFeeGrowthInside(
        tickLowerIndex: I256,
        tickLowerFeeGrowthOutsideX: FeeGrowth,
        tickLowerFeeGrowthOutsideY: FeeGrowth,
        tickUpperIndex: I256,
        tickUpperFeeGrowthOutsideX: FeeGrowth,
        tickUpperFeeGrowthOutsideY: FeeGrowth,
        tickCurrent: I256,
        globalFeeGrowthX: FeeGrowth,
        globalFeeGrowthY: FeeGrowth
    ) -> (FeeGrowth,FeeGrowth) {
        let currentAboveLower = tickCurrent >= tickLowerIndex
        let currentBelowUpper = tickCurrent < tickUpperIndex

        let mut feeGrowthBelowXRaw = 0
        let mut feeGrowthBelowYRaw = 0
        
        let mut feeGrowthAboveXRaw = 0
        let mut feeGrowthAboveYRaw = 0

        if (currentAboveLower) {
            feeGrowthBelowXRaw = tickLowerFeeGrowthOutsideX.v
            feeGrowthBelowYRaw = tickLowerFeeGrowthOutsideY.v
        } else {
            feeGrowthBelowXRaw = wrappingSub(globalFeeGrowthX.v, tickLowerFeeGrowthOutsideX.v)
            feeGrowthBelowYRaw = wrappingSub(globalFeeGrowthY.v, tickLowerFeeGrowthOutsideY.v)
        }

        if (currentBelowUpper) {
            feeGrowthAboveXRaw = tickUpperFeeGrowthOutsideX.v
            feeGrowthAboveYRaw = tickUpperFeeGrowthOutsideY.v
        } else {
            feeGrowthAboveXRaw = wrappingSub(globalFeeGrowthX.v, tickUpperFeeGrowthOutsideX.v)
            feeGrowthAboveYRaw = wrappingSub(globalFeeGrowthY.v, tickUpperFeeGrowthOutsideY.v)
        }

        let feeGrowthInsideXRaw = wrappingSub(wrappingSub(globalFeeGrowthX.v, feeGrowthBelowXRaw), feeGrowthAboveXRaw)
        let feeGrowthInsideYRaw = wrappingSub(wrappingSub(globalFeeGrowthY.v, feeGrowthBelowYRaw), feeGrowthAboveYRaw)

        return FeeGrowth{v: feeGrowthInsideXRaw}, FeeGrowth{v: feeGrowthInsideYRaw}
    }
}
