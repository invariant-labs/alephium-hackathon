Abstract Contract Decimal() {
    fn getMaxTick(tickSpacing: U256) -> I256 {
        let convertedTickSpacing = toI256!(tickSpacing)
        return GLOBAL_MAX_TICK / convertedTickSpacing * convertedTickSpacing
    }

    fn getMinTick(tickSpacing: U256) -> I256 {
        let convertedTickSpacing = toI256!(tickSpacing)
        return GLOBAL_MIN_TICK / convertedTickSpacing * convertedTickSpacing
    }

    fn mul(l: U256, r:U256, rScale: U256) -> U256 {
        return (l * r) / rScale
    }

    fn mulUp(l: U256, r: U256, rScale: U256) -> U256 {
        return (l * r + rScale - 1) / rScale
    } 

    fn almostOne(scale: U256) -> U256 {
        return 10 ** scale - 1
    }

    fn one(scale: U256) -> U256 {
        return 10 ** scale
    }

    pub fn calculateSqrtPrice(
        tickIndex: I256
    ) -> SqrtPrice {
        let mut tickIndexAbs = 0
        if (tickIndex < 0i) {
            tickIndexAbs = toU256!((-1) * tickIndex)
        } else {
            tickIndexAbs = toU256!(tickIndex)
        }

        let mut sqrtPrice = FixedPoint{v: FIXED_POINT_DENOMINATOR}

        assert!(tickIndexAbs <= toU256!(GLOBAL_MAX_TICK), DecimalError.TickOverBounds)

        if (tickIndexAbs & 0x1 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 1000049998750) / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x2 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 1000100000000) / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x4 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 1000200010000) / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x8 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 1000400060004) / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x10 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 1000800280056)  / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x20 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 1001601200560) / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x40 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 1003204964963) / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x80 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 1006420201726) / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x100 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 1012881622442) / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x200 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 1025929181080) / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x400 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 1052530684591) / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x800 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 1107820842005) / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x1000 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 1227267017980) / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x2000 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 1506184333421) / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x4000 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 2268591246242) / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x8000 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 5146506242525) / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x00010000 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 26486526504348) / FIXED_POINT_DENOMINATOR
        }
        if (tickIndexAbs & 0x00020000 != 0) {
            sqrtPrice.v = (sqrtPrice.v * 701536086265529) / FIXED_POINT_DENOMINATOR
        }

        if (tickIndex >= 0i) {
            return SqrtPrice{ v: rescale(sqrtPrice.v, FIXED_POINT_SCALE, SQRT_PRICE_SCALE)}
        } else {
            let sqrtPriceInFixedPointScale = FIXED_POINT_DENOMINATOR * FIXED_POINT_DENOMINATOR / sqrtPrice.v
            return SqrtPrice{ v: rescale(sqrtPriceInFixedPointScale, FIXED_POINT_SCALE, SQRT_PRICE_SCALE)}
        }
    }

    fn rescale(fromValue: U256, fromScale: U256, expectedScale: U256) -> U256 {
        if (expectedScale > fromScale) {
            let multiplierScale = expectedScale - fromScale
            return fromValue * (10 ** multiplierScale)
        } else {
            let denominatorScale = fromScale - expectedScale
            return fromValue / (10 ** denominatorScale)
        }
    }

    pub fn wrappingAdd(a: U256, b: U256) -> U256 {
        if (b > MAX_U256 - a) {
            return (b - (MAX_U256 - a)) - 1
        } else {
            return a + b
        }
    }

    pub fn wrappingSub(a: U256, b: U256) -> U256 {
        if (b > a) {
            return MAX_U256 - (b - a) + 1
        } else {
            return a - b
        }
    }

    pub fn calculateFeeGrowthInside(
        tickLowerIndex: I256,
        tickLowerFeeGrowthOutsideX: FeeGrowth,
        tickLowerFeeGrowthOutsideY: FeeGrowth,
        tickUpperIndex: I256,
        tickUpperFeeGrowthOutsideX: FeeGrowth,
        tickUpperFeeGrowthOutsideY: FeeGrowth,
        tickCurrent: I256,
        globalFeeGrowthX: FeeGrowth,
        globalFeeGrowthY: FeeGrowth
    ) -> (FeeGrowth,FeeGrowth) {
        let currentAboveLower = tickCurrent >= tickLowerIndex
        let currentBelowUpper = tickCurrent < tickUpperIndex

        let mut feeGrowthBelowX = FeeGrowth{v: 0}
        let mut feeGrowthBelowY = FeeGrowth{v: 0}
        
        let mut feeGrowthAboveX = FeeGrowth{v: 0}
        let mut feeGrowthAboveY = FeeGrowth{v: 0}

        if (currentAboveLower) {
            feeGrowthBelowX = tickLowerFeeGrowthOutsideX
            feeGrowthBelowY = tickLowerFeeGrowthOutsideY
        } else {
            feeGrowthBelowX.v = wrappingSub(globalFeeGrowthX.v, tickLowerFeeGrowthOutsideX.v)
            feeGrowthBelowY.v = wrappingSub(globalFeeGrowthY.v, tickLowerFeeGrowthOutsideY.v)
        }

        if (currentBelowUpper) {
            feeGrowthAboveX = tickUpperFeeGrowthOutsideX
            feeGrowthAboveY = tickUpperFeeGrowthOutsideY
        } else {
            feeGrowthAboveX.v = wrappingSub(globalFeeGrowthX.v, tickUpperFeeGrowthOutsideX.v)
            feeGrowthAboveY.v = wrappingSub(globalFeeGrowthY.v, tickUpperFeeGrowthOutsideY.v)
        }

        let feeGrowthInsideX = FeeGrowth{v: wrappingSub(wrappingSub(globalFeeGrowthX.v, feeGrowthBelowX.v), feeGrowthAboveX.v)}
        let feeGrowthInsideY = FeeGrowth{v: wrappingSub(wrappingSub(globalFeeGrowthY.v, feeGrowthBelowY.v), feeGrowthAboveY.v)}

        return feeGrowthInsideX, feeGrowthInsideY
    }
}
