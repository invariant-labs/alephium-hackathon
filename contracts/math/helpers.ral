pub fn mul_to_value_up(l: U256, r: U256, l_scale: U256, r_scale: U256) -> U256 {
    return (l * r + almost_one(r_scale)) / r_scale
}

pub fn mul_to_value(l: U256, r: U256, l_scale: U256, r_scale: U256) -> U256 {
    return (l * r) / r_scale
}

// SqrtPrice related
pub fn div_values_to_token_up(l: U256, r: U256, l_scale: U256, r_scale: U256) -> U256 {
    return (((l * sqrt_price_scale + (r - 1)) / r) + almost_one(sqrt_price_scale)) / sqrt_price_scale
}

// SqrtPrice related
pub fn div_vales_to_token(l: U256, r: U256, l_scale: U256, r_scale: U256) -> U256 {
    return ((l * sqrt_price_scale) / r) / sqrt_price_scale
}

pub fn from_decimal_to_value(l: U256, r: U256, l_scale: U256, r_scale: U256) -> U256 {
    if (l_scale > r_scale) {
        let scale_diffrence = l_scale - r_scale;
        return l * (10 ** scale_diffrence)
    } else {
        let scale_diffrence = r_scale - l_scale;
        let denominator = 10 ** scale_diffrence;
        return l / denominator
    }
}

// SqrtPrice related
pub fn div_values_up(l: U256, r: U256, l_scale: U256, r_scale: U256) -> U256 {
    return l * sqrt_price_scale + (r - 1) / r
}

pub fn div_values(l: U256, r: U256, l_scale: U256, r_scale: U256) -> U256 {
    return l * sqrt_price_scale / r
}

pub fn mul_up(l: U256, r: U256, l_scale: U256, r_scale: U256) -> U256 {
    return (l * r + almost_one(r_scale)) / r_scale
}


fn almost_one(scale: U256) -> U256 {
    return scale - 1
}

