struct U512 {
    mut higher: U256,
    mut lower: U256
}

Abstract Contract Uints () {
    const WORD_SIZE = 256
    
    fn toU512(value: U256) -> U512 {
        return U512 {
            higher: 0,
            lower: value
        }
    }

    fn toU256(value: U512) -> U256 {
        assert!(value.higher == 0, ArithmeticError.CastOverflow)
        return value.lower
    }

    fn bigAdd256(a: U256, b: U256) -> U512 {
        let lower = a |+| b

        if (lower < b) {
            return U512 { higher: 1, lower }
        }

        return U512 { higher: 0, lower }
    }

    fn bigAdd(a: U512, b: U256) -> U512 {
        let lower = a.lower |+| b
        let mut higher = a.higher

        if (lower < b) {
            higher = higher + 1
        }

        return U512 { higher, lower }
    }

    fn bigAdd512(a: U512, b: U512) -> U512 {
        let lower = a.lower |+| b.lower
        let mut higher = a.higher + b.higher

        if (lower < b.lower) {
            higher = higher + 1
        }

        return U512 { higher, lower }
    }

    fn bigSub512(a: U512, b: U512) -> U512 {
        let lower = a.lower |-| b.lower
        let mut higher = a.higher - b.higher

        if (a.lower < b.lower) {
            higher = higher - 1
        }

        return U512 { higher, lower }
    }

    fn bigDivWrapper(a: U512, b: U256) -> U512 {
        assert!(b != 0, ArithmeticError.DivNotPositiveDivisor)

        if (b == 1) {
            return a
        }

        let mut mutA = a
        let mut result = U512 { higher: 0, lower: 0 }

        let q = (0 |-| b) / b + 1
        let r = (0 |-| b) % b

        while(mutA.higher != 0) {
            let mut mul = bigMul256(mutA.higher, q)
            result = bigAdd512(result, mul)
            mul = bigMul256(mutA.higher, r)
            mutA = bigAdd512(mul, U512 { higher: 0, lower: mutA.lower })
        }

        result = bigAdd512(result, U512 { higher: 0, lower: mutA.lower / b })

        return result
    }

    fn bigDiv(a: U512, b: U256, bDenominator: U256) -> U512 {
        assert!(bDenominator != 0, ArithmeticError.DivNotPositiveDenominator)
        let result = bigMul(a, bDenominator)
        return bigDivWrapper(result, b)
    }

    fn bigDivUp(a: U512, b: U256, bDenominator: U256) -> U512 {
        assert!(bDenominator != 0, ArithmeticError.DivNotPositiveDenominator)
        let mut result = bigMul(a, bDenominator)
        result = bigAdd(result, b - 1)
        return bigDivWrapper(result, b)
    }

    fn bigDiv512(dividend: U512, divisor: U512, divisorDenominator: U256) -> U512 {
        let mut q = U512 { higher: 0, lower: 0 }
        let mut r = U512 { higher: 0, lower: 0 }

        assert!(!isZero(divisor), ArithmeticError.DivNotPositiveDivisor)
        assert!(divisorDenominator != 0, ArithmeticError.DivNotPositiveDenominator)

        let extDividend = bigMul(dividend, divisorDenominator)

        // optimization for numbers < 2^256
        if (divisor.higher == 0) {
            return bigDivWrapper(extDividend, divisor.lower)
        }

        let mut uHigh = extDividend.higher
        let mut uLow = extDividend.lower
    
        let mut j = 256

        r.lower = uHigh
        uHigh = uLow
        while (j > 0) {
            j = j - 1

            r.higher = (r.higher << 1) | (r.lower >> (WORD_SIZE - 1))
            r.lower = (r.lower << 1) | ((uHigh >> 255) & 1)
            uHigh = (uHigh << 1) | ((uLow >> 255) & 1)
            uLow = uLow << 1
    
            // r >= v
            if (r.higher > divisor.higher || (r.higher == divisor.higher && r.lower >= divisor.lower)) {
                r = bigSub512(r, divisor)
                q.lower = q.lower | (1 << j)
            }
        }

        return q
    }

    fn bigDivUp512(dividend: U512, divisor: U512, divisorDenominator: U256) -> U512 {
        let mut result = bigMul(dividend, divisorDenominator)
        result = bigAdd512(result, divisor)
        result.lower = result.lower - 1
        return bigDiv512(result, divisor, 1)
    }

    fn bigMul256(a: U256, b: U256) -> U512 {
        let mulMod = mulModN!(a, b, MAX_U256)
        let lower = a |*| b
        let mut higher = mulMod |-| lower

        if (mulMod < lower) {
            higher = higher - 1
        }

        return U512 { higher, lower }
    }

    fn bigMul(a: U512, b: U256) -> U512 {        
        let result = bigMul256(a.lower, b)
        let higher = toU256(bigMul256(a.higher, b))

        return bigAdd512(result, U512 { higher, lower: 0 })
    }

    fn bigMulDiv256(a: U256, b: U256, bDenominator: U256) -> U512 {
        assert!(bDenominator != 0, ArithmeticError.MulNotPositiveDenominator)

        let mut result = bigMul256(a, b)
        result = bigDiv(result, bDenominator, 1)

        return result
    }

    fn bigMulDivUp256(a: U256, b: U256, bDenominator: U256) -> U512 {
        assert!(bDenominator != 0, ArithmeticError.MulNotPositiveDenominator)
        let mut result = bigMul256(a, b)

        result = bigAdd512(result, toU512(bDenominator - 1))
        result = bigDiv(result, bDenominator, 1)

        return result
    }

    fn bigDivToTokenUp(nominator: U512, denominator: U256) -> TokenAmount {
        let mut result = bigMul(nominator, SQRT_PRICE_DENOMINATOR)
        result = bigAdd(result, denominator - 1)
        result = bigDiv(result, denominator, 1)
        result = bigAdd(result, SQRT_PRICE_DENOMINATOR - 1)
        result = bigDiv(result, SQRT_PRICE_DENOMINATOR, 1)

        return TokenAmount{v: toU256(result)}
    }

    fn bigDivToToken(nominator: U512, denominator: U256) -> TokenAmount {
        let mut result = bigMul(nominator, SQRT_PRICE_DENOMINATOR)
        result = bigDiv(result, denominator, 1)
        result = bigDiv(result, SQRT_PRICE_DENOMINATOR, 1)

        return TokenAmount{v: toU256(result)}
    }
    
    fn bigRescale(fromValue: U256, fromScale: U256, expectedScale: U256) -> U512 {
        if (expectedScale > fromScale) {
            let multiplierScale = expectedScale - fromScale
            return bigMul256(fromValue, 10 ** multiplierScale)
        } else {
            let denominatorScale = fromScale - expectedScale
            // Most likely does not require an extension to U512
            return bigDiv(toU512(fromValue), 10 ** denominatorScale, 1)
        }
    }

    fn isZero(a: U512) -> Bool {
        return a.higher == 0 && a.lower == 0
    }
}

