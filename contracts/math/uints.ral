struct U512T{
    mut higher: U256,
    mut lower: U256
}

Abstract Contract U512() {
        pub fn bigAdd(a: U256, b: U256) -> U512T {
            let u256Max = u256Max!()
            if (u256Max - a < b) {
                return U512T {
                    higher: 1,
                    lower: (b - (u256Max - a)) - 1
                }
            } else {
                return U512T {
                    higher: 0,
                    lower: a + b
                }
            }
        }

        pub fn bigDiv(a: U512T, divisor: U256, divisorScale: U256) -> U512T {
            assert!(divisor > 0, 0x02)
            if (divisor == 1) {
                return a
            }

            if (a.higher == 0) {
                return U512T {
                    higher: 0,
                    lower: a.lower / divisor
                }
            }

            let max = u256Max!()
            let scale = 10 ** divisorScale
            // Calculate new higher
            let h = (a.higher * scale) / divisor
            let hr = (a.higher * scale) % divisor
            // calculate higher remainder
            let maxdiv = max / divisor
            let deltahr = hr * maxdiv
            // Calculate lower
            let l = (a.lower * scale) / divisor
            let deltaL = deltahr + l

            return U512T {
                higher: h,
                lower: deltaL
            }
        }

        pub fn bigDivUp(a: U512T, divisor: U256, divisorScale: U256) -> U512T {
            assert!(divisor > 0, 0x02)
            if (divisor == 1) {
                return a
            }

            let max = u256Max!()
            let scale = 10 ** divisorScale
            // Calculate new higher
            let h = (a.higher * scale) / divisor
            let hr = (a.higher * scale) % divisor
            // calculate higher remainder
            let maxdiv = max / divisor
            let deltahr = hr * maxdiv
            let hdecimal = deltahr % divisor
            // Calculate lower
            let l = (a.lower * scale) / divisor
            let lr = (a.lower * scale ) % divisor
            let mut deltaL = deltahr + l

            if (hdecimal + lr != 0) {
                deltaL = deltaL + 1
            }

            return U512T {
                higher: h,
                lower: deltaL
            }
        }
}                           

