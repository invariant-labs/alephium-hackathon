struct U512 {
    mut higher: U256,
    mut lower: U256
}

struct ResultU256 {
    mut value: U256,
    mut error: U256
}

struct ResultU512 {
    mut value: U512,
    mut error: U256
}

Contract Uints () {
    const MaxU256 = 115792089237316195423570985008687907853269984665640564039457584007913129639935

    enum ArithmeticError {
        CastOverflow = 100001
        AddOverflow = 100002
        MulOverflow = 100003
        NotPositiveDivisor = 100005
    }

    pub fn unwrapU256(result: ResultU256) -> U256 {
        assert!(result.error == 0, result.error)
        return result.value
    }

    pub fn unwrapU512(result: ResultU512) -> U512 {
        assert!(result.error == 0, result.error)
        return result.value
    }
    
    pub fn toU512(value: U256) -> U512 {
        return U512 {
            higher: 0,
            lower: value
        }
    }

    pub fn toU256(value: U512) -> ResultU256 {
        if(value.higher > 0) {
            return ResultU256 { value: MaxU256, error: ArithmeticError.CastOverflow }
        }

        return ResultU256 { value: value.lower, error: 0 }
    }

    pub fn bigAdd256(a: U256, b: U256) -> U512 {
        let (lower, overflow) = overflowingAdd(a, b)
        
        if(overflow == 1) {
            return U512 { higher: 1, lower: lower }
        }

        return U512 { higher: 0, lower: lower }
    }

    pub fn bigAdd(a: U512, b: U256) -> ResultU512 {
        let (lower, lowerOverflow) = overflowingAdd(a.lower, b)
        let (higher, higherOverflow) = overflowingAdd(a.higher, lowerOverflow)

        if(higherOverflow == 1) {
            return ResultU512 { value: U512 { higher: MaxU256, lower: MaxU256 }, error: ArithmeticError.AddOverflow }
        }

        return ResultU512 { value:  U512 { higher: higher, lower: lower }, error: 0 }
    }

    pub fn bigAdd512(a: U512, b: U512) -> ResultU512 {
        let (lower, lowerOverflow) = overflowingAdd(a.lower, b.lower)
        let (higherIntermediate, higherIntermediateOverflow) = overflowingAdd(a.higher, b.higher)
        let (higher, higherOverflow) = overflowingAdd(higherIntermediate, lowerOverflow)

        if(higherIntermediateOverflow == 1 || higherOverflow == 1) {
            return ResultU512 { value: U512 { higher: MaxU256, lower: MaxU256 }, error: ArithmeticError.AddOverflow }
        }

        return ResultU512 { value: U512 { higher: higher, lower: lower }, error: 0 }
    }

    pub fn bigDivWrapper(a: U512, b: U256, bDenominator: U256, up: Bool) -> U512 {
        assert!(b > 0, ArithmeticError.NotPositiveDivisor)

        if (b == 1) {
            return a
        }

        // Calculate new higher
        let newHigher = a.higher * bDenominator
        let higher = newHigher / b
        let higherRemainder = newHigher % b
        // calculate higher remainder
        let maxDiv = MaxU256 / b
        let deltaHigherRemainder = higherRemainder * maxDiv
        // Calculate lower
        let newLower = a.lower * bDenominator
        let lower = newLower / b
        let mut deltaLower = deltaHigherRemainder + lower

        if (up) {
            let lowerRemainder = newLower % b

            let higherDecimal = deltaHigherRemainder % b
            if (higherDecimal + lowerRemainder != 0) {
                deltaLower = deltaLower + 1
            }
        }

        return U512 {
            higher: higher,
            lower: deltaLower
        }
    }

    pub fn bigDiv512(a: U512, b: U256, bDenominator: U256) -> U512 {
        return bigDivWrapper(a, b, bDenominator, false)
    }

    pub fn bigDivUp512(a: U512, b: U256, bDenominator: U256) -> U512 {
        return bigDivWrapper(a, b, bDenominator, true)
    }

    pub fn bigMul256(a: U256, b: U256) -> U512 {
        let aLower = low128(a)
        let aHigher = high128(a)
        let bLower = low128(b)
        let bHigher = high128(b)

        let aLowerBLower = aLower * bLower
        let aHigherBHigher = aHigher * bHigher
        let aHigherBLower = aHigher * bLower
        let aLowerBHigher = aLower * bHigher

        let lowerLower = low128(aLowerBLower)
        let lowerHigher = high128(aLowerBLower) + low128(aLowerBHigher) + low128(aHigherBLower)
        let higherLower = low128(aHigherBHigher) + high128(aLowerBHigher) + high128(aHigherBLower)
        let higherHigher = high128(aHigherBHigher)
        let lower = lowerLower + (lowerHigher << 128)
        let higher = high128(lowerHigher) + higherLower + (higherHigher << 128)

        return U512 { higher: higher, lower: lower }
    }

    pub fn bigMul(a: U512, b: U256) -> ResultU512 {        
        let result = bigMul256(a.lower, b)
        let higher = toU256(bigMul256(a.higher, b))
        
        if(higher.error != 0) {
            return ResultU512 { value: U512 { higher: MaxU256, lower: MaxU256 }, error: ArithmeticError.MulOverflow }
        }

        return bigAdd512(result, U512 { higher: higher.value, lower: 0 })
    }

    pub fn bigMulDiv256(a: U256, b: U256, bDenominator: U256) -> U512 {
        let mut result = bigMul256(a, b)

        result = bigDiv512(result, bDenominator, 1)

        return result
    }

    pub fn bigMulDivUp256(a: U256, b: U256, bDenominator: U256) -> U512 {
        let mut result = bigMul256(a, b)

        result = unwrapU512(bigAdd512(result, U512 { higher: 0, lower: bDenominator - 1 }))
        result = bigDiv512(result, bDenominator, 1)

        return result
    }
    
    pub fn overflowingAdd(a: U256, b: U256) -> (U256, U256) {
        if (MaxU256 - a >= b) {
            return a + b, 0
        }

        if (a > b) {
            return a - (MaxU256 - b) - 1, 1
        } else {
            return b - (MaxU256 - a) - 1, 1
        }
    }

    pub fn wrappingAdd(a: U256, b: U256) -> U256 {
        if (MaxU256 - a >= b) {
            return a + b
        }

        if (a > b) {
            return a - (MaxU256 - b) - 1
        } else {
            return b - (MaxU256 - a) - 1
        }
    }

    pub fn low128(a: U256) -> U256 {
        return a & ((1 << 128) - 1)
    }
    
    pub fn high128(a: U256) -> U256 {
        return a >> 128
    }
}                           

