Abstract Contract Log() extends Decimal() {
    const LOG2_SCALE = 32
    const LOG2_DOUBLE_SCALE = LOG2_SCALE *2
    const LOG2_SQRT10001 = 309801
    const LOG2_NEGATIVE_MAX_LOSE = 300000
    const LOG2_MIN_BINARY_POSITION = 15
    const LOG2_ONE = 1 << LOG2_SCALE
    const LOG2_HALF = LOG2_ONE >> 1
    const LOG2_TWO = LOG2_ONE << 1
    const LOG2_DOUBLE_ONE = 1 << LOG2_DOUBLE_SCALE
    const LOG2_ACCURACY = 1 << (31 - LOG2_MIN_BINARY_POSITION)

    fn sqrtPriceToX32(val: SqrtPrice) -> U256 {
        return val.v * LOG2_ONE / SQRT_PRICE_DENOMINATOR
    }

    fn log2FloorX32( mut sqrtPriceX32: U256) -> U256 {
        let mut msb = 0

        if (sqrtPriceX32 >= 1 << 32) {
            sqrtPriceX32 = sqrtPriceX32 >> 32
            msb = msb | 32
        }
        if (sqrtPriceX32 >= 1 << 16) {
            sqrtPriceX32 = sqrtPriceX32 >> 16
            msb = msb | 16
        }
        if (sqrtPriceX32 >= 1 << 8) {
            sqrtPriceX32 = sqrtPriceX32 >> 8
            msb = msb | 8
        }
        if (sqrtPriceX32 >= 1 << 4) {
            sqrtPriceX32 = sqrtPriceX32 >> 4
            msb = msb | 4
        }
        if (sqrtPriceX32 >= 1 << 2) {
            sqrtPriceX32 = sqrtPriceX32 >> 2
            msb = msb | 2
        }
        if (sqrtPriceX32 >= 1 << 1) {
            msb = msb | 1
        }
    
        return msb
    }

    fn alignTickToSpacing(accurateTick: I256, tickSpacing: I256) -> I256 {
        if (accurateTick > 0i) {
            return accurateTick - (accurateTick % tickSpacing)
        } else {
            let positiveTick = (-1) * accurateTick
            let remainder = positiveTick % tickSpacing
            let mut substrahend = 0i
            if (remainder != 0i) {
                substrahend = tickSpacing - remainder 
            }
            return accurateTick - substrahend
        }
    }

    fn log2IterativeApproximationX32(mut sqrtPriceX32: U256) -> (Bool, U256) {
        let mut sign = true
        if (sqrtPriceX32 < LOG2_ONE) {
            sign = false
            sqrtPriceX32 = (LOG2_DOUBLE_ONE / (sqrtPriceX32 + 1))
        }
        let log2Floor = log2FloorX32( sqrtPriceX32 >> LOG2_SCALE)
        let mut result = log2Floor << LOG2_SCALE
        let mut y = sqrtPriceX32 >> log2Floor

        if (y == LOG2_ONE) {
            return sign, result
        }
        let mut delta = LOG2_HALF
        while (delta > LOG2_ACCURACY) {
            y = y * y / LOG2_ONE
            if (y >= LOG2_TWO) {
                result = result | delta
                y = y >> 1
            }
            delta = delta >> 1
        }
        return sign, result
    }

    pub fn getTickAtSqrtPrice(sqrtPrice: SqrtPrice, tickSpacing: U256) -> I256 {
        assert!(sqrtPrice.v <= MAX_SQRT_PRICE && sqrtPrice.v >= MIN_SQRT_PRICE, LogError.SqrtPriceOutOfRange)
        let sqrtPriceX32 = sqrtPriceToX32(sqrtPrice)

        let (log2Sign, log2SqrtPrice) = log2IterativeApproximationX32(sqrtPriceX32)

        let mut absFloorTick = 0
        let mut nearerTick = 0i
        let mut fartherTick = 0i
        if (log2Sign) {
            absFloorTick = log2SqrtPrice / LOG2_SQRT10001
            nearerTick = toI256!(absFloorTick)
            fartherTick = toI256!(absFloorTick + 1)
        } else {
            absFloorTick = (log2SqrtPrice + LOG2_NEGATIVE_MAX_LOSE) / LOG2_SQRT10001
            nearerTick = (-1) * toI256!(absFloorTick)
            fartherTick = ((-1) * toI256!(absFloorTick)) - 1i
        }

        let nearerTickWithSpacing = alignTickToSpacing(nearerTick, toI256!(tickSpacing))
        let fartherTickWithSpacing = alignTickToSpacing(fartherTick, toI256!(tickSpacing))
        if (fartherTickWithSpacing == nearerTickWithSpacing) {
            return nearerTickWithSpacing
        }

        let mut accurateTick = 0i
        if (log2Sign) {
            let fartherTickSqrtPriceDecimal = calculateSqrtPrice(fartherTick)
            if (sqrtPrice.v >= fartherTickSqrtPriceDecimal.v) {
                accurateTick = fartherTickWithSpacing
            } else {
                accurateTick = nearerTickWithSpacing
            }
        } else {
            let nearerTickSqrtPriceDecimal = calculateSqrtPrice(nearerTick)
            if (nearerTickSqrtPriceDecimal.v <= sqrtPrice.v) {
                accurateTick = nearerTickWithSpacing
            } else {
                accurateTick = fartherTickWithSpacing
            }
        }

        if (tickSpacing > 1)  {
            return alignTickToSpacing(accurateTick, toI256!(tickSpacing))
        } else {
            return accurateTick
        }
    }
}