Abstract Contract Log() extends Decimal() {
    const Log2Scale = 32
    const Log2DoubleScale = 64
    const Log2Sqrt10001 = 309801
    const Log2NegativeMaxLose = 300000
    const Log2MinBinaryPosition = 15
    
    enum LogError {
        SqrtPriceOutOfRange = 7001
    }

    fn getLog2One() -> U256 {
        return 1 << Log2Scale
    }

    fn getLog2Half() -> U256 {
        return getLog2One() >> 1
    }

    fn getLog2Two() -> U256 {
        return getLog2One() << 1
    }

    fn getLog2DoubleOne() -> U256 {
        return 1 << Log2DoubleScale
    }
    
    fn getLog2Accuracy() -> U256 {
        return 1 << (31 - Log2MinBinaryPosition)
    }

    pub fn sqrtPriceToX32(val: SqrtPrice) -> U256 {
        return val.v * getLog2One() / one(SqrtPriceScale)
    }

    fn log2FloorX32( mut sqrtPriceX32: U256) -> U256 {
        let mut msb = 0

        if (sqrtPriceX32 >= 1 << 32) {
            sqrtPriceX32 = sqrtPriceX32 >> 32
            msb = msb | 32
        }
        if (sqrtPriceX32 >= 1 << 16) {
            sqrtPriceX32 = sqrtPriceX32 >> 16
            msb = msb | 16
        }
        if (sqrtPriceX32 >= 1 << 8) {
            sqrtPriceX32 = sqrtPriceX32 >> 8
            msb = msb | 8
        }
        if (sqrtPriceX32 >= 1 << 4) {
            sqrtPriceX32 = sqrtPriceX32 >> 4
            msb = msb | 4
        }
        if (sqrtPriceX32 >= 1 << 2) {
            sqrtPriceX32 = sqrtPriceX32 >> 2
            msb = msb | 2
        }
        if (sqrtPriceX32 >= 1 << 1) {
            msb = msb | 1
        }
    
        return msb
    }

    pub fn alignTickToSpacing(accurateTick: I256, tickSpacing: I256) -> I256 {
        if (accurateTick > 0i) {
            return accurateTick - (accurateTick % tickSpacing)
        } else {
            let positiveTick = (-1) * accurateTick
            let remainder = positiveTick % tickSpacing
            let mut substrahend = 0i
            if (remainder != 0i) {
                substrahend = tickSpacing - remainder 
            }
            return accurateTick - substrahend
        }
    }

    pub fn log2IterativeApproximationX32(mut sqrtPriceX32: U256) -> (Bool, U256) {
        let mut sign = true
        if (sqrtPriceX32 < getLog2One()) {
            sign = false
            sqrtPriceX32 = (getLog2DoubleOne() / (sqrtPriceX32 + 1))
        }
        let log2Floor = log2FloorX32( sqrtPriceX32 >> Log2Scale)
        let mut result = log2Floor << Log2Scale
        let mut y = sqrtPriceX32 >> log2Floor

        if (y == getLog2One()) {
            return sign, result
        }
        let mut delta = getLog2Half()
        while (delta > getLog2Accuracy()) {
            y = y * y / getLog2One()
            if (y >= getLog2Two()) {
                result = result | delta
                y = y >> 1
            }
            delta = delta >> 1
        }
        return sign, result
    }

    pub fn getTickAtSqrtPrice(sqrtPrice: SqrtPrice, tickSpacing: U256) -> I256 {
        assert!(sqrtPrice.v <= MaxSqrtPrice && sqrtPrice.v >= MinSqrtPrice, LogError.SqrtPriceOutOfRange)
        let sqrtPriceX32 = sqrtPriceToX32(sqrtPrice)

        let (log2Sign, log2SqrtPrice) = log2IterativeApproximationX32(sqrtPriceX32)

        let mut absFloorTick = 0
        let mut nearerTick = 0i
        let mut fartherTick = 0i
        if (log2Sign) {
            absFloorTick = log2SqrtPrice / Log2Sqrt10001
            nearerTick = toI256!(absFloorTick)
            fartherTick = toI256!(absFloorTick + 1)
        } else {
            absFloorTick = (log2SqrtPrice + Log2NegativeMaxLose) / Log2Sqrt10001
            nearerTick = (-1) * toI256!(absFloorTick)
            fartherTick = ((-1) * toI256!(absFloorTick)) - 1i
        }

        let nearerTickWithSpacing = alignTickToSpacing(nearerTick, toI256!(tickSpacing))
        let fartherTickWithSpacing = alignTickToSpacing(fartherTick, toI256!(tickSpacing))
        if (fartherTickWithSpacing == nearerTickWithSpacing) {
            return nearerTickWithSpacing
        }

        let mut accurateTick = 0i
        if (log2Sign) {
            let fartherTickSqrtPriceDecimal = sqrtPriceFromTick(fartherTick).v
            if (sqrtPrice.v >= fartherTickSqrtPriceDecimal) {
                accurateTick = fartherTickWithSpacing
            } else {
                accurateTick = nearerTickWithSpacing
            }
        } else {
            let nearerTickSqrtPriceDecimal = sqrtPriceFromTick(nearerTick).v
            if (nearerTickSqrtPriceDecimal <= sqrtPrice.v) {
                accurateTick = nearerTickWithSpacing
            } else {
                accurateTick = fartherTickWithSpacing
            }
        }

        if (tickSpacing > 1)  {
            return alignTickToSpacing(accurateTick, toI256!(tickSpacing))
        } else {
            return accurateTick
        }
    }
}