Abstract Contract Utils() {
    const TokenAddressBytes = 32
    enum UtilsError {
        TokensAreSame = 5000
        InvalidFee = 5001
    }
    
    pub fn generatePoolKey(token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256) -> ByteVec {
        assert!(token0 != token1, UtilsError.TokensAreSame)
        assert!(fee <= 10 ** 12, UtilsError.InvalidFee)

        for (let mut i = 0; i <= size!(token0); i = i + 1) {
            if (u256From1Byte!(byteVecSlice!(token0, i, i + 1)) < u256From1Byte!(byteVecSlice!(token1, i, i + 1))) {
                return token0 ++ token1 ++ toByteVec!(fee) ++ toByteVec!(tickSpacing)
            }

            if (u256From1Byte!(byteVecSlice!(token0, i , i + 1)) > u256From1Byte!(byteVecSlice!(token1, i , i + 1))) {
                return token1 ++ token0 ++ toByteVec!(fee) ++ toByteVec!(tickSpacing)
            }
        }

        return token0 ++ token1 ++ toByteVec!(fee) ++ toByteVec!(tickSpacing)
    }

    pub fn extractTokensFromPoolKey(poolKey: ByteVec) -> (ByteVec, ByteVec) {
        let tokenX = byteVecSlice!(poolKey, 0, TokenAddressBytes)
        let tokenY = byteVecSlice!(poolKey, TokenAddressBytes, TokenAddressBytes * 2)
        return tokenX, tokenY
    }
}