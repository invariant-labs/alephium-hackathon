Abstract Contract Ticks() extends TickHelper() {
    @using(preapprovedAssets = true)
    fn wrappedCreateTick(
        originalCaller: Address,
        poolKey: ByteVec,
        index: I256,
        sign: Bool,
        liquidityChange: U256,
        liquidityGross: U256,
        sqrtPrice: U256,
        feeGrowthOutsideX: U256,
        feeGrowthOutsideY: U256,
        secondsOutside: U256
    ) -> () {
        let key = poolKey ++ toByteVec!(index)
        assert!(!containsTick(poolKey, index), InvariantError.TickAlreadyExist)

        let state = Tick {
            sign: sign,
            index: index,
            liquidityChange: liquidityChange,
            liquidityGross: liquidityGross,
            sqrtPrice: sqrtPrice,
            feeGrowthOutsideX: feeGrowthOutsideX,
            feeGrowthOutsideY: feeGrowthOutsideY,
            secondsOutside: secondsOutside
        }

        ticks.insert!(originalCaller, key, state)
    }

    fn containsTick(
        poolKey: ByteVec,
        index: I256
    ) -> Bool {
        let key = poolKey ++ toByteVec!(index)
        return ticks.contains!(key)
    }
    
    fn wrappedUpdateTick(poolKey: ByteVec, index: I256, liquidityDelta: U256, maxLiquidityPerTick: U256, isUpper: Bool, isDeposit: Bool) -> () {
        let key = poolKey ++ toByteVec!(index)
        let tick = ticks[key]
        let updatedTick = updateTick(tick, liquidityDelta, maxLiquidityPerTick, isUpper, isDeposit)
        ticks[key] = updatedTick
    }

    fn getTickFeeGrowthOutside(poolKey: ByteVec, index: I256) -> (U256, U256) {
        let key = poolKey ++ toByteVec!(index)
        let tick = ticks[key]
        return tick.feeGrowthOutsideX, tick.feeGrowthOutsideY
    }

    fn wrappedGetTick(poolKey: ByteVec, index: I256) -> (Bool, Tick) {
        let key = poolKey ++ toByteVec!(index)
        if (containsTick(poolKey, index)) {
            return true, ticks[key]
        } else {
            return false, Tick {
                sign: false,
                index: 0i,
                liquidityChange: 0,
                liquidityGross: 0,
                sqrtPrice: 0,
                feeGrowthOutsideX: 0,
                feeGrowthOutsideY: 0,
                secondsOutside: 0
            }
        }
    }

    fn wrappedCross(poolKey: ByteVec, index: I256, feeGrowthGlobalX: U256, feeGrowthGlobalY: U256, currentTick: I256) -> (Bool, U256) {
        let key = poolKey ++ toByteVec!(index)
        let tick = ticks[key]
        let (addLiquidity, crossedTick) = cross(tick, feeGrowthGlobalX, feeGrowthGlobalY, currentTick, index)
        ticks[key] = crossedTick
        return addLiquidity, crossedTick.liquidityChange
    }

    fn removeTick(caller: Address, poolKey: ByteVec, index: I256) -> () {
        let key = poolKey ++ toByteVec!(index)
        assert!(containsTick(poolKey, index), InvariantError.TickAlreadyExist)
        ticks.remove!(caller, key)
    }
}