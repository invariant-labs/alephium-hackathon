Abstract Contract Ticks() extends TickHelper() {
    @using(preapprovedAssets = true)
    fn wrappedCreateTick(
        originalCaller: Address,
        poolKey: PoolKey,
        index: I256,
        sign: Bool,
        liquidityChange: Liquidity,
        liquidityGross: Liquidity,
        sqrtPrice: SqrtPrice,
        feeGrowthOutsideX: FeeGrowth,
        feeGrowthOutsideY: FeeGrowth,
        secondsOutside: U256
    ) -> () {
        let key = poolKeyBytes(poolKey) ++ toByteVec!(index)
        assert!(!containsTick(poolKey, index), InvariantError.TickAlreadyExist)

        let state = Tick {
            sign: sign,
            index: index,
            liquidityChange: liquidityChange,
            liquidityGross: liquidityGross,
            sqrtPrice: sqrtPrice,
            feeGrowthOutsideX: feeGrowthOutsideX,
            feeGrowthOutsideY: feeGrowthOutsideY,
            secondsOutside: secondsOutside
        }

        ticks.insert!(originalCaller, key, state)
    }

    fn containsTick(
        poolKey: PoolKey,
        index: I256
    ) -> Bool {
        let key = poolKeyBytes(poolKey) ++ toByteVec!(index)
        return ticks.contains!(key)
    }

    fn wrappedGetTick(poolKey: PoolKey, index: I256) -> (Bool, Tick) {
        let key = poolKeyBytes(poolKey) ++ toByteVec!(index)
        if (containsTick(poolKey, index)) {
            return true, ticks[key]
        } else {
            return false, Tick {
                sign: false,
                index: 0i,
                liquidityChange: Liquidity{ v: 0 },
                liquidityGross: Liquidity { v: 0},
                sqrtPrice: SqrtPrice{v: 0},
                feeGrowthOutsideX: FeeGrowth{v: 0},
                feeGrowthOutsideY: FeeGrowth{v: 0},
                secondsOutside: 0
            }
        }
    }

    fn removeTick(caller: Address, poolKey: PoolKey, index: I256) -> () {
        let key = poolKeyBytes(poolKey) ++ toByteVec!(index)
        assert!(containsTick(poolKey, index), InvariantError.TickAlreadyExist)
        ticks.remove!(caller, key)
    }

    fn rewriteTick(poolKey: PoolKey, tick: Tick) -> () {
        let key = poolKeyBytes(poolKey) ++ toByteVec!(tick.index)
        ticks[key] = tick
    }
}