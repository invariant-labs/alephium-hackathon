Contract Ticks(admin: Address, tickTemplateContractId: ByteVec, mut tickCount: U256) extends CLAMM() {
    enum TicksError {
        NotAdmin = 1000
        TickNotFound = 1001
        TickAlreadyExist = 1002
    }

    @using(preapprovedAssets = false, updateFields = true, checkExternalCaller = false)
    pub fn add(
        caller: Address,
        poolKey: ByteVec,
        initTick: I256,
        sign: Bool
    ) -> () {
        assert!(callerAddress!() == admin, TicksError.NotAdmin)

        let (exist, isTickInitialized, listIndex) = tickExist(poolKey, initTick) 

        assert!(exist && !isTickInitialized, TicksError.TickAlreadyExist)
        
        if(exist && !isTickInitialized) {
            let _ = Tick(subContractId!(toByteVec!(2) ++ poolKey ++ toByteVec!(listIndex)))
            // contract.reinitializeTick()
            return
        } else {
            let (encodedImmFields, encodedMutFields) = Tick.encodeFields!(selfAddress!(), initTick, sign, 0, 0, sqrtPriceFromTick(initTick), 0, 0, 0, true)
            copyCreateSubContract!{caller -> ALPH: 1 alph}(
                toByteVec!(2) ++ poolKey ++ toByteVec!(listIndex),
                tickTemplateContractId,
                encodedImmFields,
                encodedMutFields
            )   
            tickCount = tickCount + 1 
            return
        }
    }

    pub fn tickExist(
        poolKey: ByteVec,
        index: I256
    ) -> (Bool, Bool, U256) {
        for (let mut i = 1; i <= tickCount; i = i + 1) {
            let contract = Tick(subContractId!(toByteVec!(2) ++ poolKey ++ toByteVec!(tickCount)))

            if (contract.getIdx() == index) {
                return true, contract.getIsInitialized(), i
            }
        }

        return false, false, 0
    }

    @using(checkExternalCaller = false)
    pub fn deinitializeTick(
        poolKey: ByteVec,
        index: I256
    ) -> () {
        let (exist, isTickInitialized, listIndex) = tickExist(poolKey, index)
        assert!(exist && isTickInitialized, TicksError.TickNotFound)
        let contract = Tick(subContractId!(toByteVec!(2) ++ poolKey ++ toByteVec!(listIndex)))
        contract.deinitializeTick()
        return
    }

}