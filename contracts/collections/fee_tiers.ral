Contract FeeTiers(
    feeTierTemplateContractId: ByteVec,
    mut feeTierCount: U256,
    mut invariantId: Address,
    mut areAdminsSet: Bool
) {
    enum FeeTiersError {
        NotAdmin = 100
        AdminsAreSet = 101
        FeeTierAlreadyExist = 102
        FeeTierNotFound = 103
    }

    @using(updateFields = true, checkExternalCaller = false)
    pub fn setAdmins(invariant: Address) -> () {
        assert!(!areAdminsSet, FeeTiersError.AdminsAreSet)
        invariantId = invariant
        areAdminsSet = true
    }

    @using(preapprovedAssets = true, updateFields = true)
    pub fn add(originalCaller: Address, fee: U256, tickSpacing: U256) -> () {
        checkCaller!(callerAddress!() == invariantId && areAdminsSet, FeeTiersError.NotAdmin)

        let exists = contains(fee, tickSpacing)
        assert!(!exists, FeeTiersError.FeeTierAlreadyExist)

        for (let mut i = 1; i <= feeTierCount; i = i + 1) {
            let contract = FeeTier(subContractId!(toByteVec!(i)))

            if (fee == contract.getFee() && tickSpacing == contract.getTickSpacing() && !contract.isActive()) {
                contract.setActive(true)
                return
            }
        }
    
        feeTierCount = feeTierCount + 1
        let (encodedImmFields, encodedMutFields) = FeeTier.encodeFields!(selfAddress!(), fee, tickSpacing, true)
        let _ = copyCreateSubContract!{originalCaller -> ALPH: 1 alph}(
            toByteVec!(feeTierCount),
            feeTierTemplateContractId,
            encodedImmFields,
            encodedMutFields
        )
    }

    pub fn remove(fee: U256, tickSpacing: U256) -> () {
        checkCaller!(callerAddress!() == invariantId && areAdminsSet, FeeTiersError.NotAdmin)

        for (let mut i = 1; i <= feeTierCount; i = i + 1) {
            let contract = FeeTier(subContractId!(toByteVec!(i)))

            if (fee == contract.getFee() && tickSpacing == contract.getTickSpacing() && contract.isActive()) {
                contract.setActive(false)
                return
            }
        }

        assert!(false, FeeTiersError.FeeTierNotFound)
    }

    pub fn contains(fee: U256, tickSpacing: U256) -> Bool {
        for (let mut i = 1; i <= feeTierCount; i = i + 1) {
            let contract = FeeTier(subContractId!(toByteVec!(i)))

            if (fee == contract.getFee() && tickSpacing == contract.getTickSpacing() && contract.isActive()) {
                return true
            }
        }

        return false
    }

    pub fn count() -> U256 {
        let mut count = 0

        for (let mut i = 1; i <= feeTierCount; i = i + 1) {
            let contract = FeeTier(subContractId!(toByteVec!(i)))

            if (contract.isActive()) {
                count = count + 1
            }
        }

        return count
    }
    
    pub fn getAll() -> ByteVec {
        let mut feeTiersBytes = b``

        for (let mut i = 1; i <= feeTierCount; i = i + 1) {
            let contract = FeeTier(subContractId!(toByteVec!(i)))

            if(contract.isActive()) {
                feeTiersBytes = feeTiersBytes ++ toByteVec!(contract.getFee()) ++ b`break` ++ toByteVec!(contract.getTickSpacing()) ++ b`break`
            }
        }

        return feeTiersBytes
    }
}