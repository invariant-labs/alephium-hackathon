Contract FeeTiers(
    mut feeTierCount: U256,
    mut invariantId: Address,
    mut areAdminsSet: Bool
) {
    // Key = feeTierCount
    mapping[U256, FeeTier] feeTiers
    

    enum FeeTiersError {
        NotAdmin = 100
        AdminsAreSet = 101
        FeeTierAlreadyExist = 102
        FeeTierNotFound = 103
    }

    @using(updateFields = true, checkExternalCaller = false)
    pub fn setAdmins(invariant: Address) -> () {
        assert!(!areAdminsSet, FeeTiersError.AdminsAreSet)
        invariantId = invariant
        areAdminsSet = true
    }

    @using(preapprovedAssets = true, updateFields = true)
    pub fn add(originalCaller: Address, fee: U256, tickSpacing: U256) -> () {
        checkCaller!(callerAddress!() == invariantId && areAdminsSet, FeeTiersError.NotAdmin)

        let exists = contains(fee, tickSpacing)
        assert!(!exists, FeeTiersError.FeeTierAlreadyExist)    

        feeTierCount = feeTierCount + 1
        feeTiers.insert!(originalCaller, feeTierCount, FeeTier { fee: fee, tickSpacing: tickSpacing })
    }

    @using(updateFields = true)
    pub fn remove(originalCaller: Address, fee: U256, tickSpacing: U256) -> () {
        checkCaller!(callerAddress!() == invariantId && areAdminsSet, FeeTiersError.NotAdmin)

        for (let mut i = 1; i <= feeTierCount; i = i + 1) {
            let state = feeTiers[i]
            if (fee == state.fee && tickSpacing == state.tickSpacing) {
                // FeeTier is last in the list
                if (i == feeTierCount) {
                    feeTiers.remove!(originalCaller, i)
                } else {
                    let lastState = feeTiers[feeTierCount]
                    feeTiers[i] = lastState
                    feeTiers.remove!(originalCaller, feeTierCount)
                }
                feeTierCount = feeTierCount - 1
                return
            }
        }

        assert!(false, FeeTiersError.FeeTierNotFound)
    }

    pub fn contains(fee: U256, tickSpacing: U256) -> Bool {
        for (let mut i = 1; i <= feeTierCount; i = i + 1) {
            let state = feeTiers[i]
        
            if (fee == state.fee && tickSpacing == state.tickSpacing) {
                return true
            }
        }

        return false
    }

    pub fn count() -> U256 {
        return feeTierCount
    }
    
    pub fn getAll() -> ByteVec {
        let mut feeTiersBytes = b``

        for (let mut i = 1; i <= feeTierCount; i = i + 1) {
            let state = feeTiers[i]
            feeTiersBytes = feeTiersBytes ++ toByteVec!(state.fee) ++ b`break` ++ toByteVec!(state.tickSpacing) ++ b`break`
        }

        return feeTiersBytes
    }
}