Abstract Contract FeeTiers() {
    @using(updateFields = true, preapprovedAssets = true)
    fn wrappedAddFeeTier(originalCaller: Address, feeTier: FeeTier) -> () {
        let exists = containsFeeTier(feeTier)
        assert!(!exists, InvariantError.FeeTierAlreadyExist)    

        feeTierCount = feeTierCount + 1
        feeTiers.insert!(originalCaller, feeTierCount, feeTier)
    }

    @using(updateFields = true)
    fn wrappedRemoveFeeTier(originalCaller: Address, feeTier: FeeTier) -> () {
        for (let mut i = 1; i <= feeTierCount; i = i + 1) {
            let state = feeTiers[i]
            if (feeTier.fee == state.fee && feeTier.tickSpacing == state.tickSpacing) {
                // FeeTier is last in the list
                if (i == feeTierCount) {
                    feeTiers.remove!(originalCaller, i)
                } else {
                    let lastState = feeTiers[feeTierCount]
                    feeTiers[i] = lastState
                    feeTiers.remove!(originalCaller, feeTierCount)
                }
                feeTierCount = feeTierCount - 1
                return
            }
        }

        assert!(false, InvariantError.FeeTierNotFound)
    }

    pub fn containsFeeTier(feeTier: FeeTier) -> Bool {
        for (let mut i = 1; i <= feeTierCount; i = i + 1) {
            let state = feeTiers[i]
        
            if (feeTier.fee == state.fee && feeTier.tickSpacing == state.tickSpacing) {
                return true
            }
        }

        return false
    }

    pub fn countFeeTiers() -> U256 {
        return feeTierCount
    }
    
    pub fn getAllFeeTiers() -> ByteVec {
        let mut feeTiersBytes = b``

        for (let mut i = 1; i <= feeTierCount; i = i + 1) {
            let state = feeTiers[i]
            feeTiersBytes = feeTiersBytes ++ toByteVec!(state.fee) ++ b`break` ++ toByteVec!(state.tickSpacing) ++ b`break`
        }

        return feeTiersBytes
    }
}