Abstract Contract PoolKeys() {
    @using(preapprovedAssets = true, updateFields = true, checkExternalCaller = false)
    pub fn addPoolKey(originalCaller: Address, tokenX: ByteVec, tokenY: ByteVec, fee: U256, tickSpacing: U256) -> () {
        let exists = containsPoolKey(tokenX, tokenY, fee, tickSpacing)
        assert!(!exists, InvariantError.PoolKeyAlreadyExist)
    
        poolKeyCount = poolKeyCount + 1

        poolKeys.insert!(originalCaller, poolKeyCount, PoolKey { tokenX: tokenX, tokenY: tokenY, fee: fee, tickSpacing: tickSpacing })
    }

    pub fn containsPoolKey(tokenX: ByteVec, tokenY: ByteVec, fee: U256, tickSpacing: U256) -> Bool {
        for (let mut i = 1; i <= poolKeyCount; i = i + 1) {
            let state = poolKeys[i]

            if (tokenX == state.tokenX && tokenY == state.tokenY && fee == state.fee && tickSpacing == state.tickSpacing) {
                return true
            }
        }

        return false
    }

    pub fn countPoolKeys() -> U256 {
        return poolKeyCount
    }

    pub fn getAllPoolKeys() -> ByteVec {
        let mut poolKeysBytes = b``

        for (let mut i = 1; i <= poolKeyCount; i = i + 1) {
            let state = poolKeys[i]
            poolKeysBytes = poolKeysBytes ++ state.tokenX ++ b`break` ++ state.tokenY ++ b`break` ++ toByteVec!(state.fee) ++ b`break` ++ toByteVec!(state.tickSpacing) ++ b`break`
        }

        return poolKeysBytes
    }
}