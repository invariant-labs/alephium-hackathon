Contract PoolKeys(poolKeyTemplateContractId: ByteVec, mut poolKeyCount: U256, mut invariantId: ByteVec, mut areAdminsSet: Bool) {
    enum PoolKeysError {
        NotAdmin = 200
        PoolKeyAlreadyExist = 201
        AdminsAreSet = 202
    }


    @using(updateFields = true, checkExternalCaller = false)
    pub fn setAdmins(invtId: ByteVec) -> () {
        assert!(!areAdminsSet, PoolKeysError.AdminsAreSet)
        invariantId = invtId
        areAdminsSet = true
    }

    @using(preapprovedAssets = true, updateFields = true, checkExternalCaller = false)
    pub fn add(originalCaller: Address, tokenX: ByteVec, tokenY: ByteVec, fee: U256, tickSpacing: U256) -> () {
        let callerId = toByteVec!(callerAddress!())
        assert!(callerId == invariantId && areAdminsSet, PoolKeysError.NotAdmin)

        for (let mut i = 1; i <= poolKeyCount; i = i + 1) {
            let contract = PoolKey(subContractId!(toByteVec!(i)))
    
            assert!(tokenX != contract.getTokenX() || tokenY != contract.getTokenY() || fee != contract.getFee() || tickSpacing != contract.getTickSpacing(), PoolKeysError.PoolKeyAlreadyExist)
        }
    
        poolKeyCount = poolKeyCount + 1
        let (encodedImmFields, encodedMutFields) = PoolKey.encodeFields!(tokenX, tokenY, fee, tickSpacing)
        copyCreateSubContract!{originalCaller -> ALPH: 1 alph}(
            toByteVec!(i),
            poolKeyTemplateContractId,
            encodedImmFields,
            encodedMutFields
        )
    }

    pub fn contains(tokenX: ByteVec, tokenY: ByteVec, fee: U256, tickSpacing: U256) -> Bool {
        let callerId = toByteVec!(callerAddress!())
        assert!(callerId == invariantId && areAdminsSet, PoolKeysError.NotAdmin)

        for (let mut i = 1; i <= poolKeyCount; i = i + 1) {
            let contract = PoolKey(subContractId!(toByteVec!(i)))

            if (tokenX == contract.getTokenX() && tokenY == contract.getTokenY() && fee == contract.getFee() && tickSpacing == contract.getTickSpacing()) {
                return true
            }
        }

        return false
    }

    pub fn getAll() -> ByteVec {
        let mut poolsBytes = b``

        for (let mut i = 1; i <= poolKeyCount; i = i + 1) {
            let contract = PoolKey(subContractId!(toByteVec!(i)))
            poolsBytes = poolsBytes ++ contract.getTokenX() ++ b`break` ++ contract.getTokenY() ++ b`break` ++ toByteVec!(contract.getFee()) ++ b`break` ++ toByteVec!(contract.getTickSpacing()) ++ b`break`
        }

        return poolsBytes
    }
}