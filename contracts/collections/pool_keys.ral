Contract PoolKeys(
    poolKeyTemplateContractId: ByteVec,
    mut poolKeyCount: U256,
    mut invariantId: Address,
    mut areAdminsSet: Bool
) {
    enum PoolKeysError {
        NotAdmin = 200
        AdminsAreSet = 201
        PoolKeyAlreadyExist = 202
    }

    @using(updateFields = true, checkExternalCaller = false)
    pub fn setAdmins(invariant: Address) -> () {
        assert!(!areAdminsSet, PoolKeysError.AdminsAreSet)
        invariantId = invariant
        areAdminsSet = true
    }

    @using(preapprovedAssets = true, updateFields = true)
    pub fn add(originalCaller: Address, tokenX: ByteVec, tokenY: ByteVec, fee: U256, tickSpacing: U256) -> () {
        checkCaller!(callerAddress!() == invariantId && areAdminsSet, PoolKeysError.NotAdmin)

        let exists = contains(tokenX, tokenY, fee, tickSpacing)
        assert!(!exists, PoolKeysError.PoolKeyAlreadyExist)
    
        poolKeyCount = poolKeyCount + 1
        let (encodedImmFields, encodedMutFields) = PoolKey.encodeFields!(tokenX, tokenY, fee, tickSpacing)
        copyCreateSubContract!{originalCaller -> ALPH: 1 alph}(
            toByteVec!(poolKeyCount),
            poolKeyTemplateContractId,
            encodedImmFields,
            encodedMutFields
        )
    }

    pub fn contains(tokenX: ByteVec, tokenY: ByteVec, fee: U256, tickSpacing: U256) -> Bool {
        for (let mut i = 1; i <= poolKeyCount; i = i + 1) {
            let contract = PoolKey(subContractId!(toByteVec!(i)))

            if (tokenX == contract.getTokenX() && tokenY == contract.getTokenY() && fee == contract.getFee() && tickSpacing == contract.getTickSpacing()) {
                return true
            }
        }

        return false
    }

    pub fn count() -> U256 {
        return poolKeyCount
    }

    pub fn getAll() -> ByteVec {
        let mut poolKeysBytes = b``

        for (let mut i = 1; i <= poolKeyCount; i = i + 1) {
            let contract = PoolKey(subContractId!(toByteVec!(i)))
            poolKeysBytes = poolKeysBytes ++ contract.getTokenX() ++ b`break` ++ contract.getTokenY() ++ b`break` ++ toByteVec!(contract.getFee()) ++ b`break` ++ toByteVec!(contract.getTickSpacing()) ++ b`break`
        }

        return poolKeysBytes
    }
}