// Abstract Contract PoolKeys(
//     poolKeyTemplateContractId: ByteVec,
//     mut poolKeyCount: U256
// ) {
//     @using(preapprovedAssets = true, updateFields = true, checkExternalCaller = false)
//     pub fn poolKeysAdd(caller: Address, fee: U256, tickSpacing: U256) -> () {
//         for (let mut i = 1; i <= poolKeyCount; i = i + 1) {
//             let contract = PoolKey(subContractId!(toByteVec!(InvariantCollection.FeeTiers) ++ toByteVec!(i)))
    
//             if (!contract.isActive()) {
//                 contract.setActive(true)
//                 return
//             }
    
//             assert!((fee != contract.getFee() || tickSpacing != contract.getTickSpacing()), InvariantError.FeeTierAlreadyExist)
//         }
    
//         poolKeyCount = poolKeyCount + 1
//         let (encodedImmFields, encodedMutFields) = FeeTier.encodeFields!(selfAddress!(), fee, tickSpacing, true)
//         copyCreateSubContract!{caller -> ALPH: 1 alph}(
//             toByteVec!(InvariantCollection.FeeTiers) ++ toByteVec!(i),
//             feeTierTemplateContractId,
//             encodedImmFields,
//             encodedMutFields
//         )
//     }

//     @using(checkExternalCaller = false)
//     pub fn poolKeysRemove(fee: U256, tickSpacing: U256) -> () {
//         for (let mut i = 1; i <= poolKeyCount; i = i + 1) {
//             let contract = PoolKey(subContractId!(toByteVec!(InvariantCollection.FeeTiers) ++ toByteVec!(i)))

//             if (fee == contract.getFee() && tickSpacing == contract.getTickSpacing() && contract.isActive()) {
//                 contract.setActive(false)
//                 return
//             }
//         }

//         assert!(false, InvariantError.FeeTierNotFound)
//     }

//     pub fn poolKeysContains(fee: U256, tickSpacing: U256) -> Bool {
//         for (let mut i = 1; i <= poolKeyCount; i = i + 1) {
//             let contract = PoolKey(subContractId!(toByteVec!(InvariantCollection.FeeTiers) ++ toByteVec!(i)))

//             if (fee == contract.getFee() && tickSpacing == contract.getTickSpacing() && contract.isActive()) {
//                 return true
//             }
//         }

//         return false
//     }
// } 