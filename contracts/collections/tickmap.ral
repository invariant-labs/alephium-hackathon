Abstract Contract Tickmap() extends Decimal(), BatchHelper() {
    const ChunkSize = 256
    const HalfChunkSize = 128
    const SearchRange = 256i
    const ChunksPerBatch = 94

    pub fn tickToPosition(tick: I256, tickSpacing: U256) -> (U256, U256) {
        assert!(tick >= GlobalMinTick && tick <= GlobalMaxTick, InvariantError.InvalidTickIndex)
        assert!(tick % toI256!(tickSpacing) == 0i, InvariantError.TickAndTickSpacingMismatch)
    
        let bitmapIndex = toU256!(tick + GlobalMaxTick) / tickSpacing
    
        let chunk = bitmapIndex / ChunkSize
        let bit = bitmapIndex % ChunkSize
    
        return chunk, bit
    }

    fn getBitAtPosition(value: U256, position: U256) -> Bool {
        return (value >> position) & 1 == 1
    }

    fn flipBitAtPosition(value: U256, position: U256) -> U256 {
        return value ^ (1 << position)
    }

    pub fn getSearchLimit(tick: I256, tickSpacing: U256, up: Bool) -> I256 {
        let index = tick / toI256!(tickSpacing)

        let mut limit = 0i

        if (up) {
            let rangeLimitUp = index + SearchRange
            let sqrtPriceLimitUp = GlobalMaxTick / toI256!(tickSpacing)

            if (rangeLimitUp < sqrtPriceLimitUp) {
                limit = rangeLimitUp
            } else {
                limit = sqrtPriceLimitUp
            }
        } else {
            let rangeLimitDown = index - SearchRange
            let sqrtPriceLimitDown = GlobalMinTick / toI256!(tickSpacing)

            if (rangeLimitDown > sqrtPriceLimitDown) {
                limit = rangeLimitDown
            } else {
                limit = sqrtPriceLimitDown
            }
        }

        return limit * toI256!(tickSpacing)
    }

    pub fn nextInitialized(tick: I256, tickSpacing: U256, poolKey: ByteVec) -> (Bool, I256) {
        let limit = getSearchLimit(tick, tickSpacing, true)

        if (tick + toI256!(tickSpacing) > GlobalMaxTick) {
            return false, 0i
        }

        let (mut chunk, mut bit) = tickToPosition(tick + toI256!(tickSpacing), tickSpacing)
        let (limitingChunk, limitingBit) = tickToPosition(limit, tickSpacing)

        while (chunk < limitingChunk || (chunk == limitingChunk && bit <= limitingBit)) {
            let mut shifted = getChunk(chunk, poolKey) >> bit

            if (shifted != 0) {
                while (shifted % 2 == 0) {
                    shifted = shifted >> 1
                    bit = bit + 1
                }

                if (chunk < limitingChunk || (chunk == limitingChunk && bit <= limitingBit)) {
                    let index = chunk * ChunkSize + bit
                    
                    return true, (toI256!(index) - (GlobalMaxTick / toI256!(tickSpacing))) * toI256!(tickSpacing)
                } else {
                    return false, 0i
                }
            }

            chunk = chunk + 1
            bit = 0
        }

        return false, 0i
    }

    pub fn prevInitialized(tick: I256, tickSpacing: U256, poolKey: ByteVec) -> (Bool, I256) {
        let limit = getSearchLimit(tick, tickSpacing, false)
        let (mut chunk, mut bit) = tickToPosition(tick, tickSpacing)
        let (limitingChunk, limitingBit) = tickToPosition(limit, tickSpacing)

        
        while (chunk > limitingChunk || (chunk == limitingChunk && bit >= limitingBit)) {
            let value = getChunk(chunk, poolKey)

            let upper = value >> HalfChunkSize & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
            let lower = value & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

            let mut part = 0
            let mut part_bit = 0

            if (bit >= HalfChunkSize) {
                part = upper
                part_bit = bit - HalfChunkSize
            } else {
                part = lower
                part_bit = bit
            }

            let mut mask = 1 << part_bit

            while (part_bit > 0 && part & mask == 0) {
                mask = mask >> 1
                part_bit = part_bit - 1
            }

            if (part & mask != 0) {
                if (bit >= HalfChunkSize) {
                    bit = part_bit + HalfChunkSize
                } else {
                    bit = part_bit
                }
                if (chunk > limitingChunk || (chunk == limitingChunk && bit >= limitingBit)) {
                    let mut index = chunk * ChunkSize + bit
                    return true, (toI256!(index) - (GlobalMaxTick / toI256!(tickSpacing))) * toI256!(tickSpacing)
                } else {
                    return false, 0i
                }
            }

            // Check lower part
            if (bit >= HalfChunkSize) {
                part = lower
                part_bit = HalfChunkSize - 1
                mask = 1 << part_bit

                while (part_bit > 0 && part & mask == 0) {
                    mask = mask >> 1
                    part_bit = part_bit - 1
                }

                if(part & mask != 0) {
                    bit = part_bit
                    if (chunk > limitingChunk || (chunk == limitingChunk && bit >= limitingBit)) {
                        index = chunk * ChunkSize + bit
                        return true, (toI256!(index) - (GlobalMaxTick / toI256!(tickSpacing))) * toI256!(tickSpacing)
                    } else {
                        return false, 0i
                    }
                }

            }

            // move to next chunk
            if (chunk > 0) {
                chunk = chunk - 1
            } else {
                return false, 0i
            }
            bit = ChunkSize - 1
            
        }

        return false, 0i
    }

    @using(checkExternalCaller = false)
    pub fn getCloserLimit(sqrtPriceLimit: U256, xToY: Bool, currentTick: I256, tickSpacing: U256, poolKey: ByteVec) -> (U256, Bool, I256, Bool) {
        let mut closesTickBool = false
        let mut closesTickIndex = 0i
        
        if (xToY) {
            let (closesTickBoolXtoY, closesTickIndexXtoY) = prevInitialized(currentTick, tickSpacing, poolKey)
            closesTickBool = closesTickBoolXtoY
            closesTickIndex = closesTickIndexXtoY
        } else {
            let (closesTickBoolYtoX, closesTickIndexYtoX) = nextInitialized(currentTick, tickSpacing, poolKey)
            closesTickBool = closesTickBoolYtoX
            closesTickIndex = closesTickIndexYtoX
        }

        if (closesTickBool) {
            let sqrtPriceExist = calculateSqrtPrice(closesTickIndex)

            if ((xToY && sqrtPriceExist > sqrtPriceLimit) || (!xToY && sqrtPriceExist < sqrtPriceLimit)) {
                return sqrtPriceExist, true, closesTickIndex, true
            } else {
                return sqrtPriceExist, false, 0i, false
            }
        } else {
            let index = getSearchLimit(currentTick, tickSpacing, !xToY)
            let sqrtPriceNotExist = calculateSqrtPrice(index)

            assert!(currentTick != index, InvariantError.TickLimitReached)

            if ((xToY && sqrtPriceNotExist > sqrtPriceLimit) || (!xToY && sqrtPriceNotExist < sqrtPriceLimit)) {
                return sqrtPriceNotExist, true, index, false
            } else {
                return sqrtPriceNotExist, false, 0i, false
            }
        }
    }

    fn getChunk(chunk: U256, poolKey: ByteVec) -> U256 {
        let key = poolKey ++ toByteVec!(getKey(chunk))
        let exists = bitmap.contains!(key)

        if (!exists) {
            return 0
        } else {
            return extractChunk(key, chunk)
        }
    }

    pub fn getBit(tick: I256, tickSpacing: U256, poolKey: ByteVec) -> Bool {
        let (chunk, bit) = tickToPosition(tick, tickSpacing)

        return getBitAtPosition(getChunk(chunk, poolKey), bit)
    }

    @using(preapprovedAssets = false, checkExternalCaller = false)
    pub fn flip(value: Bool, tick: I256, tickSpacing: U256, poolKey: ByteVec) -> () {
        let (chunkIndex, bit) = tickToPosition(tick, tickSpacing)
        let chunk = getChunk(chunkIndex, poolKey)
        let isInitialized = getBitAtPosition(chunk, bit)
        let key = poolKey ++ toByteVec!(getKey(chunkIndex))

        assert!(bitmap.contains!(key), InvariantError.ChunkNotFound)
        

        assert!(value && !isInitialized || !value && isInitialized, InvariantError.TickInitialized)
    
        let flipped = flipBitAtPosition(extractChunk(key, chunkIndex), bit)
        rewriteChunk(key, chunkIndex, flipped)
    }

    @using(preapprovedAssets = true, checkExternalCaller = false)
    pub fn initializeChunk(originalCaller: Address, poolKey: ByteVec, chunk: U256) -> () {
        let id = poolKey ++ toByteVec!(getKey(chunk))
        let exists = bitmap.contains!(id)
        if(!exists) {
            let batch = TickmapBatch {
                chunks: [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0
                ] 
            }
            bitmap.insert!(originalCaller, id, batch)
        }
    }

    @using(checkExternalCaller = false)
    pub fn getChunks(lowerTick: I256, upperTick: I256, tickSpacing: U256) -> (U256, U256) {
        let (lowerChunk, _) = tickToPosition(lowerTick, tickSpacing)
        let (upperChunk, _) = tickToPosition(upperTick, tickSpacing)
        return lowerChunk, upperChunk
    }
}