Abstract Contract Pools(clamm: CLAMM) extends PoolKeyHelper(), PoolHelper(clamm) {
    @using(preapprovedAssets = true)
    fn addPool(
        originalCaller: Address,
        poolKey: ByteVec,
        tokenX: ByteVec,
        tokenY: ByteVec,
        fee: U256,
        tickSpacing: U256,
        initSqrtPrice: U256,
        initTick: I256,
        currentTimestamp: U256,
        feeReceiver: Address
    ) -> () {
        assert!(!containsPool(poolKey), InvariantError.PoolAlreadyExist)

        let state = Pool {
            tokenX: tokenX,
            tokenY: tokenY,
            fee: fee,
            tickSpacing: tickSpacing,
            liquidity: 0,
            sqrtPrice: initSqrtPrice,
            currentTickIndex: initTick,
            feeGrowthGlobalX: 0,
            feeGrowthGlobalY: 0,
            feeProtocolTokenX: 0,
            feeProtocolTokenY: 0,
            startTimestamp: currentTimestamp,
            lastTimestamp: currentTimestamp,
            feeReceiver: feeReceiver
        }
        pools.insert!(originalCaller, poolKey, state)
    }

    fn containsPool(poolKey: ByteVec) -> Bool {
        return pools.contains!(poolKey)
    }

    fn setLastTimestamp(poolKey: ByteVec, timestamp: U256) -> () {
        let mut state = pools[poolKey]
        state.lastTimestamp = timestamp
        pools[poolKey] = state
    }
    
    fn setFeeReceiver(poolKey: ByteVec, newReceiver: Address) -> () {
        let mut state = pools[poolKey]
        state.feeReceiver = newReceiver
        pools[poolKey] = state
    }

    fn wrappedGetPool(poolKey: ByteVec) -> (Bool, Pool) {
        if(containsPool(poolKey)) {
            return true, pools[poolKey]
        } else {   
            return false,
            Pool {
                tokenX: #,
                tokenY: #,
                fee: 0,
                tickSpacing: 0,
                liquidity: 0,
                sqrtPrice: 0,
                currentTickIndex: 0i,
                feeGrowthGlobalX: 0,
                feeGrowthGlobalY: 0,
                feeProtocolTokenX: 0,
                feeProtocolTokenY: 0,
                startTimestamp: 0,
                lastTimestamp: 0,
                feeReceiver: nullContractAddress!()
            }
        } 
    }

    fn wrappedUpdateLiquidity(poolKey: ByteVec, liquidityDelta: U256, liquiditySign: Bool, upperTick: I256, lowerTick: I256) -> (U256, U256) {
        let (x, y, pool) = updateLiquidity(pools[poolKey], liquidityDelta, liquiditySign, upperTick, lowerTick)
        pools[poolKey] = pool
        return x, y
    }

    fn wrappedGetProtocolFee(poolKey: ByteVec) -> (U256, U256) {
        let (feeProtocolTokenX, feeProtocolTokenY, pool) = getAndUpdateProtocolFee(pools[poolKey])
        pools[poolKey] = pool
        return feeProtocolTokenX, feeProtocolTokenY
    }
}