Contract Pools(admin: Address, poolTemplateContractId: ByteVec, clammContractId: ByteVec) {
    enum PoolsError {
        NotAdmin = 300
        PoolAlreadyExist = 301
    }

    @using(preapprovedAssets = true, checkExternalCaller = false)
    pub fn add(originalCaller: Address, token0: Address, token1: Address, fee: U256, tickSpacing: U256, initSqrtPrice: U256, initTick: I256, currentTimestamp: U256, feeReceiver: Address) -> () {
        assert!(callerAddress!() == admin, PoolsError.NotAdmin)
        
        let poolKey = CLAMM(clammContractId).generatePoolKey(token0, token1, fee, tickSpacing)

        assert!(!contractExists!(subContractId!(poolKey)), PoolsError.PoolAlreadyExist)

        let (encodedImmFields, encodedMutFields) = Pool.encodeFields!(selfAddress!(), 0, initSqrtPrice, initTick, 0, 0, 0, 0, currentTimestamp, currentTimestamp, feeReceiver, clammContractId)
        copyCreateSubContract!{originalCaller -> ALPH: 1 alph}(
            poolKey,
            poolTemplateContractId,
            encodedImmFields,
            encodedMutFields
        )
    }

    pub fn get(token0: Address, token1: Address, fee: U256, tickSpacing: U256) -> (Bool, ByteVec) {
        let mut pool = b``

        let subContractId = subContractId!(CLAMM(clammContractId).generatePoolKey(token0, token1, fee, tickSpacing))

        if (!contractExists!(subContractId)) {
            return false, b``
        }

        let contract = Pool(subContractId)
        pool = pool 
        ++ toByteVec!(contract.getPoolLiquidity()) ++ b`break` 
        ++ toByteVec!(contract.getPoolCurrentSqrtPrice()) ++ b`break` 
        ++ toByteVec!(contract.getPoolCurrentTickIndex()) ++ b`break` 
        ++ toByteVec!(contract.getFeeGrowthGlobalX()) ++ b`break`
        ++ toByteVec!(contract.getFeeGrowthGlobalY()) ++ b`break`
        ++ toByteVec!(contract.getFeeProtocolTokenX()) ++ b`break`
        ++ toByteVec!(contract.getFeeProtocolTokenY()) ++ b`break`
        ++ toByteVec!(contract.getStartTimestamp()) ++ b`break`
        ++ toByteVec!(contract.getLastTimestamp()) ++ b`break`
        ++ toByteVec!(contract.getFeeReceiver())

        return true, pool
    }
}