Abstract Contract Pools(clamm: CLAMM) extends PoolKeyHelper(), PoolHelper(clamm) {
    @using(preapprovedAssets = true)
    fn addPool(
        originalCaller: Address,
        poolKey: PoolKey,
        initSqrtPrice: U256,
        initTick: I256,
        currentTimestamp: U256,
        feeReceiver: Address
    ) -> () {
        assert!(!containsPool(poolKey), InvariantError.PoolAlreadyExist)

        let key = poolKeyBytes(poolKey)
        let reserve = initReserve{originalCaller -> ALPH: mapEntryDeposit!()}(originalCaller, key)
        let state = Pool {
            poolKey: poolKey,
            liquidity: 0,
            sqrtPrice: initSqrtPrice,
            currentTickIndex: initTick,
            feeGrowthGlobalX: 0,
            feeGrowthGlobalY: 0,
            feeProtocolTokenX: 0,
            feeProtocolTokenY: 0,
            startTimestamp: currentTimestamp,
            lastTimestamp: currentTimestamp,
            feeReceiver: feeReceiver,
            reserve: reserve
        }
        
        pools.insert!(originalCaller, key, state)
        
    }

    fn containsPool(poolKey: PoolKey) -> Bool {
        let key = poolKeyBytes(poolKey)
        return pools.contains!(key)
    }

    fn wrappedGetPool(poolKey: PoolKey) -> (Bool, Pool) {
        let key = poolKeyBytes(poolKey)
        if(containsPool(poolKey)) {
            return true, pools[key]
        } else {
            let nullId = addressToContractId!(nullContractAddress!())
            return false,
            Pool {
                poolKey: PoolKey {
                    tokenX: nullId,
                    tokenY: nullId,
                    feeTier: FeeTier {
                        fee: 0,
                        tickSpacing: 0
                    }
                },
                liquidity: 0,
                sqrtPrice: 0,
                currentTickIndex: 0i,
                feeGrowthGlobalX: 0,
                feeGrowthGlobalY: 0,
                feeProtocolTokenX: 0,
                feeProtocolTokenY: 0,
                startTimestamp: 0,
                lastTimestamp: 0,
                feeReceiver: nullContractAddress!(),
                reserve: nullId
            }
        } 
    }
    
    @using(preapprovedAssets = true)
    fn initReserve(caller: Address, key: ByteVec) -> ByteVec {
        let (encodedImmFields, encodedMutFields) = Reserve.encodeFields!(selfAddress!())
        let id = copyCreateSubContract!{caller -> ALPH: mapEntryDeposit!()}(
            key,
            reserveTemplateId,
            encodedImmFields,
            encodedMutFields
        )
        return id
    }
}