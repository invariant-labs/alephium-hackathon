// T1CHECK - Reserve handling
Abstract Contract Reserves() {
    @using(updateFields = true, preapprovedAssets = true)
    fn handleReserves(caller: Address, tokenX: ByteVec, tokenY: ByteVec) -> (ByteVec, ByteVec) {
        let deposit = mapEntryDeposit!()
        let mut xId = #
        let mut yId = #
        let mut initX = false
        let mut initY = false
        let mut reservePath = #

        if (reserves.contains!(tokenX)) {
            xId = reserves[tokenX]
        } else {
            initX = true
            reservePath = tokenX
        }

        if (reserves.contains!(tokenY)) {
            yId = reserves[tokenY]
        } else {
            initY = true
            reservePath = tokenY
        }

        if (lastReserveId == reserveTemplateId) {
            let firstReserve = initReserve{caller -> ALPH: deposit}(caller, reservePath, 2)
            reserves.insert!(caller, tokenX, firstReserve)
            reserves.insert!(caller, tokenY, firstReserve)
            lastReserveId = firstReserve
            return firstReserve, firstReserve
        }
        
        let lastReserve = Reserve(lastReserveId)
        let lastReserveAssets = lastReserve.getAssetsCount()
        let canStoreTwoAssets = lastReserveAssets + 2 <= RESERVE_ASSET_CAPACITY
        let canStoreSingleAsset = lastReserveAssets + 1 <= RESERVE_ASSET_CAPACITY

        if (initX && initY) {
            if(canStoreTwoAssets) {
                xId = lastReserveId
                yId = lastReserveId
                lastReserve.incrementAssets(2)
            } else if(canStoreSingleAsset) {
                lastReserve.incrementAssets(1)
                xId = lastReserveId
                yId = initReserve{caller -> ALPH: deposit}(caller, reservePath, 1)
            } else {
                let id = initReserve{caller -> ALPH: deposit}(caller, reservePath, 2)
                xId = id
                yId = id
            }
            reserves.insert!(caller, tokenX, xId)
            reserves.insert!(caller, tokenY, yId)
        } else if (initX) {
            if(canStoreSingleAsset) {
                xId = lastReserveId
                lastReserve.incrementAssets(1)
            } else {
                xId = initReserve{caller -> ALPH: deposit}(caller, reservePath, 1)
            }
            reserves.insert!(caller, tokenX, xId)
        } else if (initY) {
            if(canStoreSingleAsset) {
                yId = lastReserveId
                lastReserve.incrementAssets(1)
            } else {
                yId = initReserve{caller -> ALPH: deposit}(caller, reservePath, 1)
            }
            reserves.insert!(caller, tokenY, yId)
        } else {
            // unreachable: reserves are initialized or assigned
        }

        return xId, yId
    }


    @using(updateFields = true, preapprovedAssets = true)
    fn initReserve(caller: Address, reservePath: ByteVec, assetsToStore: U256) -> ByteVec {
        let (encodedImmFields, encodedMutFields) = Reserve.encodeFields!(selfAddress!(), assetsToStore)
        let id = copyCreateSubContract!{caller -> ALPH: mapEntryDeposit!()}(
            reservePath,
            reserveTemplateId,
            encodedImmFields,
            encodedMutFields
        )
        lastReserveId = id
        return id
    }
}
// T1CHECK_END