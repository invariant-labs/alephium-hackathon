Abstract Contract Positions(clamm: CLAMM) extends PositionHelper(clamm) {
    @using(preapprovedAssets = true)
    fn wrappedAddPosition(
        caller: Address,
        payer: Address,
        position: Position
    ) -> () {
        let length = countPositions(caller) + 1
        let key = toByteVec!(caller) ++ toByteVec!(length)
        
        positions.insert!(payer, key, position)

        if (length == 1) {
            positionsCounter.insert!(payer, caller, length)
        } else {
            positionsCounter[caller] = length
        }
    }

    fn countPositions(caller: Address) -> U256 {
        if (positionsCounter.contains!(caller)) {
            return positionsCounter[caller]
        } else {
            return 0
        }
    }

    fn wrappedGetPosition(owner: Address, index: U256) -> (Bool, Position) {
        let key = toByteVec!(owner) ++ toByteVec!(index)
        if (positions.contains!(key)) {
            return true, positions[key]
        } else {   
            return false,
            Position {
                poolKey: PoolKey {
                    tokenX: addressToContractId!(nullContractAddress!()),
                    tokenY: addressToContractId!(nullContractAddress!()),
                    feeTier: FeeTier {
                        fee: 0,
                        tickSpacing: 0
                    }
                },
                liquidity: 0,
                lowerTickIndex: 0i,
                upperTickIndex: 0i,
                feeGrowthInsideX: 0,
                feeGrowthInsideY: 0,
                lastBlockNumber: 0,
                tokensOwedX: 0,
                tokensOwedY: 0,
                owner: nullContractAddress!()
            }
        } 
    }

    fn wrappedRemovePosition(caller: Address, index: U256) -> () {
        let length = countPositions(caller)
        let key = toByteVec!(caller) ++ toByteVec!(index)
        if (length == index) {
            positions.remove!(caller, key)
        } else {
            let lastKey = toByteVec!(caller) ++ toByteVec!(length)
            let lastPosition = positions[lastKey]
            positions[key] = lastPosition
            positions.remove!(caller, key)
        }
    }

    @using(preapprovedAssets = true)
    fn wrappedTransferPosition(caller: Address, index: U256, newOwner: Address) -> () {
        let key = toByteVec!(caller) ++ toByteVec!(index)
        let mut position = positions[key]
        position.owner = newOwner
        wrappedRemovePosition(caller, index)
        wrappedAddPosition{caller -> ALPH: mapEntryDeposit!() * 2}(newOwner, caller, position)
    }

}