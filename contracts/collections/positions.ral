Contract Positions(
    positionTemplateContractId: ByteVec,
    positionsCounterContractId: ByteVec,
    mut invariantId: Address,
    mut areAdminsSet: Bool
) {
    enum PositionsError {
        NotAdmin = 500
        AdminsAreSet = 501
        NotOwner = 502
        PositionNotExist = 503
    }

    @using(updateFields = true, checkExternalCaller = false)
    pub fn setAdmins(invariant: Address) -> () {
        assert!(!areAdminsSet, PositionsError.AdminsAreSet)
        invariantId = invariant
        PositionsCounter(positionsCounterContractId).setAdmins(selfAddress!())
        areAdminsSet = true
    }

    pub fn getAddress() -> Address {
        return selfAddress!()
    }

    @using(preapprovedAssets = true)
    pub fn add(
        originalCaller: Address,
        poolKey: ByteVec,
        liquidity: U256,
        lowerTickIndex: I256,
        upperTickIndex: I256,
        feeGrowthInsideX: U256,
        feeGrowthInsideY: U256,
        lastBlockNumber: U256,
        tokensOwedX: U256,
        tokensOwedY: U256,
        uints: Uints
    ) -> () {
        checkCaller!(callerAddress!() == invariantId && areAdminsSet, PositionsError.NotAdmin)
    
        let positionsCounter = PositionsCounter(positionsCounterContractId)
        let length = positionsCounter.get()
        positionsCounter.set(length + 1)

        let (encodedImmFields, encodedMutFields) = Position.encodeFields!(
            selfAddress!(),
            PositionState {
                poolKey: poolKey,
                liquidity: liquidity,
                lowerTickIndex: lowerTickIndex,
                upperTickIndex: upperTickIndex,
                feeGrowthInsideX: feeGrowthInsideX,
                feeGrowthInsideY: feeGrowthInsideY,
                lastBlockNumber: lastBlockNumber,
                tokensOwedX: tokensOwedX,
                tokensOwedY: tokensOwedY,
                owner: originalCaller
            },
            true,
            uints
        )
        let _ = copyCreateSubContract!{originalCaller -> ALPH: 1 alph}(
            toByteVec!(length + 1),
            positionTemplateContractId,
            encodedImmFields,
            encodedMutFields
        )
    }

    pub fn remove(index: U256) -> () {
        checkCaller!(callerAddress!() == invariantId && areAdminsSet, PositionsError.NotAdmin)

        let subContractId = subContractId!(toByteVec!(index))
        assert!(contractExists!(subContractId), PositionsError.PositionNotExist)
        let position = Position(subContractId)
        position.setIsActive(false)
    }

    pub fn transfer(index: U256, newOwner: Address) -> () {
        checkCaller!(callerAddress!() == invariantId && areAdminsSet, PositionsError.NotAdmin)

        let subContractId = subContractId!(toByteVec!(index))
        assert!(contractExists!(subContractId), PositionsError.PositionNotExist)
        let position = Position(subContractId)
        position.setOwner(newOwner)
    }

    pub fn getPoolKey(index: U256) -> ByteVec {
        return Position(subContractId!(toByteVec!(index))).getPoolKey()
    }

    pub fn getLowerTickIndex(index: U256) -> I256 {
        return Position(subContractId!(toByteVec!(index))).getLowerTickIndex()
    }

    pub fn getUpperTickIndex(index: U256) -> I256 {
        return Position(subContractId!(toByteVec!(index))).getUpperTickIndex()
    }

    pub fn getLiquidity(index: U256) -> U256 {
        return Position(subContractId!(toByteVec!(index))).getLiquidity()
    }

    pub fn getTokensOwedX(index: U256) -> U256 {
        return Position(subContractId!(toByteVec!(index))).getTokensOwedX()
    }

    pub fn getTokensOwedY(index: U256) -> U256 {
        return Position(subContractId!(toByteVec!(index))).getTokensOwedY()
    }

    pub fn getOwner(index: U256) -> Address {
        return Position(subContractId!(toByteVec!(index))).getOwner()
    }

    pub fn setTokensOwedX(index: U256, value: U256) -> () {
        checkCaller!(callerAddress!() == invariantId && areAdminsSet, PositionsError.NotAdmin)

        Position(subContractId!(toByteVec!(index))).setTokensOwedX(value)
    }

    pub fn setTokensOwedY(index: U256, value: U256) -> () {
        checkCaller!(callerAddress!() == invariantId && areAdminsSet, PositionsError.NotAdmin)
        
        Position(subContractId!(toByteVec!(index))).setTokensOwedY(value)
    }

    pub fn get(index: U256) -> (Bool, PositionState) {
        let subContractId = subContractId!(toByteVec!(index))
        
        if (!contractExists!(subContractId)) {
            return
            false,
            PositionState {
                poolKey: #,
                liquidity: 0,
                lowerTickIndex: 0i,
                upperTickIndex: 0i,
                feeGrowthInsideX: 0,
                feeGrowthInsideY: 0,
                lastBlockNumber: 0,
                tokensOwedX: 0,
                tokensOwedY: 0,
                owner: byteVecToAddress!(#)
            }
        } else {
            return true, Position(subContractId).get()
        }
    }

    pub fn wrappedUpdate(
        index: U256,
        sign: Bool,
        liquidityDelta: U256,
        feeGrowthInsideX: U256,
        feeGrowthInsideY: U256
    ) -> () {
        checkCaller!(callerAddress!() == invariantId && areAdminsSet, PositionsError.NotAdmin)

        Position(subContractId!(toByteVec!(index))).update(sign, liquidityDelta, feeGrowthInsideX, feeGrowthInsideY)
    }

    pub fn wrappedModify(
        originalCaller: Address,
        index: U256,
        pools: Pools,
        ticks: Ticks,
        clamm: CLAMM,
        poolKey: ByteVec,
        upperTick: I256,
        lowerTick: I256,
        liquidityDelta: U256,
        add: Bool,
        currentTimestamp: U256,
        tickSpacing: U256
    ) -> (U256, U256) {
        checkCaller!(callerAddress!() == invariantId && areAdminsSet, PositionsError.NotAdmin)
        
        let position = Position(subContractId!(toByteVec!(index)))
        assert!(originalCaller == position.getOwner(), PositionsError.NotOwner)

        pools.setLastTimestamp(poolKey, currentTimestamp)

        let maxLiquidityPerTick = clamm.calculateMaxLiquidityPerTick(tickSpacing)

        ticks.updateTick(poolKey, lowerTick, liquidityDelta, maxLiquidityPerTick, false, add)
        ticks.updateTick(poolKey, upperTick, liquidityDelta, maxLiquidityPerTick, true, add)

        let (lowerTickFeeGrowthOutsideX, lowerTickFeeGrowthOutsideY) = ticks.getFeeGrowthOutside(poolKey, lowerTick)
        let (upperTickFeeGrowthOutsideX, upperTickFeeGrowthOutsideY) = ticks.getFeeGrowthOutside(poolKey, upperTick)
        let poolCurrentTickIndex = pools.getCurrentTickIndex(poolKey)
        let (poolFeeGrowthGlobalX, poolFeeGrowthGlobalY) = pools.getFeeGrowthGlobal(poolKey)

        position.modify(
            clamm,
            upperTick,
            upperTickFeeGrowthOutsideX,
            upperTickFeeGrowthOutsideY,
            lowerTick,
            lowerTickFeeGrowthOutsideX,
            lowerTickFeeGrowthOutsideY,
            poolCurrentTickIndex,
            poolFeeGrowthGlobalX,
            poolFeeGrowthGlobalY,
            liquidityDelta,
            add
        )

        return pools.wrappedUpdateLiquidity(poolKey, liquidityDelta, add, upperTick, lowerTick)
    }

    @using(checkExternalCaller = false)
    pub fn removePosition(index: U256) -> () {
        checkCaller!(callerAddress!() == invariantId && areAdminsSet, PositionsError.NotAdmin)

        let subContractId = subContractId!(toByteVec!(index))
        assert!(contractExists!(subContractId), PositionsError.PositionNotExist)
        let position = Position(subContractId)
        position.remove()
    }
}