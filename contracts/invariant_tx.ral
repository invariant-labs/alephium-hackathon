TxScript AddFeeTier(invariant: Invariant, feeTier: FeeTier) {
    invariant.addFeeTier{callerAddress!() -> ALPH: mapEntryDeposit!()}(feeTier)
}

TxScript RemoveFeeTier(invariant: Invariant, feeTier: FeeTier) {
    invariant.removeFeeTier(feeTier)
}

TxScript CreatePool(invariant: Invariant, token0: ByteVec, token1: ByteVec, feeTier: FeeTier, initSqrtPrice: U256, initTick: I256){
    let mapEntry2Deposits = 2 * mapEntryDeposit!()
    invariant.createPool{callerAddress!() -> ALPH: mapEntry2Deposits }(token0, token1, feeTier, initSqrtPrice, initTick)
}

TxScript ChangeProtocolFee(invariant: Invariant, newFee: U256) {
    invariant.changeProtocolFee(newFee)
}

TxScript ChangeFeeReceiver(invariant: Invariant, poolKey: PoolKey, newFeeReceiver: Address) {
    invariant.changeFeeReceiver(poolKey,newFeeReceiver)
}

TxScript WithdrawProtocolFee(invariant: Invariant, poolKey: PoolKey) {
    invariant.withdrawProtocolFee(poolKey)
}

TxScript InitializeEmptyPosition(invariant: Invariant, poolKey: PoolKey, lowerTick: I256, upperTick: I256) {
    let mapEntry6Deposits = mapEntryDeposit!() * 6
    invariant.initializeEmptyPosition{callerAddress!() -> ALPH: mapEntry6Deposits}(poolKey, lowerTick, upperTick)
}

TxScript IncreasePositionLiquidity(
    invariant: Invariant,
    poolKey: PoolKey,
    approvedTokens0: U256,
    approvedTokens1: U256,
    index: U256,
    lowerTick: I256,
    upperTick: I256,
    liquidityDelta: U256,
    slippageLimitLower: U256,
    slippageLimitUpper: U256
) {
    invariant.increasePositionLiquidity{callerAddress!() -> poolKey.tokenX: approvedTokens0, poolKey.tokenY: approvedTokens1}
        (index, poolKey, lowerTick, upperTick, liquidityDelta, slippageLimitLower, slippageLimitUpper)
}

TxScript RemovePosition(invariant: Invariant, index: U256) {
    invariant.removePosition(index)
}

TxScript TransferPosition(invariant: Invariant, index: U256, recipient: Address) {
    invariant.transferPosition{callerAddress!() -> ALPH: 2 * mapEntryDeposit!()}(index, recipient)
}

TxScript ClaimFee(invariant: Invariant, index: U256) {
    invariant.claimFee(index)
}

TxScript Swap(invariant: Invariant, poolKey: PoolKey, xToY: Bool, amount: U256, byAmountIn: Bool, sqrtPriceLimit: U256) {
    if(xToY) {
        let _ = invariant.swap{callerAddress!() -> poolKey.tokenX: amount}(poolKey, xToY, amount, byAmountIn, sqrtPriceLimit)
    } else {
        let _ = invariant.swap{callerAddress!() -> poolKey.tokenY: amount}(poolKey, xToY, amount, byAmountIn, sqrtPriceLimit)
    }
}

TxScript Flip(invariant: Invariant, value: Bool, tick: I256, poolKey: PoolKey) {
    invariant.flip(value, tick, poolKey)    
}

TxScript InitializeChunk(invariant: Invariant, caller: Address, poolKey: PoolKey, chunk: U256) {
    invariant.initializeChunk{callerAddress!() -> ALPH: 1 alph}(caller, poolKey, chunk)
}