TxScript Init(invariant: Invariant) {
    invariant.init()
}

TxScript AddFeeTier(invariant: Invariant, fee: U256, tickSpacing: U256) {
    invariant.addFeeTier{callerAddress!() -> ALPH: 1 alph}(fee, tickSpacing)
}

TxScript RemoveFeeTier(invariant: Invariant, fee: U256, tickSpacing: U256) {
    invariant.removeFeeTier(fee, tickSpacing)
}

TxScript CreatePool(invariant: Invariant, token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256, initSqrtPrice: U256, initTick: I256){
    invariant.createPool{callerAddress!() -> ALPH: 2 alph}(token0, token1, fee, tickSpacing, initSqrtPrice, initTick)
}

TxScript ChangeProtocolFee(invariant: Invariant, newFee: U256) {
    invariant.changeProtocolFee(newFee)
}

TxScript ChangeFeeReceiver(invariant: Invariant, token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256, newFeeReceiver: Address) {
    invariant.changeFeeReceiver(token0, token1, fee, tickSpacing, newFeeReceiver)
}

TxScript InitializeEmptyPosition(invariant: Invariant, token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256, lowerTick: I256, upperTick: I256) {
    invariant.initializeEmptyPosition{callerAddress!() -> ALPH: 6 alph}(token0, token1, fee, tickSpacing, lowerTick, upperTick)
}

TxScript IncreasePositionLiquidity(
    invariant: Invariant,
    token0: ByteVec,
    token1: ByteVec,
    approvedTokens0: U256,
    approvedTokens1: U256,
    index: U256,
    fee: U256,
    tickSpacing: U256, 
    lowerTick: I256,
    upperTick: I256,
    liquidityDelta: U256,
    slippageLimitLower: U256,
    slippageLimitUpper: U256
) {
    invariant.increasePositionLiquidity{callerAddress!() -> token0: approvedTokens0, token1: approvedTokens1}
        (index, token0, token1, fee, tickSpacing, lowerTick, upperTick, liquidityDelta, slippageLimitLower, slippageLimitUpper)
}

TxScript RemovePosition(invariant: Invariant, index: U256) {
    invariant.removePosition(index)
}

TxScript ClaimFee(invariant: Invariant, index: U256) {
    invariant.claimFee(index)
}

TxScript Swap(invariant: Invariant, token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256, xToY: Bool, amount: U256, byAmountIn: Bool, sqrtPriceLimit: U256) {
    let poolKey = invariant.generatePoolKey(token0, token1, fee, tickSpacing)
    let (tokenX, tokenY) = invariant.extractTokensFromPoolKey(poolKey)
    if(xToY) {
        invariant.swap{callerAddress!() -> tokenX: amount}(token0, token1, fee, tickSpacing, xToY, amount, byAmountIn, sqrtPriceLimit)
    } else {
        invariant.swap{callerAddress!() -> tokenY: amount}(token0, token1, fee, tickSpacing, xToY, amount, byAmountIn, sqrtPriceLimit)
    }
}