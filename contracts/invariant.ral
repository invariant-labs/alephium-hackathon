Contract Invariant(
    admin: Address,
    protocolFee: U256,
    feeTierTemplateContractId: ByteVec,
    mut feeTierCount: U256,
    poolTemplateContractId: ByteVec,
    mut poolKeyCount: U256,
    tickTemplateContractId: ByteVec,
    mut tickCount: U256
) extends FeeTiers(feeTierTemplateContractId, feeTierCount), CLAMM(), PoolKey(), CollectionsPrefixes(), Ticks(tickTemplateContractId, tickCount)   { // , 
    pub fn getProtocolFee() -> U256 {
        return protocolFee
    }

    @using(updateFields = true, checkExternalCaller = false)
    pub fn createPool(token0: Address, token1: Address, fee: U256, tickSpacing: U256, initSqrtPrice: U256, initTick: I256) -> () {
        let caller = callerAddress!()
        let timestamp = blockTimeStamp!()
        assert!(feeTierExist(fee, tickSpacing), InvariantError.FeeTierNotFound)
    
        let poolKey = createPoolKey(token0, token1, fee, tickSpacing)
        poolKeyCount = poolKeyCount + 1

        if (initTick + toI256!(tickSpacing) > getMaxTick(tickSpacing)) {
            let maxTick = getMaxTick(tickSpacing)
            let maxSqrtPrice = sqrtPriceFromTick(maxTick)
            assert!(initSqrtPrice == maxSqrtPrice, InvariantError.InvalidInitTick)
        } else {
            let lowerBound = sqrtPriceFromTick(initTick)
            let upperBound = sqrtPriceFromTick(initTick + toI256!(tickSpacing))
            assert!(initSqrtPrice < lowerBound && initSqrtPrice >= upperBound, InvariantError.InvalidInitTick)
        }
        
        let poolContract = Pool(subContractId!(poolKey))
        assert!(!poolContract.getExist(), InvariantError.PoolAlreadyExist)   

        let (encodedImmFields, encodedMutFields) = Pool.encodeFields!(poolKey, 0, initSqrtPrice, initTick, 0, 0, 0, 0, timestamp, timestamp, caller, true)
        copyCreateSubContract!{caller -> ALPH: 1 alph}(
            poolKey,
            poolTemplateContractId,
            encodedImmFields,
            encodedMutFields
        )
    }

    @using(preapprovedAssets = true, checkExternalCaller = false)
    pub fn addFeeTier(fee: U256, tickSpacing: U256) -> () {
        let caller = callerAddress!()

        assert!(tickSpacing > 0 || tickSpacing <= 100, InvariantError.InvalidTickSpacing)
        assert!(fee <= 1000000000000, InvariantError.InvalidFee)
        assert!(caller == admin, InvariantError.NotAdmin)

        feeTiersAdd{caller -> ALPH: 1 alph}(caller, fee, tickSpacing)
    }

    @using(checkExternalCaller = false)
    pub fn removeFeeTier(fee: U256, tickSpacing: U256) -> () {
        assert!(callerAddress!() == admin, InvariantError.NotAdmin)

        feeTiersRemove(fee, tickSpacing)
    }

    pub fn feeTierExist(fee: U256, tickSpacing: U256) -> Bool {
        return feeTiersContains(fee, tickSpacing)
    }

    // TODO: remove if possible after implementing get fee tiers
    pub fn getFeeTierCount() -> U256 {
        let mut count = 0

        for (let mut index = 1; index <= feeTierCount; index = index + 1) {
            let contract = FeeTier(subContractId!(toByteVec!(InvariantCollection.FeeTiers) ++ toByteVec!(index)))

            if (contract.isActive()) {
                count = count + 1
            }
        }

        return count
    }

    // TODO: Should not be pub
    @using(checkExternalCaller = false)
    pub fn createTick(poolKey: ByteVec, tickSpacing: U256, index: I256, poolCurrentIndex: I256, poolFeeGrowthGlobalX: U256, poolFeeGrowthGlobalY: U256, poolStartTimestamp: U256) -> () {
        let currentTimestamp = blockTimeStamp!()
        let caller = callerAddress!()
        let belowCurrentTick = index <= poolCurrentIndex

        checkTick(index, tickSpacing)

        let mut feeGrowthOutsideX = 0
        let mut feeGrowthOutisdeY = 0
        let mut secondsOutside = 0
        if (belowCurrentTick) {
            feeGrowthOutsideX = poolFeeGrowthGlobalX
            feeGrowthOutisdeY = poolFeeGrowthGlobalY
            secondsOutside = currentTimestamp - poolStartTimestamp
        }

        tickAdd(caller, poolKey, index, true)

        // let tickKey = toByteVec!(InvariantCollection.Ticks) ++ poolKey ++ toByteVec!(index)
        // let (encodedImmFields, encodedMutFields) = Tick.encodeFields!(caller, index, true, 0, 0, sqrtPriceFromTick(index), feeGrowthOutsideX, feeGrowthOutisdeY, secondsOutside)
        // copyCreateSubContract!{caller -> ALPH: 1 alph}(
        //     tickKey,
        //     tickTemplateContractId,
        //     encodedImmFields,
        //     encodedMutFields
        // )
        // tickCount = tickCount + 1       
        // Flip bit in tickmap
    }

    // TODO: implement
    pub fn getFeeTiers() -> () {}
}
