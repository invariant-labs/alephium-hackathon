struct InvariantConfig { admin: Address, mut protocolFee: U256 }

struct SwapResult {
    nextSqrtPrice: U256,
    amountIn: U256,
    amountOut: U256,
    feeAmount: U256
}

struct CalculateSwapResult {
    amountIn: U256,
    amountOut: U256,
    startSqrtPrice: U256,
    targetSqrtPrice: U256,
    fee: U256
}

struct QuoteResult {
    amountIn: U256,
    amountOut: U256,
    targetSqrtPrice: U256
}

struct FeeTiers {
    mut feeTiers: [FeeTier; 32]
}

Contract Invariant(
    mut config: InvariantConfig,
    clamm: CLAMM,
    mut feeTiers: FeeTiers,
    reserveTemplateId: ByteVec,
    mut lastReserveId: ByteVec,
    mut feeTierCount: U256,
    mut poolKeyCount: U256
) extends PoolKeyHelper(), Decimal(), PoolKeys(), Pools(clamm), Ticks(), Tickmap(), Positions(clamm), FeeTierHelper(), Reserves() {
    // Key: poolKeyCount
    mapping[U256, PoolKey] poolKeys
    // Key: poolKey
    mapping[ByteVec, Pool] pools
    // Key: poolKey ++ index
    mapping[ByteVec, Tick] ticks
    // Key: poolKey ++ subcontract index
    mapping[ByteVec, TickmapBatch] bitmap
    // Key: owner ++ index
    mapping[ByteVec, Position] positions
    // Key: owner
    mapping[Address, U256] positionsCounter
    // Key: TokenId, Value: ReserveId
    mapping[ByteVec, ByteVec] reserves

    const MaxFeeTiers = 32
    
    enum InvariantError {
        NotAdmin = 0
        InsufficientLiquidity = 1
        InvalidTickSpacing = 2
        InvalidFee = 3
        FeeTierNotFound = 4
        TokensAreSame = 5
        PoolKeyAlreadyExist = 6
        TickAndSqrtPriceMismatch = 7
        NotFeeReceiver = 8
        InvalidTickLiquidity = 9
        ZeroLiquidity = 10
        PriceLimitReached = 11
        InvalidProtocolFee = 12
        // NotOwner = 13
        ZeroAmount = 14
        WrongPriceLimit = 15
        NoGainSwap = 16
        // PositionDoesNotExist = 17
        FeeTierAlreadyExist = 18
        PoolNotFound = 19
        PoolAlreadyExist = 20
        TickAlreadyExist = 21
        InvalidTickIndex = 22
        TickAndTickSpacingMismatch = 23
        TickLimitReached = 24
        ChunkNotFound = 25
        InvalidTickmapBit = 26
        PositionNotFound = 27
        FeeTierLimitReached = 28
    }
    
    pub fn getProtocolFee() -> U256 {
        return config.protocolFee
    }

    @using(updateFields = true)
    pub fn changeProtocolFee(newProtocolFee: U256) -> () {
        checkCaller!(callerAddress!() == config.admin, InvariantError.NotAdmin)
        assert!(newProtocolFee < one(PercentageScale), InvariantError.InvalidProtocolFee)
        config.protocolFee = newProtocolFee
    }

    pub fn withdrawProtocolFee(poolKey: PoolKey) -> () {
        let caller = callerAddress!()
        let (exist, mut pool) = wrappedGetPool(poolKey)
        assert!(exist, InvariantError.PoolNotFound)

        let feeReceiver = pool.feeReceiver

        checkCaller!(feeReceiver == caller, InvariantError.NotFeeReceiver)

        let x = pool.feeProtocolTokenX
        let y = pool.feeProtocolTokenY
        pool.feeProtocolTokenX = 0
        pool.feeProtocolTokenY = 0

        rewritePool(pool)

        if (pool.reserveX == pool.reserveY) {
            Reserve(pool.reserveX).withdrawTwoAssets(caller, pool.poolKey.tokenX, pool.poolKey.tokenY, x, y)
        } else {
            Reserve(pool.reserveX).withdrawSingleAsset(caller, pool.poolKey.tokenX, x)
            Reserve(pool.reserveY).withdrawSingleAsset(caller, pool.poolKey.tokenY, y)    
        }
    }

    pub fn changeFeeReceiver(poolKey: PoolKey, newFeeReceiver: Address) -> () {
        let caller = callerAddress!()

        checkCaller!(config.admin == caller, InvariantError.NotAdmin)

        let key = poolKeyBytes(poolKey)
        let mut pool = pools[key]

        pool.feeReceiver = newFeeReceiver
        pools[key] = pool
    }

    @using(preapprovedAssets = true, checkExternalCaller = false)
    pub fn createPool(token0: ByteVec, token1: ByteVec, feeTier: FeeTier, initSqrtPrice: U256, initTick: I256) -> () {
        assert!(feeTierExist(feeTier), InvariantError.FeeTierNotFound)

        clamm.checkTick(initTick, feeTier.tickSpacing)

        assert!(token0 != token1, InvariantError.TokensAreSame)

        assert!(clamm.checkTickToSqrtPriceRelationship(initTick, feeTier.tickSpacing, initSqrtPrice), InvariantError.TickAndSqrtPriceMismatch)

        let caller = callerAddress!()
        let timestamp = blockTimeStamp!()
        let mapEntryDeposit = mapEntryDeposit!()
        let poolKey = newPoolKey(token0, token1, feeTier)
        addPoolKey{caller -> ALPH: mapEntryDeposit}(caller, poolKey)
        addPool{caller -> ALPH: mapEntryDeposit * 4}(caller, poolKey, initSqrtPrice, initTick, timestamp, config.admin)
    }

    @using(preapprovedAssets = true, updateFields = true)
    pub fn addFeeTier(feeTier: FeeTier) -> () {
        let caller = callerAddress!()
        checkCaller!(caller == config.admin, InvariantError.NotAdmin)

        assert!(feeTierCount < MaxFeeTiers, InvariantError.FeeTierLimitReached)
        assert!(feeTier.tickSpacing > 0 && feeTier.tickSpacing <= 100, InvariantError.InvalidTickSpacing)
        assert!(feeTier.fee < one(PercentageScale), InvariantError.InvalidFee)
        assert!(!feeTierExist(feeTier), InvariantError.FeeTierAlreadyExist)
        
        feeTiers.feeTiers[feeTierCount] = feeTier
        feeTierCount = feeTierCount + 1
    }

    @using(updateFields = true)
    pub fn removeFeeTier(feeTier: FeeTier) -> () {
        let caller = callerAddress!()
        checkCaller!(caller == config.admin, InvariantError.NotAdmin)
        
        for(let mut i = 0; i < feeTierCount; i = i + 1) {
            if(feeTiers.feeTiers[i].fee == feeTier.fee && feeTiers.feeTiers[i].tickSpacing == feeTier.tickSpacing) {
                feeTiers.feeTiers[i] = feeTiers.feeTiers[feeTierCount - 1]
                feeTiers.feeTiers[feeTierCount - 1] = FeeTier{fee: 0, tickSpacing: 0}
                feeTierCount = feeTierCount - 1
                return
            }
        }
        assert!(false, InvariantError.FeeTierNotFound)
    }

    pub fn feeTierExist(feeTier: FeeTier) -> Bool {
        for(let mut i = 0; i < feeTierCount; i = i + 1) {
            if(feeTiers.feeTiers[i].fee == feeTier.fee && feeTiers.feeTiers[i].tickSpacing == feeTier.tickSpacing) {
                return true
            }
        }
        return false
    }

    pub fn getTick(poolKey: PoolKey, index: I256) -> (Bool, Tick) {
        return wrappedGetTick(poolKey, index)
    }

    pub fn getPool(poolKey: PoolKey) -> (Bool, Pool) {
        return wrappedGetPool(poolKey)
    }

    pub fn getPosition(owner: Address, index: U256) -> (Bool, Position) {  
        return wrappedGetPosition(owner, index)
    }

    pub fn isTickInitialized(poolKey: PoolKey, index: I256) -> Bool {
        return getBit(index, poolKey)    
    }

    @using(preapprovedAssets = true)
    fn createTick(
        caller: Address,
        poolKey: PoolKey,
        index: I256,
        currentTickIndex: I256,
        feeGrowthGlobalX: U256,
        feeGrowthGlobalY: U256,
        startTimestamp: U256
    ) -> () {
        clamm.checkTick(index, poolKey.feeTier.tickSpacing)

        let mut feeGrowthOutsideX = 0
        let mut feeGrowthOutsideY = 0
        let mut secondsOutside = 0

        if (index <= currentTickIndex) {
            feeGrowthOutsideX = feeGrowthGlobalX
            feeGrowthOutsideY = feeGrowthGlobalY
            secondsOutside = blockTimeStamp!() - startTimestamp
        }

        wrappedCreateTick{caller -> ALPH: mapEntryDeposit!()}(
            caller,
            poolKey,
            index,
            true,
            0,
            0,
            clamm.calculateSqrtPrice(index),
            feeGrowthOutsideX,
            feeGrowthOutsideY, 
            0
        )
    }

    @using(preapprovedAssets = true, checkExternalCaller = false)
    pub fn createPosition(
        poolKey: PoolKey,
        lowerTickIndex: I256,
        upperTickIndex: I256,
        liquidityDelta: U256,
        slippageLimitLower: U256,
        slippageLimitUpper: U256
    ) -> () {
        let (exist, pool) = wrappedGetPool(poolKey)
        assert!(exist, InvariantError.PoolNotFound)
        assert!(liquidityDelta != 0, InvariantError.ZeroLiquidity)
        assert!(lowerTickIndex != upperTickIndex, InvariantError.InvalidTickIndex)

        let currentTimestamp = blockTimeStamp!()
        let mapEntryDeposit = mapEntryDeposit!()
        let mapEntry2Deposits = mapEntryDeposit * 2
        let caller = callerAddress!()

        let (lowerChunk, upperChunk) = getChunks(lowerTickIndex, upperTickIndex, poolKey.feeTier.tickSpacing)

        if (lowerChunk == upperChunk) {
            initializeChunk{caller -> ALPH: mapEntryDeposit}(caller, poolKey, lowerChunk)
        } else {
            initializeChunk{caller -> ALPH: mapEntryDeposit}(caller, poolKey, lowerChunk)
            initializeChunk{caller -> ALPH: mapEntryDeposit}(caller, poolKey, upperChunk)
        }
        
        if (!containsTick(poolKey, lowerTickIndex)) {
            createTick{caller -> ALPH: mapEntry2Deposits}(caller, poolKey, lowerTickIndex, pool.currentTickIndex, pool.feeGrowthGlobalX, pool.feeGrowthGlobalY, pool.startTimestamp)
            flip(true, lowerTickIndex, poolKey)
        }

        if (!containsTick(poolKey, upperTickIndex)) {
            createTick{caller -> ALPH: mapEntry2Deposits}(caller, poolKey, upperTickIndex, pool.currentTickIndex, pool.feeGrowthGlobalX, pool.feeGrowthGlobalY, pool.startTimestamp)
            flip(true, upperTickIndex, poolKey)
        }

        assert!(pool.sqrtPrice >= slippageLimitLower && pool.sqrtPrice <= slippageLimitUpper, InvariantError.PriceLimitReached)

        let (_, lowerTick) = wrappedGetTick(poolKey, lowerTickIndex)
        let (_, upperTick) = wrappedGetTick(poolKey, upperTickIndex)

        let emptyPosition = Position {
          poolKey: poolKey,
          liquidity: 0,
          lowerTickIndex: lowerTickIndex,
          upperTickIndex: upperTickIndex,
          feeGrowthInsideX: 0,
          feeGrowthInsideY: 0,
          lastBlockNumber: currentTimestamp,
          tokensOwedX: 0,
          tokensOwedY: 0,
          owner: caller
        } 

        let (x, y, mPosition, _, _) = modify(emptyPosition, pool, lowerTick, upperTick, liquidityDelta, true, currentTimestamp)
        wrappedAddPosition{caller -> ALPH: mapEntry2Deposits}(caller, caller, mPosition)

        if (pool.reserveX == pool.reserveY) {
            Reserve(pool.reserveX).depositTwoAssets{caller -> pool.poolKey.tokenX: x, pool.poolKey.tokenY: y}(caller, pool.poolKey.tokenX, pool.poolKey.tokenY, x, y)
        } else {
            Reserve(pool.reserveX).depositSingleAsset{caller -> pool.poolKey.tokenX: x}(caller, pool.poolKey.tokenX, x)
            Reserve(pool.reserveY).depositSingleAsset{caller -> pool.poolKey.tokenY: y}(caller, pool.poolKey.tokenY, y)    
        }
    }
    @using(checkExternalCaller = false)
    pub fn removePosition(index: U256) -> () {
        let caller = callerAddress!()

        let (exist, position) = wrappedGetPosition(caller, index)
        assert!(exist, InvariantError.PositionNotFound)

        let poolKey = position.poolKey
        let (_, upperTick) = wrappedGetTick(poolKey, position.upperTickIndex)
        let (_, lowerTick) = wrappedGetTick(poolKey, position.lowerTickIndex)

        let (_, pool) = wrappedGetPool(poolKey)

        let (mut x, mut y, mPosition, isLowerEmpty, isUpperEmpty) = modify(position, pool, lowerTick, upperTick, position.liquidity, false, blockTimeStamp!())
        
        x = x + mPosition.tokensOwedX
        y = y + mPosition.tokensOwedY

        if (isLowerEmpty) {
            removeTick(caller, poolKey, position.lowerTickIndex)
            flip(false, position.lowerTickIndex, poolKey)
        }
        if (isUpperEmpty) {
            removeTick(caller, poolKey, position.upperTickIndex)
            flip(false, position.upperTickIndex, poolKey)
        } 

        if (pool.reserveX == pool.reserveY) {
            Reserve(pool.reserveX).withdrawTwoAssets(caller, pool.poolKey.tokenX, pool.poolKey.tokenY, x, y)
        } else {
            Reserve(pool.reserveX).withdrawSingleAsset(caller, pool.poolKey.tokenX, x)
            Reserve(pool.reserveY).withdrawSingleAsset(caller, pool.poolKey.tokenY, y)    
        }       

        wrappedRemovePosition(caller, index)
    }

    @using(preapprovedAssets = true, checkExternalCaller = false)
    pub fn transferPosition(index: U256, newOwner: Address) -> () {
        let caller = callerAddress!()
        assert!(index < positionCount(caller), InvariantError.PositionNotFound)

        wrappedTransferPosition{caller -> ALPH: 2 * mapEntryDeposit!()}(caller, index, newOwner)
    }

    @using(checkExternalCaller = false)
    pub fn quote(
        poolKey: PoolKey,
        xToY: Bool,
        amount: U256,
        byAmountIn: Bool,
        sqrtPriceLimit: U256
    ) -> QuoteResult {
        let calculateSwapResult = calculateSwap(poolKey, xToY, amount, byAmountIn, sqrtPriceLimit)

        return QuoteResult { 
            amountIn: calculateSwapResult.amountIn,
            amountOut: calculateSwapResult.amountOut,
            targetSqrtPrice: calculateSwapResult.targetSqrtPrice
        }
    }

    fn calculateSwap(
        poolKey: PoolKey,
        xToY: Bool,
        amount: U256,
        byAmountIn: Bool,
        sqrtPriceLimit: U256
    ) -> CalculateSwapResult {
        assert!(amount != 0, InvariantError.ZeroAmount)
        let (exist, mut pool) = wrappedGetPool(poolKey)
        assert!(exist, InvariantError.PoolNotFound)
        
        let mut sqrtPrice = pool.sqrtPrice
        let tickSpacing = poolKey.feeTier.tickSpacing

        if (xToY) {
            assert!(sqrtPrice > sqrtPriceLimit && sqrtPriceLimit <= MaxSqrtPrice, InvariantError.WrongPriceLimit)             
        } else {
            assert!(sqrtPrice < sqrtPriceLimit && sqrtPriceLimit >= MinSqrtPrice, InvariantError.WrongPriceLimit)
        }

        let tickLimit = if (xToY) getMinTick(tickSpacing) else getMaxTick(tickSpacing)

        let mut totalAmountIn = 0
        let mut totalAmountOut = 0
        let mut eventFeeAmount = 0
        let mut remainingAmount = amount
        let eventStartSqrtPrice = sqrtPrice

        while (remainingAmount != 0) {
            let currentTickIndex = pool.currentTickIndex
            let liquidity = pool.liquidity
            sqrtPrice = pool.sqrtPrice

            let (swapLimit, hasLimitingTick, limitingTickIndex, isInitialized) = getCloserLimit(
                sqrtPriceLimit,
                xToY,
                currentTickIndex,
                tickSpacing,
                poolKey
            )

            let swapResult = clamm.computeSwapStep(
                sqrtPrice,
                swapLimit,
                liquidity,
                remainingAmount,
                byAmountIn,
                poolKey.feeTier.fee
            )

            if (byAmountIn) {
                remainingAmount = remainingAmount - (swapResult.amountIn + swapResult.feeAmount)
            } else {
                remainingAmount = remainingAmount - swapResult.amountOut
            }

            pool = addFee(pool, swapResult.feeAmount, xToY, config.protocolFee)
            pool.sqrtPrice = swapResult.nextSqrtPrice

            totalAmountIn = totalAmountIn + swapResult.amountIn + swapResult.feeAmount
            totalAmountOut = totalAmountOut + swapResult.amountOut
            eventFeeAmount = eventFeeAmount + swapResult.feeAmount

            assert!(swapResult.nextSqrtPrice != sqrtPriceLimit || remainingAmount == 0, InvariantError.PriceLimitReached)

            let (amountToAdd, amountAfterTickUpdate, _, uPool) = poolUpdateTick(pool, swapResult.nextSqrtPrice, swapLimit, remainingAmount, byAmountIn, xToY, config.protocolFee, hasLimitingTick, isInitialized, limitingTickIndex)

            remainingAmount = amountAfterTickUpdate
            totalAmountIn = totalAmountIn + amountToAdd
            pool = uPool
            let reachedTickLimit = if (xToY) pool.currentTickIndex <= tickLimit else pool.currentTickIndex >= tickLimit

            assert!(!reachedTickLimit, InvariantError.TickLimitReached)
        }

        pool.lastTimestamp = blockTimeStamp!()
        let key = poolKeyBytes(poolKey)
        pools[key] = pool

        assert!(totalAmountOut != 0, InvariantError.NoGainSwap)
        
        return CalculateSwapResult {
            amountIn: totalAmountIn,
            amountOut: totalAmountOut,
            startSqrtPrice: eventStartSqrtPrice,
            targetSqrtPrice: pool.sqrtPrice,
            fee: eventFeeAmount
        }
    }

    @using(preapprovedAssets = true, checkExternalCaller = false)
    pub fn swap(
        poolKey: PoolKey,
        xToY: Bool,
        amount: U256,
        byAmountIn: Bool,
        sqrtPriceLimit: U256
    ) -> CalculateSwapResult {
        let caller = callerAddress!()
        let calculateSwapResult = calculateSwap(poolKey, xToY, amount, byAmountIn, sqrtPriceLimit)

        let (_, pool) = wrappedGetPool(poolKey)
        let tokenX = pool.poolKey.tokenX
        let tokenY = pool.poolKey.tokenY

        if (xToY) {
            if (pool.reserveX == pool.reserveY) {
                Reserve(pool.reserveX).swap{caller -> tokenX: calculateSwapResult.amountIn}(caller, tokenX, tokenY, calculateSwapResult.amountIn, calculateSwapResult.amountOut)
            } else {
                Reserve(pool.reserveX).depositSingleAsset{caller -> tokenX: calculateSwapResult.amountIn}(caller, tokenX, calculateSwapResult.amountIn)
                Reserve(pool.reserveY).withdrawSingleAsset(caller, tokenY, calculateSwapResult.amountOut)    
            }
        } else {
            if (pool.reserveX == pool.reserveY) {
                Reserve(pool.reserveX).swap{caller -> tokenY: calculateSwapResult.amountIn}(caller, tokenY, tokenX, calculateSwapResult.amountIn, calculateSwapResult.amountOut)
            } else {
                Reserve(pool.reserveX).depositSingleAsset{caller -> tokenY: calculateSwapResult.amountIn}(caller, tokenY, calculateSwapResult.amountIn)
                Reserve(pool.reserveY).withdrawSingleAsset(caller, tokenX, calculateSwapResult.amountOut)    
            }
        }

        return calculateSwapResult
    }
    
    // caller is checked in `wrappedGetPosition`
    @using(checkExternalCaller = false)
    pub fn claimFee(index: U256) -> () {
        let caller = callerAddress!()
        let key = toByteVec!(caller) ++ toByteVec!(index)
        let (exist, position) = wrappedGetPosition(caller, index)
        assert!(exist, InvariantError.PositionNotFound)
    
        let poolKey = position.poolKey
        let (_, pool) = wrappedGetPool(poolKey)
        let (_, upperTick) = wrappedGetTick(poolKey, position.upperTickIndex)
        let (_, lowerTick) = wrappedGetTick(poolKey, position.lowerTickIndex)

        let (_, _, mut mPosition, _, _) = modify(position, pool, lowerTick, upperTick, 0, false, blockTimeStamp!())
        
        let tokensOwedX = mPosition.tokensOwedX
        let tokensOwedY = mPosition.tokensOwedY

        mPosition.tokensOwedX = 0
        mPosition.tokensOwedY = 0

        positions[key] = mPosition

        if (pool.reserveX == pool.reserveY) {
            Reserve(pool.reserveX).withdrawTwoAssets(caller, pool.poolKey.tokenX, pool.poolKey.tokenY, tokensOwedX, tokensOwedY)
        } else {
            Reserve(pool.reserveX).withdrawSingleAsset(caller, pool.poolKey.tokenX, tokensOwedX)
            Reserve(pool.reserveY).withdrawSingleAsset(caller, pool.poolKey.tokenY, tokensOwedY)    
        }
    }

    fn getSingleBatch(poolKey: PoolKey, index: U256) -> ByteVec {
        let mut batch = #
        let key = poolKeyBytes(poolKey) ++ toByteVec!(index)
        if (bitmap.contains!(key)) {
            let tickmapBatch = bitmap[key]
            for (let mut i = 0; i < ChunksPerBatch; i = i + 1) {
                let offset = index * ChunksPerBatch + i
                batch = batch ++ toByteVec!(offset) ++ b`break` ++ toByteVec!(tickmapBatch.chunks[i]) ++ b`break`
            }
        }
        return batch
    }


    pub fn getTickmapSlice(poolKey: PoolKey, lowerBatch: U256, upperBatch: U256, xToY: Bool) -> ByteVec {
        let mut slice = #
        if (xToY) {
            for(let mut batchIndex = lowerBatch; batchIndex < upperBatch; batchIndex = batchIndex + 1) {
                slice = slice ++ getSingleBatch(poolKey, batchIndex)
            }
        } else {
            for(batchIndex = upperBatch; batchIndex >= lowerBatch; batchIndex = batchIndex - 1) {
                slice = slice ++ getSingleBatch(poolKey, batchIndex)
            }
        }
        return slice
    }
    
    pub fn getAllPoolsForPair(token0: ByteVec, token1: ByteVec) -> ByteVec {
        let mut matchingPools = b``

        for(let mut i = 0; i < feeTierCount; i = i + 1) {
            let poolKey = newPoolKey(token0, token1, feeTiers.feeTiers[i])
            let (exist, pool) = getPool(poolKey)
            if(exist) {
                matchingPools = matchingPools
                ++ poolKey.tokenX ++ b`break`
                ++ poolKey.tokenY ++ b`break`
                ++ toByteVec!(poolKey.feeTier.fee) ++ b`break`
                ++ toByteVec!(poolKey.feeTier.tickSpacing) ++ b`break` 
                ++ toByteVec!(pool.liquidity) ++ b`break`
                ++ toByteVec!(pool.sqrtPrice) ++ b`break`
                ++ toByteVec!(pool.currentTickIndex) ++ b`break`
                ++ toByteVec!(pool.feeGrowthGlobalX) ++ b`break`
                ++ toByteVec!(pool.feeGrowthGlobalY) ++ b`break`
                ++ toByteVec!(pool.feeProtocolTokenX) ++ b`break`
                ++ toByteVec!(pool.feeProtocolTokenY) ++ b`break` 
                ++ toByteVec!(pool.startTimestamp) ++ b`break`
                ++ toByteVec!(pool.lastTimestamp) ++ b`break`
                ++ toByteVec!(pool.feeReceiver) ++ b`break` 
                ++ pool.reserveX ++ b`break` 
                ++ pool.reserveY ++ b`break`
            }
        }

        return matchingPools        
    }

    pub fn getPoolKeys(size: U256, offset: U256) -> (ByteVec, U256) {
        let mut slice = #
        let offsetEnd = offset + size
        let sliceEnd = if (offsetEnd > poolKeyCount) poolKeyCount else offsetEnd
        for(let mut i = offset + 1; i <= sliceEnd; i = i + 1) {
            let poolKey = poolKeys[i]
            slice = slice ++ poolKey.tokenX ++ b`break` ++ poolKey.tokenY ++ b`break` ++ toByteVec!(poolKey.feeTier.fee) ++ b`break` ++ toByteVec!(poolKey.feeTier.tickSpacing) ++ b`break`
        }
        return slice, poolKeyCount
    }
}
