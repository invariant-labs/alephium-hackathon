struct InvariantConfig { admin: Address, mut protocolFee: U256 }

Contract Invariant(
    mut init: Bool,
    mut config: InvariantConfig,
    feeTiers: FeeTiers,
    poolKeys: PoolKeys, 
    pools: Pools, 
    ticks: Ticks, 
    positions: Positions,
    tickmap: Tickmap,
    swap: SwapUtils,
    clamm: CLAMM
) extends PoolKeyHelper(), Decimal() {
    enum InvariantError {
        NotAdmin = 0
        AlreadyInitialized = 1
        NotInitialized = 2
        InvalidTickSpacing = 3
        InvalidFee = 4
        FeeTierNotFound = 5
        TokensAreSame = 6
        PoolKeyAlreadyExist = 7
        TickAndSqrtPriceMismatch = 8
        NotFeeReceiver = 9
        ZeroLiquidity = 10
        PriceLimitReached = 11
        InvalidProtocolFee = 12
        NotOwner = 13
    }

    @using(preapprovedAssets = false, updateFields = true)
    pub fn init() -> () {
        checkCaller!(callerAddress!() == config.admin, InvariantError.NotAdmin)
        assert!(!init, InvariantError.AlreadyInitialized)
        let invtId = selfAddress!()
        let positionsId = positions.getAddress()
        let swapId = swap.getSelfId()

        feeTiers.setAdmins(invtId)
        poolKeys.setAdmins(invtId)
        pools.setAdmins(invtId, positionsId, swapId)
        positions.setAdmins(invtId)
        tickmap.setAdmins(invtId, swapId)
        ticks.setAdmins(invtId, positionsId, swapId)
        
        init = true
    }
    
    pub fn getProtocolFee() -> U256 {
        return config.protocolFee
    }

    @using(updateFields = true)
    pub fn changeProtocolFee(newProtocolFee: U256) -> () {
        checkCaller!(callerAddress!() == config.admin, InvariantError.NotAdmin)
        assert!(newProtocolFee < one(PercentageScale), InvariantError.InvalidProtocolFee)
        config.protocolFee = newProtocolFee
    }

    @using(assetsInContract = true)
    pub fn withdrawProtocolFee(token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256) -> () {
        let caller = callerAddress!()
        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)
        let feeReceiver = pools.getFeeReceiver(poolKey)

        checkCaller!(feeReceiver == caller, InvariantError.NotFeeReceiver)

        let (feeProtocolTokenX, feeProtocolTokenY) = pools.wrappedWithdrawProtocolFee(poolKey)

        let (tokenX, tokenY) = pools.getToken(poolKey)

        transferTokenFromSelf!(caller, tokenX, feeProtocolTokenX)
        transferTokenFromSelf!(caller, tokenY, feeProtocolTokenY)
    }

    pub fn changeFeeReceiver(token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256, newFeeReceiver: Address) -> () {
        let caller = callerAddress!()
        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)

        checkCaller!(config.admin == caller, InvariantError.NotAdmin)

        pools.setFeeReceiver(poolKey, newFeeReceiver)
    }

    @using(preapprovedAssets = true, checkExternalCaller = false)
    pub fn createPool(token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256, initSqrtPrice: U256, initTick: I256) -> () {
        assert!(init, InvariantError.NotInitialized)

        let feeTierExist = feeTiers.contains(fee, tickSpacing)
        assert!(feeTierExist, InvariantError.FeeTierNotFound)

        clamm.checkTick(initTick, tickSpacing)

        assert!(token0 != token1, InvariantError.TokensAreSame)

        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)
        let (tokenX, tokenY) = extractTokensFromPoolKey(poolKey)
        
        let poolKeyExist = poolKeys.contains(tokenX, tokenY, fee, tickSpacing)
        assert!(!poolKeyExist, InvariantError.PoolKeyAlreadyExist)

        assert!(clamm.checkTickToSqrtPriceRelationship(initTick, tickSpacing, initSqrtPrice), InvariantError.TickAndSqrtPriceMismatch)

        let caller = callerAddress!()
        let timestamp = blockTimeStamp!()
        poolKeys.add{caller -> ALPH: 1 alph}(caller, tokenX, tokenY, fee, tickSpacing)
        pools.add{caller -> ALPH: 1 alph}(caller, poolKey, tokenX, tokenY, tickSpacing, initSqrtPrice, initTick, timestamp, config.admin)
    }

    @using(preapprovedAssets = true)
    pub fn addFeeTier(fee: U256, tickSpacing: U256) -> () {
        assert!(init, InvariantError.NotInitialized)
        let caller = callerAddress!()
        checkCaller!(caller == config.admin, InvariantError.NotAdmin)

        assert!(tickSpacing > 0 || tickSpacing <= 100, InvariantError.InvalidTickSpacing)
        assert!(fee <= one(PercentageScale), InvariantError.InvalidFee)

        feeTiers.add{caller -> ALPH: 1 alph}(caller, fee, tickSpacing)
    }

    pub fn removeFeeTier(fee: U256, tickSpacing: U256) -> () {
        assert!(init, InvariantError.NotInitialized)
        checkCaller!(callerAddress!() == config.admin, InvariantError.NotAdmin)

        feeTiers.remove(fee, tickSpacing)
    }

    pub fn feeTierExist(fee: U256, tickSpacing: U256) -> Bool {
        return feeTiers.contains(fee, tickSpacing)
    }

    pub fn getFeeTiers() -> ByteVec {
        return feeTiers.getAll()
    }

    pub fn getPools() -> ByteVec {
        return poolKeys.getAll()
    }

    pub fn getTick(token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256, index: I256) -> (Bool, TickState) {
        return ticks.get(generatePoolKey(token0, token1, fee, tickSpacing), index)
    }

    pub fn getPool(token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256) -> (Bool, PoolState) {
        return pools.get(generatePoolKey(token0, token1, fee, tickSpacing))
    }

    pub fn getPosition(index: U256) -> (Bool, U256, I256, I256, U256, U256, U256, U256, U256, Address) {
        return positions.get(index)
    }

    pub fn isTickInitialized(token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256, index: I256) -> Bool {
        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)

        return tickmap.get(index, tickSpacing, poolKey)
    }

    @using(preapprovedAssets = true)
    fn createTick(
        caller: Address,
        poolKey: ByteVec,
        tickSpacing: U256,
        index: I256,
        currentTickIndex: I256,
        feeGrowthGlobalX: U256,
        feeGrowthGlobalY: U256,
        startTimestamp: U256
    ) -> () {
        clamm.checkTick(index, tickSpacing)

        let mut feeGrowthOutsideX = 0
        let mut feeGrowthOutsideY = 0
        let mut secondsOutside = 0

        if (index <= currentTickIndex) {
            feeGrowthOutsideX = feeGrowthGlobalX
            feeGrowthOutsideY = feeGrowthGlobalY
            secondsOutside = blockTimeStamp!() - startTimestamp
        }

        ticks.add{caller -> ALPH: 1 alph}(
            caller,
            poolKey,
            index,
            true,
            0,
            0,
            clamm.calculateSqrtPrice(index),
            feeGrowthOutsideX,
            feeGrowthOutsideY, 
            0
        )
    }

    @using(preapprovedAssets = true, checkExternalCaller = false)
    pub fn initializeEmptyPosition(
        token0: ByteVec,
        token1: ByteVec,
        fee: U256,
        tickSpacing: U256,
        lowerTick: I256,
        upperTick: I256
    ) -> () {
        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)

        let currentTickindex = pools.getCurrentTickIndex(poolKey)
        let (feeGrowthGlobalX, feeGrowthGlobalY) = pools.getFeeGrowthGlobal(poolKey)
        let startTimestamp = pools.getStartTimestamp(poolKey)

        let caller = callerAddress!()

        let (lowerChunk, upperChunk) = tickmap.getChunks(lowerTick, upperTick, tickSpacing)

        if (lowerChunk == upperChunk) {
            tickmap.initializeChunk{caller -> ALPH: 1 alph}(caller, poolKey, lowerChunk)
        } else {
            tickmap.initializeChunk{caller -> ALPH: 1 alph}(caller, poolKey, lowerChunk)
            tickmap.initializeChunk{caller -> ALPH: 1 alph}(caller, poolKey, upperChunk)
        }
 
        if(!ticks.contains(poolKey, lowerTick)) {
            createTick{caller -> ALPH: 2 alph}(caller, poolKey, tickSpacing, lowerTick, currentTickindex, feeGrowthGlobalX, feeGrowthGlobalY, startTimestamp)
        }

        if(!ticks.contains(poolKey, upperTick)) {
            createTick{caller -> ALPH: 2 alph}(caller, poolKey, tickSpacing, upperTick, currentTickindex, feeGrowthGlobalX, feeGrowthGlobalY, startTimestamp)
        }

        positions.add{caller -> ALPH: 2 alph}(caller, poolKey, 0, lowerTick, upperTick, 0, 0, blockTimeStamp!(), 0, 0)
    }

    @using(preapprovedAssets = true, assetsInContract = true, checkExternalCaller = false)
    pub fn increasePositionLiquidity(
        index: U256,
        token0: ByteVec,
        token1: ByteVec,
        fee: U256,
        tickSpacing: U256,
        lowerTick: I256,
        upperTick: I256,
        liquidityDelta: U256,
        slippageLimitLower: U256,
        slippageLimitUpper: U256
    ) -> () {
        let currentTimestamp = blockTimeStamp!()

        assert!(liquidityDelta != 0, InvariantError.ZeroLiquidity)

        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)

        if(isTickInitialized(token0, token1, fee, tickSpacing, lowerTick) == false) {
            tickmap.flip(true, lowerTick, tickSpacing, poolKey)
        }
        
        if(isTickInitialized(token0, token1, fee, tickSpacing, upperTick) == false) {
            tickmap.flip(true, upperTick, tickSpacing, poolKey)
        }

        let poolSqrtPrice = pools.getSqrtPrice(poolKey)

        assert!(poolSqrtPrice >= slippageLimitLower && poolSqrtPrice <= slippageLimitUpper, InvariantError.PriceLimitReached)

        let (x, y) = positions.wrappedModify(callerAddress!(), index, pools, ticks, clamm,  poolKey, upperTick, lowerTick, liquidityDelta, true, currentTimestamp, tickSpacing)

        let (tokenX, tokenY) = pools.getToken(poolKey)

        transferTokenToSelf!(callerAddress!(), tokenX, x)
        transferTokenToSelf!(callerAddress!(), tokenY, y)
    }

    @using(assetsInContract = true, checkExternalCaller = false)
    pub fn removePosition(index: U256) -> () {
        let caller = callerAddress!()

        let owner = positions.getOwner(index)
        assert!(caller == owner, InvariantError.NotOwner)

        let poolKey = positions.getPoolKey(index)
        let upperTick = positions.getUpperTickIndex(index)
        let lowerTick = positions.getLowerTickIndex(index)
        let liquidity = positions.getLiquidity(index)

        let tickSpacing = pools.getTickSpacing(poolKey)

        let (mut x, mut y) = positions.wrappedModify(callerAddress!(), index, pools, ticks, clamm,  poolKey, upperTick, lowerTick, liquidity, false, blockTimeStamp!(), tickSpacing)

        let (tokenX, tokenY) = pools.getToken(poolKey)
        let tokensOwedX = positions.getTokensOwedX(index)
        let tokensOwedY = positions.getTokensOwedY(index)

        positions.remove(index)

        x = x + tokensOwedX
        y = y + tokensOwedY

        transferTokenFromSelf!(caller, tokenX, x)
        transferTokenFromSelf!(caller, tokenY, y)
    }

    @using(checkExternalCaller = false)
    pub fn transferPosition(index: U256, newOwner: Address) -> () {
        let caller = callerAddress!()

        let owner = positions.getOwner(index)
        assert!(caller == owner, InvariantError.NotOwner)

        positions.transfer(index, newOwner)
    }

    @using(checkExternalCaller = false)
    pub fn quote(
        token0: ByteVec,
        token1: ByteVec,
        fee: U256,
        tickSpacing: U256,
        xToY: Bool,
        amount: U256,
        byAmountIn: Bool,
        sqrtPriceLimit: U256
    ) -> (U256, U256, U256) {
        return swap.wrappedQuote(token0, token1, fee, tickSpacing, xToY, amount, byAmountIn, sqrtPriceLimit)
    }

    @using(assetsInContract = true, preapprovedAssets = true, checkExternalCaller = false)
    pub fn swap(
        token0: ByteVec,
        token1: ByteVec,
        fee: U256,
        tickSpacing: U256,
        xToY: Bool,
        amount: U256,
        byAmountIn: Bool,
        sqrtPriceLimit: U256
    ) -> (U256, U256, U256, U256, U256) {
        let caller = callerAddress!()
        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)

        let (amountIn, amountOut, startingSqrtPrice, targetSqrtPrice, feeAmount) = swap.wrappedSwap(token0, token1, fee, tickSpacing, xToY, amount, byAmountIn, sqrtPriceLimit)

        let (tokenX, tokenY) = pools.getToken(poolKey)

        if (xToY) {
            transferTokenToSelf!(caller, tokenX, amountIn)
            transferTokenFromSelf!(caller, tokenY, amountOut)
        } else {
            transferTokenFromSelf!(caller, tokenX, amountOut)
            transferTokenToSelf!(caller, tokenY, amountIn)
        }

        return amountIn, amountOut, startingSqrtPrice, targetSqrtPrice, feeAmount
    }
    
    @using(assetsInContract = true, checkExternalCaller = false)
    pub fn claimFee(index: U256) -> () {
        let caller = callerAddress!()

        let poolKey = positions.getPoolKey(index)
        let upperTick = positions.getUpperTickIndex(index)
        let lowerTick = positions.getLowerTickIndex(index)
        let tickSpacing = pools.getTickSpacing(poolKey)

        let (_, _) = positions.wrappedModify(callerAddress!(), index, pools, ticks, clamm,  poolKey, upperTick, lowerTick, 0, false, blockTimeStamp!(), tickSpacing)
        
        let tokensOwedX = positions.getTokensOwedX(index)
        let tokensOwedY = positions.getTokensOwedY(index)

        positions.setTokensOwedX(index, 0)
        positions.setTokensOwedY(index, 0)

        let (tokenX, tokenY) = pools.getToken(poolKey)

        transferTokenFromSelf!(caller, tokenX, tokensOwedX)
        transferTokenFromSelf!(caller, tokenY, tokensOwedY)
    }
}
