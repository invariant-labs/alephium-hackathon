struct InvariantConfig { admin: Address, mut protocolFee: U256 }

struct SwapResult {
    nextSqrtPrice: U256,
    amountIn: U256,
    amountOut: U256,
    feeAmount: U256
}

struct CalculateSwapResult {
    amountIn: U256,
    amountOut: U256,
    startSqrtPrice: U256,
    targetSqrtPrice: U256,
    fee: U256
}

struct QuoteResult {
    amountIn: U256,
    amountOut: U256,
    targetSqrtPrice: U256
}

Contract Invariant(
    mut config: InvariantConfig,
    clamm: CLAMM,
    mut feeTierCount: U256,
    mut poolKeyCount: U256
) extends PoolKeyHelper(), Decimal(), FeeTiers(), PoolKeys(), Pools(clamm), Ticks(), Tickmap(), Positions(clamm) {
    // Key: feeTierCount
    mapping[U256, FeeTier] feeTiers
    // Key: poolKeyCount
    mapping[U256, PoolKey] poolKeys
    // Key: poolKey
    mapping[ByteVec, Pool] pools
    // Key: poolKey ++ index
    mapping[ByteVec, Tick] ticks
    // Key: poolKey ++ chunk index
    mapping[ByteVec, U256] bitmap
    // Key: owner ++ index
    mapping[ByteVec, Position] positions
    // Key: owner
    mapping[ByteVec, U256] positionsCounter
    

    enum InvariantError {
        NotAdmin = 0
        InsufficientLiquidity = 1
        InvalidTickSpacing = 2
        InvalidFee = 3
        FeeTierNotFound = 4
        TokensAreSame = 5
        PoolKeyAlreadyExist = 6
        TickAndSqrtPriceMismatch = 7
        NotFeeReceiver = 8
        InvalidTickLiquidity = 9
        ZeroLiquidity = 10
        PriceLimitReached = 11
        InvalidProtocolFee = 12
        NotOwner = 13
        ZeroAmount = 14
        WrongLimit = 15
        NoGainSwap = 16
        PositionDoesNotExist = 17
        FeeTierAlreadyExist = 18
        PoolDoesNotExist = 19
        PoolAlreadyExist = 20
        TickAlreadyExist = 21
        InvalidTickIndex = 22
        TickAndTickSpacingMismatch = 23
        LimitReached = 24
        ChunkNotFound = 25
        TickInitialized = 26
        PositionNotFound = 27
        EmptyPositionPokes = 28
    }
    
    pub fn getProtocolFee() -> U256 {
        return config.protocolFee
    }

    @using(updateFields = true)
    pub fn changeProtocolFee(newProtocolFee: U256) -> () {
        checkCaller!(callerAddress!() == config.admin, InvariantError.NotAdmin)
        assert!(newProtocolFee < one(PercentageScale), InvariantError.InvalidProtocolFee)
        config.protocolFee = newProtocolFee
    }

    @using(assetsInContract = true)
    pub fn withdrawProtocolFee(token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256) -> () {
        let caller = callerAddress!()
        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)
        let (exist, pool) = wrappedGetPool(poolKey)
        assert!(exist, InvariantError.PoolDoesNotExist)

        let feeReceiver = pool.feeReceiver

        checkCaller!(feeReceiver == caller, InvariantError.NotFeeReceiver)

        let (feeProtocolTokenX, feeProtocolTokenY) = wrappedGetProtocolFee(poolKey)

        transferTokenFromSelf!(caller, pool.tokenX, feeProtocolTokenX)
        transferTokenFromSelf!(caller, pool.tokenY, feeProtocolTokenY)
    }

    pub fn changeFeeReceiver(token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256, newFeeReceiver: Address) -> () {
        let caller = callerAddress!()
        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)

        checkCaller!(config.admin == caller, InvariantError.NotAdmin)

        setFeeReceiver(poolKey, newFeeReceiver)
    }

    @using(preapprovedAssets = true, checkExternalCaller = false)
    pub fn createPool(token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256, initSqrtPrice: U256, initTick: I256) -> () {
        let feeTierExist = containsFeeTier(fee, tickSpacing)
        assert!(feeTierExist, InvariantError.FeeTierNotFound)

        clamm.checkTick(initTick, tickSpacing)

        assert!(token0 != token1, InvariantError.TokensAreSame)

        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)
        let (tokenX, tokenY) = extractTokensFromPoolKey(poolKey)
        
        let poolKeyExist = containsPoolKey(tokenX, tokenY, fee, tickSpacing)
        assert!(!poolKeyExist, InvariantError.PoolKeyAlreadyExist)

        assert!(clamm.checkTickToSqrtPriceRelationship(initTick, tickSpacing, initSqrtPrice), InvariantError.TickAndSqrtPriceMismatch)

        let caller = callerAddress!()
        let timestamp = blockTimeStamp!()
        let mapEntryDeposit = mapEntryDeposit!()
        addPoolKey{caller -> ALPH: mapEntryDeposit}(caller, tokenX, tokenY, fee, tickSpacing)
        addPool{caller -> ALPH: mapEntryDeposit}(caller, poolKey, tokenX, tokenY, tickSpacing, initSqrtPrice, initTick, timestamp, config.admin)
    }

    @using(preapprovedAssets = true)
    pub fn addFeeTier(fee: U256, tickSpacing: U256) -> () {
        let caller = callerAddress!()
        checkCaller!(caller == config.admin, InvariantError.NotAdmin)

        assert!(tickSpacing > 0 && tickSpacing <= 100, InvariantError.InvalidTickSpacing)
        assert!(fee < one(PercentageScale), InvariantError.InvalidFee)

        wrappedAddFeeTier{caller -> ALPH: mapEntryDeposit!()}(caller, fee, tickSpacing)
    }

    
    pub fn removeFeeTier(fee: U256, tickSpacing: U256) -> () {
        let caller = callerAddress!()
        checkCaller!(caller == config.admin, InvariantError.NotAdmin)

        wrappedRemoveFeeTier(caller, fee, tickSpacing)
    }

    pub fn feeTierExist(fee: U256, tickSpacing: U256) -> Bool {
        return containsFeeTier(fee, tickSpacing)
    }

    pub fn getFeeTiers() -> ByteVec {
        return getAllFeeTiers()
    }

    pub fn getPools() -> ByteVec {
        return getAllPoolKeys()
    }

    pub fn getTick(token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256, index: I256) -> (Bool, Tick) {
        return wrappedGetTick(generatePoolKey(token0, token1, fee, tickSpacing), index)
    }

    pub fn getPool(token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256) -> (Bool, Pool) {
        return wrappedGetPool(generatePoolKey(token0, token1, fee, tickSpacing))
    }

    pub fn getPosition(owner: Address, index: U256) -> (Bool, Position) {  
        return wrappedGetPosition(owner, index)
    }

    pub fn isTickInitialized(token0: ByteVec, token1: ByteVec, fee: U256, tickSpacing: U256, index: I256) -> Bool {
        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)

        return getBit(index, tickSpacing, poolKey)
    }

    @using(preapprovedAssets = true)
    fn createTick(
        caller: Address,
        poolKey: ByteVec,
        tickSpacing: U256,
        index: I256,
        currentTickIndex: I256,
        feeGrowthGlobalX: U256,
        feeGrowthGlobalY: U256,
        startTimestamp: U256
    ) -> () {
        clamm.checkTick(index, tickSpacing)

        let mut feeGrowthOutsideX = 0
        let mut feeGrowthOutsideY = 0
        let mut secondsOutside = 0

        if (index <= currentTickIndex) {
            feeGrowthOutsideX = feeGrowthGlobalX
            feeGrowthOutsideY = feeGrowthGlobalY
            secondsOutside = blockTimeStamp!() - startTimestamp
        }

        wrappedCreateTick{caller -> ALPH: mapEntryDeposit!()}(
            caller,
            poolKey,
            index,
            true,
            0,
            0,
            clamm.calculateSqrtPrice(index),
            feeGrowthOutsideX,
            feeGrowthOutsideY, 
            0
        )
    }

    @using(preapprovedAssets = true, checkExternalCaller = false)
    pub fn initializeEmptyPosition(
        token0: ByteVec,
        token1: ByteVec,
        fee: U256,
        tickSpacing: U256,
        lowerTick: I256,
        upperTick: I256
    ) -> () {
        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)
        let (exist, pool) = wrappedGetPool(poolKey)
        assert!(exist, InvariantError.PoolDoesNotExist)

        let currentTickindex = pool.currentTickIndex
        let feeGrowthGlobalX = pool.feeGrowthGlobalX
        let feeGrowthGlobalY = pool.feeGrowthGlobalY
        let startTimestamp = pool.startTimestamp

        let caller = callerAddress!()

        let (lowerChunk, upperChunk) = getChunks(lowerTick, upperTick, tickSpacing)

        let mapEntryDeposit = mapEntryDeposit!()
        if (lowerChunk == upperChunk) {
            initializeChunk{caller -> ALPH: mapEntryDeposit}(caller, poolKey, lowerChunk)
        } else {
            initializeChunk{caller -> ALPH: mapEntryDeposit}(caller, poolKey, lowerChunk)
            initializeChunk{caller -> ALPH: mapEntryDeposit}(caller, poolKey, upperChunk)
        }
        
        let mapEntry2Deposits = mapEntryDeposit * 2
        if (!containsTick(poolKey, lowerTick)) {
            createTick{caller -> ALPH: mapEntry2Deposits}(caller, poolKey, tickSpacing, lowerTick, currentTickindex, feeGrowthGlobalX, feeGrowthGlobalY, startTimestamp)
        }

        if (!containsTick(poolKey, upperTick)) {
            createTick{caller -> ALPH: mapEntry2Deposits}(caller, poolKey, tickSpacing, upperTick, currentTickindex, feeGrowthGlobalX, feeGrowthGlobalY, startTimestamp)
        }

        wrappedAddPosition{caller -> ALPH: mapEntry2Deposits}(caller, poolKey, 0, lowerTick, upperTick, 0, 0, blockTimeStamp!(), 0, 0, caller)
    }

    @using(preapprovedAssets = true, assetsInContract = true, checkExternalCaller = false)
    pub fn increasePositionLiquidity(
        index: U256,
        token0: ByteVec,
        token1: ByteVec,
        fee: U256,
        tickSpacing: U256,
        lowerTick: I256,
        upperTick: I256,
        liquidityDelta: U256,
        slippageLimitLower: U256,
        slippageLimitUpper: U256
    ) -> () {
        let currentTimestamp = blockTimeStamp!()

        assert!(liquidityDelta != 0, InvariantError.ZeroLiquidity)

        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)

        let (exist, pool) = wrappedGetPool(poolKey)
        assert!(exist, InvariantError.PoolDoesNotExist)

        if (isTickInitialized(token0, token1, fee, tickSpacing, lowerTick) == false) {
            flip(true, lowerTick, tickSpacing, poolKey)
        }
        
        if (isTickInitialized(token0, token1, fee, tickSpacing, upperTick) == false) {
            flip(true, upperTick, tickSpacing, poolKey)
        }

        let poolSqrtPrice = pool.sqrtPrice

        assert!(poolSqrtPrice >= slippageLimitLower && poolSqrtPrice <= slippageLimitUpper, InvariantError.PriceLimitReached)

        let (x, y) = wrappedModifyPosition(callerAddress!(), index,poolKey, upperTick, lowerTick, liquidityDelta, true, currentTimestamp, tickSpacing)

        transferTokenToSelf!(callerAddress!(), pool.tokenX, x)
        transferTokenToSelf!(callerAddress!(), pool.tokenY, y)
    }

    @using(assetsInContract = true)
    pub fn removePosition(index: U256) -> () {
        let caller = callerAddress!()

        let (exist, position) = wrappedGetPosition(caller, index)

        assert!(exist, InvariantError.PositionNotFound)
        checkCaller!(caller == position.owner, InvariantError.NotOwner)

        let poolKey = position.poolKey
        let upperTick = position.upperTickIndex
        let lowerTick = position.lowerTickIndex
        let liquidity = position.liquidity

        let (_, pool) = wrappedGetPool(poolKey)
        let tickSpacing = pool.tickSpacing

        let (mut x, mut y) = wrappedModifyPosition(callerAddress!(), index, poolKey, upperTick, lowerTick, liquidity, false, blockTimeStamp!(), tickSpacing)

        let (_, updatedPosition) = wrappedGetPosition(caller, index)
        
        x = x + updatedPosition.tokensOwedX
        y = y + updatedPosition.tokensOwedY

        transferTokenFromSelf!(caller, pool.tokenX, x)
        transferTokenFromSelf!(caller, pool.tokenY, y)

        wrappedRemovePosition(caller, index)
    }

    @using(preapprovedAssets = true)
    pub fn transferPosition(index: U256, newOwner: Address) -> () {
        let caller = callerAddress!()
        let (exist, position) = wrappedGetPosition(caller, index)
        assert!(exist, InvariantError.PositionNotFound)
        checkCaller!(caller == position.owner, InvariantError.NotOwner)
        wrappedTransferPosition{caller -> ALPH: 2 * mapEntryDeposit!()}(caller, index, newOwner)
    }

    @using(checkExternalCaller = false)
    pub fn quote(
        token0: ByteVec,
        token1: ByteVec,
        fee: U256,
        tickSpacing: U256,
        xToY: Bool,
        amount: U256,
        byAmountIn: Bool,
        sqrtPriceLimit: U256
    ) -> QuoteResult {
        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)
        let calculateSwapResult = calculateSwap(poolKey, xToY, amount, byAmountIn, sqrtPriceLimit, fee, tickSpacing)

        return QuoteResult { 
            amountIn: calculateSwapResult.amountIn,
            amountOut: calculateSwapResult.amountOut,
            targetSqrtPrice: calculateSwapResult.targetSqrtPrice
        }
    }

    fn calculateSwap(
        poolKey: ByteVec,
        xToY: Bool,
        amount: U256,
        byAmountIn: Bool,
        sqrtPriceLimit: U256,
        fee: U256,
        tickSpacing: U256
    ) -> CalculateSwapResult {
        let currentTimestamp = blockTimeStamp!()

        assert!(amount != 0, InvariantError.ZeroAmount)
        let (exist, mut pool) = wrappedGetPool(poolKey)
        assert!(exist, InvariantError.PoolDoesNotExist)
        
        let mut sqrtPrice = pool.sqrtPrice

        if (xToY) {
            assert!(sqrtPrice > sqrtPriceLimit && sqrtPriceLimit <= MaxSqrtPrice, InvariantError.WrongLimit)             
        } else {
            assert!(sqrtPrice < sqrtPriceLimit && sqrtPriceLimit >= MinSqrtPrice, InvariantError.WrongLimit)
        }

        let mut totalAmountIn = 0
        let mut totalAmountOut = 0
        let mut eventFeeAmount = 0
        let mut remainingAmount = amount
        let eventStartSqrtPrice = sqrtPrice

        while (remainingAmount != 0) {
            let (_, wPool) = wrappedGetPool(poolKey)
            pool = wPool
            let currentTickIndex = pool.currentTickIndex
            let liquidity = pool.liquidity
            sqrtPrice = pool.sqrtPrice

            let (swapLimit, hasLimitingTick, limitingTickIndex, isInitialized) = getCloserLimit(
                sqrtPriceLimit,
                xToY,
                currentTickIndex,
                tickSpacing,
                poolKey
            )

            let swapResult = clamm.computeSwapStep(
                sqrtPrice,
                swapLimit,
                liquidity,
                remainingAmount,
                byAmountIn,
                fee
            )

            if (byAmountIn) {
                remainingAmount = remainingAmount - (swapResult.amountIn + swapResult.feeAmount)
            } else {
                remainingAmount = remainingAmount - swapResult.amountOut
            }

            wrappedAddFee(poolKey, swapResult.feeAmount, xToY, config.protocolFee)
            setSqrtPrice(poolKey, swapResult.nextSqrtPrice)

            totalAmountIn = totalAmountIn + swapResult.amountIn + swapResult.feeAmount
            totalAmountOut = totalAmountOut + swapResult.amountOut
            eventFeeAmount = eventFeeAmount + swapResult.feeAmount

            assert!(swapResult.nextSqrtPrice != sqrtPriceLimit || remainingAmount == 0, InvariantError.PriceLimitReached)

            if (hasLimitingTick) {
                if (isInitialized) {
                    let (amountToAdd, updatedRemainingAmount, hasCrossed) = wrappedCrossTick(
                        poolKey,
                        swapResult.nextSqrtPrice,
                        swapLimit,
                        limitingTickIndex,
                        remainingAmount,
                        byAmountIn,
                        xToY,
                        config.protocolFee,
                        fee,
                        tickSpacing
                    )
                    remainingAmount = updatedRemainingAmount
                    totalAmountIn = totalAmountIn + amountToAdd
                    if (hasCrossed) {
                        let (_, crossedPool) = wrappedGetPool(poolKey)
                        let feeGrowthGlobalX = crossedPool.feeGrowthGlobalX
                        let feeGrowthGlobalY = crossedPool.feeGrowthGlobalY
                        let (add, liquidityDelta) = wrappedCross(poolKey, limitingTickIndex, feeGrowthGlobalX, feeGrowthGlobalY, currentTickIndex)
                        wrappedCrossLiquidityUpdate(poolKey, add, liquidityDelta)
                    }
                }
            } else {
                let newTickIndex = clamm.getTickAtSqrtPrice(swapResult.nextSqrtPrice, tickSpacing)
                setCurrentTickIndex(poolKey, newTickIndex)
                setLastTimestamp(poolKey, currentTimestamp)
            }
        }
        assert!(totalAmountOut != 0, InvariantError.NoGainSwap)

        let (_, updatedPool) = wrappedGetPool(poolKey)
        return CalculateSwapResult {
            amountIn: totalAmountIn,
            amountOut: totalAmountOut,
            startSqrtPrice: eventStartSqrtPrice,
            targetSqrtPrice: updatedPool.sqrtPrice,
            fee: eventFeeAmount
        }
    }

    @using(assetsInContract = true, preapprovedAssets = true, checkExternalCaller = false)
    pub fn swap(
        token0: ByteVec,
        token1: ByteVec,
        fee: U256,
        tickSpacing: U256,
        xToY: Bool,
        amount: U256,
        byAmountIn: Bool,
        sqrtPriceLimit: U256
    ) -> CalculateSwapResult {
        let caller = callerAddress!()
        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)

        let calculateSwapResult = calculateSwap(poolKey, xToY, amount, byAmountIn, sqrtPriceLimit, fee, tickSpacing)

        let (_, pool) = wrappedGetPool(poolKey)
        let tokenX = pool.tokenX
        let tokenY = pool.tokenY

        if (xToY) {
            transferTokenToSelf!(caller, tokenX, calculateSwapResult.amountIn)
            transferTokenFromSelf!(caller, tokenY, calculateSwapResult.amountOut)
        } else {
            transferTokenFromSelf!(caller, tokenX, calculateSwapResult.amountOut)
            transferTokenToSelf!(caller, tokenY, calculateSwapResult.amountIn)
        }

        return calculateSwapResult
    }
    
    // caller is checked in `wrappedGetPosition`
    @using(assetsInContract = true, checkExternalCaller = false)
    pub fn claimFee(index: U256) -> () {
        let caller = callerAddress!()
        let key = toByteVec!(caller) ++ toByteVec!(index)
        let (exist, position) = wrappedGetPosition(caller, index)
        assert!(exist, InvariantError.PositionDoesNotExist)
    
        let poolKey = position.poolKey
        let (_, pool) = wrappedGetPool(poolKey)

        let upperTick = position.upperTickIndex
        let lowerTick = position.lowerTickIndex
        let tickSpacing = pool.tickSpacing

        let (_, _) = wrappedModifyPosition(caller, index, poolKey, upperTick, lowerTick, 0, false, blockTimeStamp!(), tickSpacing)
        
        let tokensOwedX = positions[key].tokensOwedX
        let tokensOwedY = positions[key].tokensOwedY

        let tokenX = pool.tokenX
        let tokenY = pool.tokenY

        setTokensOwed(caller, index, 0, 0)

        transferTokenFromSelf!(caller, tokenX, tokensOwedX)
        transferTokenFromSelf!(caller, tokenY, tokensOwedY)
    }
}
