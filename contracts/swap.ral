struct SwapResult {
    nextSqrtPrice: U256,
    amountIn: U256,
    amountOut: U256,
    feeAmount: U256
}

struct CalculateSwapResult {
    amountIn: U256,
    amountOut: U256,
    startSqrtPrice: U256,
    targetSqrtPrice: U256,
    fee: U256
}

struct QuoteResult {
    amountIn: U256,
    amountOut: U256,
    targetSqrtPrice: U256
}

Contract SwapUtils(
    protocolFee: U256,
    pools: Pools, 
    ticks: Ticks,
    tickmap: Tickmap,
    clamm: CLAMM
) extends Decimal(), PoolKeyHelper() {
    enum SwapError {
        ZeroAmount = 10001
        WrongLimit = 10002
        PriceLimitReached = 10003
        NoGainSwap = 10004
    }

    pub fn getSelfId() -> Address {
        return selfAddress!()
    }
    
    @using(checkExternalCaller = false)
    pub fn calculateSwap(
        poolKey: ByteVec,
        xToY: Bool,
        amount: U256,
        byAmountIn: Bool,
        sqrtPriceLimit: U256,
        fee: U256,
        tickSpacing: U256
    ) -> CalculateSwapResult {
        let currentTimestamp = blockTimeStamp!()

        assert!(amount != 0, SwapError.ZeroAmount)
        
        let mut sqrtPrice = pools.getSqrtPrice(poolKey)

        if(xToY) {
            assert!(sqrtPrice > sqrtPriceLimit && sqrtPriceLimit <= MaxSqrtPrice, SwapError.WrongLimit)             
        } else {
            assert!(sqrtPrice < sqrtPriceLimit && sqrtPriceLimit >= MinSqrtPrice, SwapError.WrongLimit)
        }

        let mut totalAmountIn = 0
        let mut totalAmountOut = 0
        let mut eventFeeAmount = 0
        let mut remainingAmount = amount
        let eventStartSqrtPrice = sqrtPrice

        while (remainingAmount != 0) {
            let currentTickIndex = pools.getCurrentTickIndex(poolKey)
            let liquidity = pools.getLiquidity(poolKey)
            sqrtPrice = pools.getSqrtPrice(poolKey)

            let (swapLimit, hasLimitingTick, limitingTickIndex, isInitialized) = tickmap.getCloserLimit(
                sqrtPriceLimit,
                xToY,
                currentTickIndex,
                tickSpacing,
                poolKey
            )

            let swapResult = clamm.computeSwapStep(
                sqrtPrice,
                swapLimit,
                liquidity,
                remainingAmount,
                byAmountIn,
                fee
            )

            if (byAmountIn) {
                remainingAmount = remainingAmount - (swapResult.amountIn + swapResult.feeAmount)
            } else {
                remainingAmount = remainingAmount - swapResult.amountOut
            }

            pools.wrappedAddFee(poolKey, swapResult.feeAmount, xToY, protocolFee)
            pools.setSqrtPrice(poolKey, swapResult.nextSqrtPrice)

            totalAmountIn = totalAmountIn + swapResult.amountIn + swapResult.feeAmount
            totalAmountOut = totalAmountOut + swapResult.amountOut
            eventFeeAmount = eventFeeAmount + swapResult.feeAmount

            assert!(swapResult.nextSqrtPrice != sqrtPriceLimit || remainingAmount == 0, SwapError.PriceLimitReached)

            if (hasLimitingTick) {
                if (isInitialized) {
                    let (amountToAdd, updatedRemainingAmount, hasCrossed) = pools.wrappedCrossTick(
                        poolKey,
                        swapResult.nextSqrtPrice,
                        swapLimit,
                        limitingTickIndex,
                        remainingAmount,
                        byAmountIn,
                        xToY,
                        protocolFee,
                        fee,
                        tickSpacing
                    )
                    remainingAmount = updatedRemainingAmount
                    totalAmountIn = totalAmountIn + amountToAdd
                    if (hasCrossed) {
                        let (feeGrowthGlobalX, feeGrowthGlobalY) = pools.getFeeGrowthGlobal(poolKey)
                        let (add, liquidityDelta) = ticks.wrappedCross(poolKey, limitingTickIndex, feeGrowthGlobalX, feeGrowthGlobalY, currentTickIndex)
                        pools.wrappedCrossLiquidityUpdate(poolKey, add, liquidityDelta)
                    }
                }
            } else {
                let newTickIndex = clamm.getTickAtSqrtPrice(swapResult.nextSqrtPrice, tickSpacing)
                pools.setCurrentTickIndex(poolKey, newTickIndex)
                pools.setLastTimestamp(poolKey, currentTimestamp)
            }
        }
        assert!(totalAmountOut != 0, SwapError.NoGainSwap)

        return CalculateSwapResult {
            amountIn: totalAmountIn,
            amountOut: totalAmountOut,
            startSqrtPrice: eventStartSqrtPrice,
            targetSqrtPrice: pools.getSqrtPrice(poolKey),
            fee: eventFeeAmount
        }
    }

    @using(checkExternalCaller = false)
    pub fn wrappedQuote(
        token0: ByteVec,
        token1: ByteVec,
        fee: U256,
        tickSpacing: U256,
        xToY: Bool,
        amount: U256,
        byAmountIn: Bool,
        sqrtPriceLimit: U256
    ) -> QuoteResult {
        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)
        let calculateSwapResult = calculateSwap(poolKey, xToY, amount, byAmountIn, sqrtPriceLimit, fee, tickSpacing)
        return QuoteResult { 
            amountIn: calculateSwapResult.amountIn,
            amountOut: calculateSwapResult.amountOut,
            targetSqrtPrice: calculateSwapResult.targetSqrtPrice
        }
    }

    @using(checkExternalCaller = false)
    pub fn wrappedSwap(
        token0: ByteVec,
        token1: ByteVec,
        fee: U256,
        tickSpacing: U256,
        xToY: Bool,
        amount: U256,
        byAmountIn: Bool,
        sqrtPriceLimit: U256
    ) -> CalculateSwapResult {
        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)
        return calculateSwap(poolKey, xToY, amount, byAmountIn, sqrtPriceLimit, fee, tickSpacing)
    }
}