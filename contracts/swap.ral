Contract SwapUtils(
    protocolFee: U256,
    poolsContractId: ByteVec, 
    ticksContractId: ByteVec, 
    tickmapContractId: ByteVec,
    clammContractId: ByteVec
) extends Decimal(), Utils() {
    enum SwapError {
        ZeroAmount = 10001
        WrongLimit = 10002
        PriceLimitReached = 10003
        NoGainSwap = 10004
    }

    @using(checkExternalCaller = false)
    pub fn getSelfId() -> ByteVec {
        return toByteVec!(selfAddress!())
    }
    
    @using(checkExternalCaller = false)
    pub fn calculateSwap(
        poolKey: ByteVec,
        xToY: Bool,
        amount: U256,
        byAmountIn: Bool,
        sqrtPriceLimit: U256,
        fee: U256,
        tickSpacing: U256
    ) -> (U256, U256, U256, U256, U256) {
        let currentTimestamp = blockTimeStamp!()

        assert!(amount != 0, SwapError.ZeroAmount)
        
        let mut currentSqrtPrice = Pools(poolsContractId).getCurrentSqrtPrice(poolKey)

        if(xToY) {
            assert!(currentSqrtPrice > sqrtPriceLimit && sqrtPriceLimit <= getMaxSqrtPrice(), SwapError.WrongLimit)             
        } else {
            assert!(currentSqrtPrice < sqrtPriceLimit && sqrtPriceLimit >= getMinSqrtPrice(), SwapError.WrongLimit)
        }

        let mut remainingAmount = amount

        let mut totalAmountIn = 0
        let mut totalAmountOut = 0

        let eventStartSqrtPrice = currentSqrtPrice
        let mut eventFeeAmount = 0

        while (remainingAmount != 0) {
            let currentTickIndex = Pools(poolsContractId).getCurrentTickIndex(poolKey)
            let currentLiquidity = Pools(poolsContractId).getCurrentLiquidity(poolKey)
            currentSqrtPrice = Pools(poolsContractId).getCurrentSqrtPrice(poolKey)

            let (swapLimit, hasLimitingTick, limitingTickIndex, isInitialized) = Tickmap(tickmapContractId).getCloserLimit(
                sqrtPriceLimit,
                xToY,
                currentTickIndex,
                tickSpacing,
                poolKey
            )

            let (nextSqrtPrice, amountIn, amountOut, feeAmount) = CLAMM(clammContractId).computeSwapStep(
                currentSqrtPrice,
                swapLimit,
                currentLiquidity,
                remainingAmount,
                byAmountIn,
                fee
            )

            if (byAmountIn) {
                remainingAmount = remainingAmount - (amountIn + feeAmount)
            } else {
                remainingAmount = remainingAmount - amountOut
            }

            Pools(poolsContractId).wrappedAddFee(poolKey, feeAmount, xToY, protocolFee)

            eventFeeAmount = eventFeeAmount + feeAmount

            Pools(poolsContractId).setSqrtPrice(poolKey, nextSqrtPrice)

            totalAmountIn = totalAmountIn + amountIn + feeAmount
            totalAmountOut = totalAmountOut + amountOut

            assert!(nextSqrtPrice != sqrtPriceLimit || remainingAmount == 0, SwapError.PriceLimitReached)

            if (hasLimitingTick) {
                if (isInitialized) {
                    let (amountToAdd, updatedRemainingAmount, hasCrossed) = Pools(poolsContractId).wrappedCrossTick(
                        poolKey,
                        nextSqrtPrice,
                        swapLimit,
                        limitingTickIndex,
                        remainingAmount,
                        byAmountIn,
                        xToY,
                        protocolFee,
                        fee,
                        tickSpacing
                    )
                    remainingAmount = updatedRemainingAmount
                    totalAmountIn = totalAmountIn + amountToAdd
                    if (hasCrossed) {
                        let (feeGrowthGlobalX, feeGrowthGlobalY) = Pools(poolsContractId).getFeeGrowthGlobal(poolKey)
                        let (add, liquidityDelta) = Ticks(ticksContractId).wrappedCross(poolKey, limitingTickIndex, feeGrowthGlobalX, feeGrowthGlobalY, currentTickIndex)
                        Pools(poolsContractId).wrappedCrossLiquidityUpdate(poolKey, add, liquidityDelta)
                    }
                }
            } else {
                let newTickIndex = CLAMM(clammContractId).getTickAtSqrtPrice(nextSqrtPrice, tickSpacing)
                Pools(poolsContractId).setTickIndex(poolKey, newTickIndex)
                Pools(poolsContractId).setLastTimestamp(poolKey, currentTimestamp)
            }
        }
        
        assert!(totalAmountOut != 0, SwapError.NoGainSwap)

        return totalAmountIn, totalAmountOut, eventStartSqrtPrice, Pools(poolsContractId).getCurrentSqrtPrice(poolKey), eventFeeAmount
    }

    @using(updateFields = false, checkExternalCaller = false)
    pub fn wrappedQuote(
        token0: ByteVec,
        token1: ByteVec,
        fee: U256,
        tickSpacing: U256,
        xToY: Bool,
        amount: U256,
        byAmountIn: Bool,
        sqrtPriceLimit: U256
    ) -> (U256, U256, U256) {
        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)
        let (amountIn, amountOut, _, targetSqrtPrice, _) = calculateSwap(poolKey, xToY, amount, byAmountIn, sqrtPriceLimit, fee, tickSpacing)
        return amountIn, amountOut, targetSqrtPrice
    }

    @using(updateFields = false, checkExternalCaller = false)
    pub fn wrappedSwap(
        token0: ByteVec,
        token1: ByteVec,
        fee: U256,
        tickSpacing: U256,
        xToY: Bool,
        amount: U256,
        byAmountIn: Bool,
        sqrtPriceLimit: U256
    ) -> (U256, U256, U256, U256, U256) {
        let poolKey = generatePoolKey(token0, token1, fee, tickSpacing)
        let (amountIn, amountOut, startingSqrtPrice, targetSqrtPrice, feeAmount) = calculateSwap(poolKey, xToY, amount, byAmountIn, sqrtPriceLimit, fee, tickSpacing)
        return amountIn, amountOut, startingSqrtPrice, targetSqrtPrice, feeAmount
    }
}