Contract Reserve(invariant: Address, mut assetsStored: U256) {
    @using(updateFields = true)
    pub fn incrementAssets(by: U256) -> () {
        let caller = callerAddress!()
        checkCaller!(invariant == caller, ReserveError.NotInvariant)
        assert!(assetsStored + by <= RESERVE_ASSET_CAPACITY, ReserveError.OverCapacity)
        assetsStored = assetsStored + by
    }

    pub fn getAssetsCount() -> U256 {
        return assetsStored
    }

    @using(preapprovedAssets = true, payToContractOnly = true)
    pub fn depositSingleAsset(from: Address, id: ByteVec, amount: TokenAmount) -> () {
        let caller = callerAddress!()
        checkCaller!(invariant == caller, ReserveError.NotInvariant)
        transferTokenToSelf!(from, id, amount.v)
    }

    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn depositTwoAssets(from: Address, xId: ByteVec, yId: ByteVec, x: TokenAmount, y: TokenAmount) -> () {
        let caller = callerAddress!()
        checkCaller!(invariant == caller, ReserveError.NotInvariant)
        transferTokenToSelf!(from, xId, x.v)
        transferTokenToSelf!(from, yId, y.v)
    }

    @using(assetsInContract = true)
    pub fn withdrawSingleAsset(to: Address, id: ByteVec, amount: TokenAmount) -> () {
        let caller = callerAddress!()
        checkCaller!(invariant == caller, ReserveError.NotInvariant)
        transferTokenFromSelf!(to, id, amount.v)
    }

    @using(assetsInContract = true)
    pub fn withdrawTwoAssets(to: Address, xId: ByteVec, yId: ByteVec, x: TokenAmount, y: TokenAmount) -> () {
        let caller = callerAddress!()
        checkCaller!(invariant == caller, ReserveError.NotInvariant)
        transferTokenFromSelf!(to, xId, x.v)
        transferTokenFromSelf!(to, yId, y.v)
    }

    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn swap(swapper: Address, inId: ByteVec, outId: ByteVec, in: TokenAmount, out: TokenAmount) -> () {
        let caller = callerAddress!()
        checkCaller!(invariant == caller, ReserveError.NotInvariant)
        transferTokenToSelf!(swapper, inId, in.v)
        transferTokenFromSelf!(swapper, outId, out.v)
    }
}