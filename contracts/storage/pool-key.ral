Abstract Contract PoolKey() {
    enum PoolKeyError {
        TokensAreSame = 0
    }

    pub fn createPoolKey(
        token0: Address,
        token1: Address,
        fee: FeeTier
        ) -> ByteVec {

        assert!(token0 != token1, PoolKeyError.TokensAreSame)

        let token0Bytes = toByteVec!(token0)
        let token1Bytes = toByteVec!(token1)
        let feeTierBytes = toByteVec!(fee.getFee()) ++ toByteVec!(fee.getTickSpacing())

        // TODO: Find a way to compare tokens
        // ByteVec && Address cannot have in-equality chcek in if statement
        //
        // Okey, i see what you mean now. 
        // Yeah you can do equality check in if statement for Address or ByteVec, 
        // non-equality check is only for I256/U256
        //
        // if (token0Bytes < token1Bytes) {
        //     return token0Bytes ++ token1Bytes ++ feeTierBytes
        // } else {
        //     return token1Bytes ++ token0Bytes ++ feeTierBytes
        // }
        return token1Bytes ++ token0Bytes ++ feeTierBytes
    }
}