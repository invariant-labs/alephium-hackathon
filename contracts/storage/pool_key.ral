struct PoolKey {
    mut tokenX: ByteVec,
    mut tokenY: ByteVec,
    mut feeTier: FeeTier
}

Abstract Contract PoolKeyHelper() {
    pub fn newPoolKey(token0: ByteVec, token1: ByteVec, feeTier: FeeTier) -> PoolKey {
        assert!(token0 != token1, InvariantError.TokensAreSame)

        for (let mut i = 0; i <= size!(token0); i = i + 1) {
            if (u256From1Byte!(byteVecSlice!(token0, i, i + 1)) < u256From1Byte!(byteVecSlice!(token1, i, i + 1))) {
                return PoolKey {
                    tokenX: token0,
                    tokenY: token1,
                    feeTier: feeTier
                }
            }

            if (u256From1Byte!(byteVecSlice!(token0, i , i + 1)) > u256From1Byte!(byteVecSlice!(token1, i , i + 1))) {
                return PoolKey {
                    tokenX: token1,
                    tokenY: token0,
                    feeTier: feeTier
                }
            }
        }

        return PoolKey {
            tokenX: token0,
            tokenY: token1,
            feeTier: feeTier
        }
    }

    pub fn poolKeyBytes(poolKey: PoolKey) -> ByteVec {
        return poolKey.tokenX ++ poolKey.tokenY ++ toByteVec!(poolKey.feeTier.fee) ++ toByteVec!(poolKey.feeTier.tickSpacing)
    }
}