struct Position {
    mut poolKey: PoolKey,
    mut liquidity: Liquidity,
    mut lowerTickIndex: I256,
    mut upperTickIndex: I256,
    mut feeGrowthInsideX: FeeGrowth,
    mut feeGrowthInsideY: FeeGrowth,
    mut lastBlockNumber: U256,
    mut tokensOwedX: TokenAmount,
    mut tokensOwedY: TokenAmount,
    mut owner: Address
}

Abstract Contract PositionHelper(clamm: CLAMM) extends Decimal() {
    @using(updateFields = false)
    fn modify(
        mut position: Position,
        mut pool: Pool,
        lowerTick: Tick,
        upperTick: Tick,
        liquidityDelta: Liquidity,
        add: Bool,
        currentTimestamp: U256
    ) -> (TokenAmount, TokenAmount, Position, Bool, Bool) {
        pool.lastTimestamp = currentTimestamp

        let maxLiquidityPerTick = clamm.calculateMaxLiquidityPerTick(pool.poolKey.feeTier.tickSpacing)

        let isLowerEmpty = updateTick(pool.poolKey, lowerTick, liquidityDelta, maxLiquidityPerTick, false, add)
        let isUpperEmpty = updateTick(pool.poolKey, upperTick, liquidityDelta, maxLiquidityPerTick, true, add)

        let (feeGrowthInsideX, feeGrowthInsideY) = calculateFeeGrowthInside(
            lowerTick.index,
            lowerTick.feeGrowthOutsideX,
            lowerTick.feeGrowthOutsideY,
            upperTick.index,
            upperTick.feeGrowthOutsideX,
            upperTick.feeGrowthOutsideY,
            pool.currentTickIndex,
            pool.feeGrowthGlobalX,
            pool.feeGrowthGlobalY
        )
        
        
        position = update(position, add, liquidityDelta, feeGrowthInsideX, feeGrowthInsideY)

        let (x, y, uPool) = updatePoolLiquidity(pool, liquidityDelta, add, upperTick.index, lowerTick.index)
        rewritePool(uPool)
        
        return x, y, position, isLowerEmpty, isUpperEmpty
    }

    fn update(
        mut position: Position,
        sign: Bool,
        liquidityDelta: Liquidity,
        feeGrowthInsideX: FeeGrowth,
        feeGrowthInsideY: FeeGrowth
    ) -> Position {
        let tokensOwedX = clamm.toFee(FeeGrowth{v: wrappingSub(feeGrowthInsideX.v, position.feeGrowthInsideX.v)}, position.liquidity)
        let tokensOwedY = clamm.toFee(FeeGrowth{v: wrappingSub(feeGrowthInsideY.v, position.feeGrowthInsideY.v)}, position.liquidity)

        position.liquidity = calculateNewLiquidity(position.liquidity, sign, liquidityDelta)
        position.feeGrowthInsideX = feeGrowthInsideX
        position.feeGrowthInsideY = feeGrowthInsideY

        position.tokensOwedX = tokensOwedX
        position.tokensOwedY = tokensOwedY
        return position
    }

    fn calculateNewLiquidity(
        currentPositionLiquidity: Liquidity,
        sign: Bool,
        liquidityDelta: Liquidity
    ) -> Liquidity {
        if (sign) {
            return Liquidity{v: currentPositionLiquidity.v + liquidityDelta.v}
        } else {
            assert!(currentPositionLiquidity.v >= liquidityDelta.v, InvariantError.InsufficientLiquidity)
            return Liquidity{v: currentPositionLiquidity.v - liquidityDelta.v}
        }
    }

    fn serializePosition(position: Position) -> ByteVec {
        return position.poolKey.tokenX ++ b`break`
        ++ position.poolKey.tokenY ++ b`break`
        ++ toByteVec!(position.poolKey.feeTier.fee.v) ++ b`break`
        ++ toByteVec!(position.poolKey.feeTier.tickSpacing) ++ b`break`
        ++ toByteVec!(position.liquidity.v) ++ b`break`
        ++ toByteVec!(position.lowerTickIndex) ++ b`break`
        ++ toByteVec!(position.upperTickIndex) ++ b`break`
        ++ toByteVec!(position.feeGrowthInsideX.v) ++ b`break`
        ++ toByteVec!(position.feeGrowthInsideY.v) ++ b`break`
        ++ toByteVec!(position.lastBlockNumber) ++ b`break`
        ++ toByteVec!(position.tokensOwedX.v) ++ b`break`
        ++ toByteVec!(position.tokensOwedY.v) ++ b`break`
        ++ toByteVec!(position.owner) ++ b`break`
    }
}