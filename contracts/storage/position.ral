struct Position {
    mut poolKey: ByteVec,
    mut liquidity: U256,
    mut lowerTickIndex: I256,
    mut upperTickIndex: I256,
    mut feeGrowthInsideX: U256,
    mut feeGrowthInsideY: U256,
    mut lastBlockNumber: U256,
    mut tokensOwedX: U256,
    mut tokensOwedY: U256,
    mut owner: Address
}

Abstract Contract PositionHelper(clamm: CLAMM) extends Decimal() {
    @using(updateFields = false, checkExternalCaller = false)
    pub fn modify(
        position: Position,
        upperTick: I256,
        upperTickFeeGrowthOutsideX: U256,
        upperTickFeeGrowthOutsideY: U256,
        lowerTick: I256,
        lowerTickFeeGrowthOutsideX: U256,
        lowerTickFeeGrowthOutsideY: U256,
        poolCurrentTickIndex: I256,
        poolFeeGrowthGlobalX: U256,
        poolFeeGrowthGlobalY: U256,
        liquidityDelta: U256,
        add: Bool
    ) -> Position {
        let (feeGrowthInsideX, feeGrowthInsideY) = clamm.calculateFeeGrowthInside(
            lowerTick,
            lowerTickFeeGrowthOutsideX,
            lowerTickFeeGrowthOutsideY,
            upperTick,
            upperTickFeeGrowthOutsideX,
            upperTickFeeGrowthOutsideY,
            poolCurrentTickIndex,
            poolFeeGrowthGlobalX,
            poolFeeGrowthGlobalY
        )

        return update(position, add, liquidityDelta, feeGrowthInsideX, feeGrowthInsideY)
    }

    @using(checkExternalCaller = false)
    pub fn update(
        mut position: Position,
        sign: Bool,
        liquidityDelta: U256,
        feeGrowthInsideX: U256,
        feeGrowthInsideY: U256
    ) -> Position {
        assert!(liquidityDelta != 0 || position.liquidity != 0, InvariantError.EmptyPositionPokes)

        let tokensOwedX = clamm.toFee(wrappingSub(feeGrowthInsideX, position.feeGrowthInsideX), position.liquidity)
        let tokensOwedY = clamm.toFee(wrappingSub(feeGrowthInsideY, position.feeGrowthInsideY), position.liquidity)

        position.liquidity = calculateNewLiquidity(position.liquidity, sign, liquidityDelta)
        position.feeGrowthInsideX = feeGrowthInsideX
        position.feeGrowthInsideY = feeGrowthInsideY

        position.tokensOwedX = tokensOwedX
        position.tokensOwedY = tokensOwedY
        return position
    }

    @using(checkExternalCaller = false)
    pub fn calculateNewLiquidity(
        currentPositionLiquidity: U256,
        sign: Bool,
        liquidityDelta: U256
    ) -> U256 {
        assert!(sign || currentPositionLiquidity >= liquidityDelta, InvariantError.InsufficientLiquidity)

        if (sign) {
            return currentPositionLiquidity + liquidityDelta
        } else {
            return currentPositionLiquidity - liquidityDelta
        }
    }
}