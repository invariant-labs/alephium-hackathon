Contract Position(
    positionKey: ByteVec,
    poolKey: ByteVec,
    posLiquidity: U256,
    posLowerTickIndex: I256,
    posUpperTickIndex: I256,
    posFeeGrowthInsideX: U256,
    posFeeGrowthInsideY: U256,
    lastBlockNumber: U256,
    posTokensOwedX: U256,
    posTokensOwedY: U256,

) extends CLAMM(), Decimal() {
    enum PositionError {
        PositionNotFound = 0
    }

    pub fn getPositionKey() -> BytVec {
        return positionKey
    }

    pub fn getPoolKey() -> ByteVec {
        return poolKey
    }

    pub fn getPosLiquidity() -> U256 {
        return posLiquidity
    }

    pub fn getPosLowerTickIndex() -> I256 {
        return posLowerTickIndex
    }

    pub fn getPosUpperTickIndex() -> I256 {
        return posUpperTickIndex
    }

    pub fn getPosFeeGrowthInsideX() -> U256 {
        return posFeeGrowthInsideX
    }

    pub fn getPosFeeGrowthInsideY() -> U256 {
        return posFeeGrowthInsideY
    }

    pub fn getLastBlockNumber() -> U256 {
        return lastBlockNumber
    }

    pub fn getPosTokensOwedX() -> U256 {
        return posTokensOwedX
    }

    pub fn getPosTokensOwedY() -> U256 {
        return posTokensOwedY
    }


    pub fn modify(
        poolKey: ByteVec,
        lowerTickKey: ByteVec,
        upperTickKey: ByteVec,
        upperTick: I256,
        lowerTick: I256,
        liquidityDelta: U256,
        add: Bool,
        currentTimestamp: U256,
        tickSpacing: U256
    ) -> (U256, U256) {}

    pub fn updatePos(
        sign: Bool,
        liquidityDelta: U256,
        feeGrowthInsideX: U256,
        feeGrowthInsideY: U256
    ) -> () {}

    pub fn calculateNewLiquidity(
        sign: Bool,
        liquidityDelta: U256
    ) -> U256 {}

    pub fn claimFee(
        poolKey: ByteVec,
        lowerTickKey: ByteVec,
        upperTickKey: ByteVec,
        lowerTickIndex: I256,
        upperTickIndex: I256,
        currentTimestamp: U256
    ) -> (U256, U256) {}

    // Most likely will be moved to collection layer & main contract
    // pub fn create() -> () {}
    // pub fn remove() -> () {}
}