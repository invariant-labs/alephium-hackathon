struct TickState {
    mut sign: Bool,
    mut liquidityChange: U256,
    mut liquidityGross: U256,
    sqrtPrice: U256,
    mut feeGrowthOutsideX: U256,
    mut feeGrowthOutsideY: U256,
    secondsOutside: U256
}

Contract Tick(
    admin: Address,
    mut tick: TickState
) extends Decimal() {
    enum TickError {
        NotAdmin = 1000
        InvalidTickLiquidity = 1001
    }

    pub fn getSign() -> Bool {
        return tick.sign
    }

    pub fn getLiquidityChange() -> U256 {
        return tick.liquidityChange
    }

    pub fn getLiquidityGross() -> U256 {
        return tick.liquidityGross
    }

    pub fn getSqrtPrice() -> U256 {
        return tick.sqrtPrice
    }

    pub fn getFeeGrowthOutsideX() -> U256 {
        return tick.feeGrowthOutsideX
    }

    pub fn getFeeGrowthOutsideY() -> U256 {
        return tick.feeGrowthOutsideY
    }

    pub fn getSecondsOutside() -> U256 {
        return tick.secondsOutside
    }

    pub fn get() -> TickState {
        return tick
    }

    @using(updateFields = true)
    pub fn updateTick(liquidityDelta: U256, maxLiquidityPerTick: U256, isUpper: Bool, isDeposit: Bool) -> () {
        checkCaller!(callerAddress!() == admin, TickError.NotAdmin)

        tick.liquidityGross = calculateNewLiquidityGross(isDeposit, liquidityDelta, maxLiquidityPerTick)
        let updateLiquiditySign = isDeposit && !isUpper || !isDeposit && isUpper
        updateLiquidityChange(liquidityDelta, updateLiquiditySign)
    }

    @using(updateFields = true)
    pub fn cross(feeGrowthGlobalX: U256, feeGrowthGlobalY: U256, currentTick: I256, index: I256) -> (Bool, U256) {
        checkCaller!(callerAddress!() == admin, TickError.NotAdmin)

        tick.feeGrowthOutsideX = wrappingSub(feeGrowthGlobalX, tick.feeGrowthOutsideX)
        tick.feeGrowthOutsideY = wrappingSub(feeGrowthGlobalY, tick.feeGrowthOutsideY)

        let isBelowCurrent = currentTick >= index

        return (isBelowCurrent && !tick.sign || !isBelowCurrent && tick.sign), getLiquidityChange()
    }

    @using(updateFields = true)
    fn updateLiquidityChange(liquidityDelta: U256, add: Bool) -> () {
        checkCaller!(callerAddress!() == selfAddress!(), TickError.NotAdmin)

        if (tick.sign && !add || !tick.sign && add) {
            if (tick.liquidityChange > liquidityDelta) {
                tick.liquidityChange = tick.liquidityChange - liquidityDelta
            } else {
                tick.liquidityChange = liquidityDelta - tick.liquidityChange
                tick.sign = !tick.sign
            }
        } else {
            tick.liquidityChange = tick.liquidityChange + liquidityDelta
        }
    }

    fn calculateNewLiquidityGross(sign: Bool, liquidityDelta: U256, maxLiquidityPerTick: U256) -> U256 {
        assert!(sign || tick.liquidityGross >= liquidityDelta, TickError.InvalidTickLiquidity)

        let mut newLiquidity = 0
        if (sign) {
            newLiquidity = tick.liquidityGross + liquidityDelta
        } else {
            newLiquidity = tick.liquidityGross - liquidityDelta
        }

        assert!(!sign || newLiquidity < maxLiquidityPerTick, TickError.InvalidTickLiquidity)

        return newLiquidity
    }
}