struct Tick {
    mut sign: Bool,
    mut index: I256,
    mut liquidityChange: Liquidity,
    mut liquidityGross: Liquidity,
    mut sqrtPrice: SqrtPrice,
    mut feeGrowthOutsideX: FeeGrowth,
    mut feeGrowthOutsideY: FeeGrowth,
    mut secondsOutside: U256
}

Abstract Contract TickHelper() extends Decimal() {
    fn updateTick(poolKey: PoolKey, mut tick: Tick, liquidityDelta: Liquidity, maxLiquidityPerTick: Liquidity, isUpper: Bool, isDeposit: Bool) -> Bool {
        tick.liquidityGross = calculateNewLiquidityGross(tick, isDeposit, liquidityDelta, maxLiquidityPerTick)
        let updateLiquiditySign = isDeposit && !isUpper || !isDeposit && isUpper
        let updatedTick = updateLiquidityChange(tick, liquidityDelta, updateLiquiditySign)
        rewriteTick(poolKey, updatedTick)
        return updatedTick.liquidityGross.v == 0
    }

    fn cross(poolKey: PoolKey, mut tick: Tick,feeGrowthGlobalX: FeeGrowth, feeGrowthGlobalY: FeeGrowth, currentTick: I256) -> (Bool, Liquidity) {
        tick.feeGrowthOutsideX = FeeGrowth{v: wrappingSub(feeGrowthGlobalX.v, tick.feeGrowthOutsideX.v)}
        tick.feeGrowthOutsideY = FeeGrowth{v: wrappingSub(feeGrowthGlobalY.v, tick.feeGrowthOutsideY.v)}

        let isBelowCurrent = currentTick >= tick.index

        rewriteTick(poolKey, tick)

        return (isBelowCurrent && !tick.sign || !isBelowCurrent && tick.sign), tick.liquidityChange
    }

    fn updateLiquidityChange(mut tick: Tick, liquidityDelta: Liquidity, add: Bool) -> Tick {
        if (tick.sign && !add || !tick.sign && add) {
            if (tick.liquidityChange.v > liquidityDelta.v) {
                tick.liquidityChange.v = tick.liquidityChange.v - liquidityDelta.v
            } else {
                tick.liquidityChange.v = liquidityDelta.v - tick.liquidityChange.v
                tick.sign = !tick.sign
            }
        } else {
            tick.liquidityChange.v = tick.liquidityChange.v + liquidityDelta.v
        }
        
        return tick
    }

    fn calculateNewLiquidityGross(tick: Tick, sign: Bool, liquidityDelta: Liquidity, maxLiquidityPerTick: Liquidity) -> Liquidity {
        let mut newLiquidity = Liquidity{v: 0}
        if (sign) {
            newLiquidity.v = tick.liquidityGross.v + liquidityDelta.v
        } else {
            assert!(tick.liquidityGross.v >= liquidityDelta.v, InvariantError.InvalidTickLiquidity)
            newLiquidity.v = tick.liquidityGross.v - liquidityDelta.v
        }

        assert!(newLiquidity.v <= maxLiquidityPerTick.v, InvariantError.InvalidTickLiquidity)
        return newLiquidity
    }
}