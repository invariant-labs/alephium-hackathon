struct Tick {
    mut sign: Bool,
    mut index: I256,
    mut liquidityChange: U256,
    mut liquidityGross: U256,
    mut sqrtPrice: U256,
    mut feeGrowthOutsideX: U256,
    mut feeGrowthOutsideY: U256,
    mut secondsOutside: U256
}

Abstract Contract TickHelper() extends Decimal() {
    fn updateTick(poolKey: PoolKey, mut tick: Tick, liquidityDelta: U256, maxLiquidityPerTick: U256, isUpper: Bool, isDeposit: Bool) -> Bool {
        tick.liquidityGross = calculateNewLiquidityGross(tick, isDeposit, liquidityDelta, maxLiquidityPerTick)
        let updateLiquiditySign = isDeposit && !isUpper || !isDeposit && isUpper
        let updatedTick = updateLiquidityChange(tick, liquidityDelta, updateLiquiditySign)
        rewriteTick(poolKey, updatedTick)
        return updatedTick.liquidityGross == 0
    }

    fn cross(poolKey: PoolKey, mut tick: Tick,feeGrowthGlobalX: U256, feeGrowthGlobalY: U256, currentTick: I256) -> (Bool, U256) {
        tick.feeGrowthOutsideX = wrappingSub(feeGrowthGlobalX, tick.feeGrowthOutsideX)
        tick.feeGrowthOutsideY = wrappingSub(feeGrowthGlobalY, tick.feeGrowthOutsideY)

        let isBelowCurrent = currentTick >= tick.index

        rewriteTick(poolKey, tick)

        return (isBelowCurrent && !tick.sign || !isBelowCurrent && tick.sign), tick.liquidityChange
    }

    fn updateLiquidityChange(mut tick: Tick, liquidityDelta: U256, add: Bool) -> Tick {
        if (tick.sign && !add || !tick.sign && add) {
            if (tick.liquidityChange > liquidityDelta) {
                tick.liquidityChange = tick.liquidityChange - liquidityDelta
            } else {
                tick.liquidityChange = liquidityDelta - tick.liquidityChange
                tick.sign = !tick.sign
            }
        } else {
            tick.liquidityChange = tick.liquidityChange + liquidityDelta
        }
        
        return tick
    }

    fn calculateNewLiquidityGross(tick: Tick, sign: Bool, liquidityDelta: U256, maxLiquidityPerTick: U256) -> U256 {
        let mut newLiquidity = 0
        if (sign) {
            newLiquidity = tick.liquidityGross + liquidityDelta
        } else {
            newLiquidity = tick.liquidityGross - liquidityDelta
        }

        assert!(!sign || newLiquidity < maxLiquidityPerTick, InvariantError.InvalidTickLiquidity)

        return newLiquidity
    }
}