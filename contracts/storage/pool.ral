struct Pool {
    mut tokenX: ByteVec,
    mut tokenY: ByteVec,
    mut fee: U256,
    mut tickSpacing: U256,
    mut liquidity: U256,
    mut sqrtPrice: U256,
    mut currentTickIndex: I256,
    mut feeGrowthGlobalX: U256,
    mut feeGrowthGlobalY: U256,
    mut feeProtocolTokenX: U256,
    mut feeProtocolTokenY: U256,
    mut startTimestamp: U256,
    mut lastTimestamp: U256,
    mut feeReceiver: Address
}

Abstract Contract PoolHelper(clamm: CLAMM) extends Decimal() {
    fn addFee(mut pool: Pool, amount: U256, inX: Bool, protocolFee: U256) -> Pool {
        let invariantProtocolFee = mulUp(amount, protocolFee, one(PercentageScale))

        let poolFee = amount - invariantProtocolFee

        if (poolFee == 0 && invariantProtocolFee == 0 || pool.liquidity == 0) {
            return pool
        }

        let feeGrowth = clamm.feeGrowthFromFee(pool.liquidity, poolFee)

        if (inX) {
            pool.feeGrowthGlobalX = wrappingAdd(pool.feeGrowthGlobalX, feeGrowth)
            pool.feeProtocolTokenX = pool.feeProtocolTokenX + invariantProtocolFee
        } else {
            pool.feeGrowthGlobalY = wrappingAdd(pool.feeGrowthGlobalY, feeGrowth)
            pool.feeProtocolTokenY = pool.feeProtocolTokenY + invariantProtocolFee
        }

        return pool
    }
    
    pub fn updateLiquidity(mut pool: Pool, liquidityDelta: U256, liquiditySign: Bool, upperTick: I256, lowerTick: I256) -> (U256, U256, Pool) {
        let (x, y, updateLiq) = clamm.calculateAmountDelta(pool.currentTickIndex, pool.sqrtPrice, liquidityDelta, liquiditySign, upperTick, lowerTick)
        if (!updateLiq) {
            return x, y, pool
        }

        if (liquiditySign) {
            pool.liquidity = pool.liquidity + liquidityDelta
        } else {
            pool.liquidity = pool.liquidity - liquidityDelta
        }

        return x, y, pool
    }

    @using(checkExternalCaller = false)
    pub fn poolUpdateTick(
        mut pool: Pool,
        nextSqrtPrice: U256,
        swapLimit: U256,
        mut remainingAmount: U256,
        byAmountIn: Bool,
        xToY: Bool,
        protocolFee: U256,
        fee: U256,
        tickSpacing: U256,
        hasLimitingTick: Bool,
        isLimitingTickInitialized: Bool,
        limitingTickIndex: I256
    ) -> (U256, U256, Bool, Pool) {
        let mut hasCrossed = false
        let mut totalAmount = 0

        if (!hasLimitingTick || swapLimit != nextSqrtPrice) {
            pool.currentTickIndex = clamm.getTickAtSqrtPrice(nextSqrtPrice, tickSpacing)
            return totalAmount, remainingAmount, hasCrossed, pool
        }

        let isEnoughAmountToCross = clamm.isEnoughAmountToChangePrice(remainingAmount, nextSqrtPrice, pool.liquidity, fee, byAmountIn, xToY)
        
        if (hasLimitingTick && isLimitingTickInitialized) {
            if (!xToY || isEnoughAmountToCross) {
                let poolKey = generatePoolKey(pool.tokenX, pool.tokenY, pool.fee, pool.tickSpacing)
                let (add, liquidityDelta) = wrappedCross(poolKey, limitingTickIndex, pool.feeGrowthGlobalX, pool.feeGrowthGlobalY, pool.currentTickIndex)
                pool = crossLiquidityUpdate(pool, add, liquidityDelta)
                hasCrossed = true
            } else if (remainingAmount != 0) {
                if (byAmountIn) {
                    pool = addFee(pool, remainingAmount, xToY, protocolFee)
                    totalAmount = remainingAmount
                }
                remainingAmount = 0
            } else {
                // do nothing
            }
        } else {
            // do nothing
        }

        if(xToY && isEnoughAmountToCross) {
            pool.currentTickIndex = limitingTickIndex - toI256!(tickSpacing)
        } else {
            pool.currentTickIndex = limitingTickIndex
        }

        return totalAmount, remainingAmount, hasCrossed, pool
    }

    pub fn crossLiquidityUpdate(mut pool: Pool, add: Bool, liquidityDelta: U256) -> Pool {
        if (add) {
            pool.liquidity = pool.liquidity + liquidityDelta
        } else {
            pool.liquidity = pool.liquidity - liquidityDelta
        }
        return pool
    }

    pub fn getAndUpdateProtocolFee(mut pool: Pool) -> (U256, U256, Pool) {
        let x = pool.feeProtocolTokenX
        let y = pool.feeProtocolTokenY
        pool.feeProtocolTokenX = 0
        pool.feeProtocolTokenY = 0
        
        return x, y, pool
    }
}