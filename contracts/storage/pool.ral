struct Pool {
    mut poolKey: PoolKey,
    mut liquidity: Liquidity,
    mut sqrtPrice: SqrtPrice,
    mut currentTickIndex: I256,
    mut feeGrowthGlobalX: FeeGrowth,
    mut feeGrowthGlobalY: FeeGrowth,
    mut feeProtocolTokenX: TokenAmount,
    mut feeProtocolTokenY: TokenAmount,
    mut startTimestamp: U256,
    mut lastTimestamp: U256,
    mut feeReceiver: Address,
    mut reserveX: ByteVec,
    mut reserveY: ByteVec
}

Abstract Contract PoolHelper(clamm: CLAMM) extends Decimal() {
    fn addFee(mut pool: Pool, amount: TokenAmount, inX: Bool, protocolFee: Percentage) -> Pool {
        let invariantProtocolFee = TokenAmount{v: mulUp(amount.v, protocolFee.v, PERCENTAGE_DENOMINATOR)}

        let poolFee = TokenAmount{v: amount.v - invariantProtocolFee.v}

        if (poolFee.v == 0 && invariantProtocolFee.v == 0 || pool.liquidity.v == 0) {
            return pool
        }

        let feeGrowth = clamm.feeGrowthFromFee(pool.liquidity, poolFee)

        if (inX) {
            pool.feeGrowthGlobalX = FeeGrowth{v: wrappingAdd(pool.feeGrowthGlobalX.v, feeGrowth.v)}
            pool.feeProtocolTokenX = TokenAmount{v: pool.feeProtocolTokenX.v + invariantProtocolFee.v}
        } else {
            pool.feeGrowthGlobalY = FeeGrowth{v: wrappingAdd(pool.feeGrowthGlobalY.v, feeGrowth.v)}
            pool.feeProtocolTokenY = TokenAmount{v: pool.feeProtocolTokenY.v + invariantProtocolFee.v}
        }

        return pool
    }
    
    pub fn updatePoolLiquidity(mut pool: Pool, liquidityDelta: Liquidity, liquiditySign: Bool, upperTick: I256, lowerTick: I256) -> (TokenAmount, TokenAmount, Pool) {
        let (x, y, updateLiq) = clamm.calculateAmountDelta(pool.currentTickIndex, pool.sqrtPrice, liquidityDelta, liquiditySign, upperTick, lowerTick)
        if (!updateLiq) {
            return x, y, pool
        }

        if (liquiditySign) {
            pool.liquidity.v = pool.liquidity.v + liquidityDelta.v
        } else {
            pool.liquidity.v = pool.liquidity.v - liquidityDelta.v
        }

        return x, y, pool
    }

    @using(checkExternalCaller = false)
    pub fn poolUpdateTick(
        mut pool: Pool,
        nextSqrtPrice: SqrtPrice,
        swapLimit: SqrtPrice,
        mut remainingAmount: TokenAmount,
        byAmountIn: Bool,
        xToY: Bool,
        protocolFee: Percentage,
        hasLimitingTick: Bool,
        isLimitingTickInitialized: Bool,
        limitingTickIndex: I256
    ) -> (TokenAmount, TokenAmount, Bool, Pool) {
        let mut hasCrossed = false
        let mut totalAmount = TokenAmount{v: 0}

        if (!hasLimitingTick || swapLimit.v != nextSqrtPrice.v) {
            pool.currentTickIndex = clamm.getTickAtSqrtPrice(nextSqrtPrice, pool.poolKey.feeTier.tickSpacing)
            return totalAmount, remainingAmount, hasCrossed, pool
        }

        let isEnoughAmountToCross = clamm.isEnoughAmountToChangePrice(remainingAmount, nextSqrtPrice, pool.liquidity, pool.poolKey.feeTier.fee, byAmountIn, xToY)
        
        if (hasLimitingTick && isLimitingTickInitialized) {
            if (!xToY || isEnoughAmountToCross) {
                let tickKey = poolKeyBytes(pool.poolKey) ++ toByteVec!(limitingTickIndex)
                let tick = ticks[tickKey]
                let (add, liquidityDelta) = cross(pool.poolKey, tick, pool.feeGrowthGlobalX, pool.feeGrowthGlobalY, pool.currentTickIndex)
                // liquidity update
                if (add) {
                    pool.liquidity.v = pool.liquidity.v + liquidityDelta.v
                } else {
                    pool.liquidity.v = pool.liquidity.v - liquidityDelta.v
                }
                hasCrossed = true
            } else { 
                if (remainingAmount.v != 0) {
                    if (byAmountIn) {
                        pool = addFee(pool, remainingAmount, xToY, protocolFee)
                        totalAmount = remainingAmount
                    }
                    remainingAmount.v = 0
        }}}

        if(xToY && isEnoughAmountToCross) {
            pool.currentTickIndex = limitingTickIndex - toI256!(pool.poolKey.feeTier.tickSpacing)
        } else {
            pool.currentTickIndex = limitingTickIndex
        }

        return totalAmount, remainingAmount, hasCrossed, pool
    }

    fn rewritePool(pool: Pool) -> () {
        let key = poolKeyBytes(pool.poolKey)
        pools[key] = pool
    }
    
    fn serializePool(pool: Pool) -> ByteVec {
        return pool.poolKey.tokenX ++ b`break`
        ++ pool.poolKey.tokenY ++ b`break`
        ++ toByteVec!(pool.poolKey.feeTier.fee.v) ++ b`break`
        ++ toByteVec!(pool.poolKey.feeTier.tickSpacing) ++ b`break` 
        ++ toByteVec!(pool.liquidity.v) ++ b`break`
        ++ toByteVec!(pool.sqrtPrice.v) ++ b`break`
        ++ toByteVec!(pool.currentTickIndex) ++ b`break`
        ++ toByteVec!(pool.feeGrowthGlobalX.v) ++ b`break`
        ++ toByteVec!(pool.feeGrowthGlobalY.v) ++ b`break`
        ++ toByteVec!(pool.feeProtocolTokenX.v) ++ b`break`
        ++ toByteVec!(pool.feeProtocolTokenY.v) ++ b`break` 
        ++ toByteVec!(pool.startTimestamp) ++ b`break`
        ++ toByteVec!(pool.lastTimestamp) ++ b`break`
        ++ toByteVec!(pool.feeReceiver) ++ b`break` 
        ++ pool.reserveX ++ b`break` 
        ++ pool.reserveY ++ b`break`
    }
}